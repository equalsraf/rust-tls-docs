var data = {lines:[
{"lineNum":"    1","line":"//! Rust bindings for [libressl](http://libressl.org)\'s libtls"},
{"lineNum":"    2","line":"//! For the authoritative source on the inner workings of libtls check","class":"linePartCov","hits":"9","order":"147","possible_hits":"17",},
{"lineNum":"    3","line":"//! the [manpage](http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man3/tls_accept_fds.3?query=tls_init&sec=3)."},
{"lineNum":"    4","line":"//!"},
{"lineNum":"    5","line":"//! ## Client"},
{"lineNum":"    6","line":"//!"},
{"lineNum":"    7","line":"//! ```no_run"},
{"lineNum":"    8","line":"//! use std::io::Write;"},
{"lineNum":"    9","line":"//! tls::init();"},
{"lineNum":"   10","line":"//! let mut client = tls::new_client()"},
{"lineNum":"   11","line":"//!     .connect(\"www.duckduckgo.com\", \"443\", None)"},
{"lineNum":"   12","line":"//!     .unwrap();"},
{"lineNum":"   13","line":"//! client.write(\"GET / HTTP/1.1\\n\\n\".as_bytes()).unwrap();"},
{"lineNum":"   14","line":"//! ```"},
{"lineNum":"   15","line":"//!"},
{"lineNum":"   16","line":"//! ## Server"},
{"lineNum":"   17","line":"//!"},
{"lineNum":"   18","line":"//! The library does not handle TCP listening and binding, you need to handle the"},
{"lineNum":"   19","line":"//! TCP server accept() and then call `TlsServer::accept`"},
{"lineNum":"   20","line":"//!"},
{"lineNum":"   21","line":"//! ```no_run"},
{"lineNum":"   22","line":"//! use std::net::TcpListener;"},
{"lineNum":"   23","line":"//! tls::init();"},
{"lineNum":"   24","line":"//! let srv = TcpListener::bind(\"127.0.0.1:0\").unwrap();"},
{"lineNum":"   25","line":"//! let addr = srv.local_addr().unwrap();"},
{"lineNum":"   26","line":"//! let mut tls_srv = tls::new_server()"},
{"lineNum":"   27","line":"//!     .key_file(\"tests/private_key.key\")"},
{"lineNum":"   28","line":"//!     .cert_file(\"tests/certificate.crt\")"},
{"lineNum":"   29","line":"//!     .bind().unwrap();"},
{"lineNum":"   30","line":"//! // Accept TCP connection, and then start TLS over it"},
{"lineNum":"   31","line":"//! let tcp_conn = srv.incoming().next().unwrap().unwrap();"},
{"lineNum":"   32","line":"//! let mut tls_conn = tls_srv.accept(tcp_conn).unwrap();"},
{"lineNum":"   33","line":"//! ```"},
{"lineNum":"   34","line":"//!"},
{"lineNum":"   35","line":"//! ## Certificate Verification"},
{"lineNum":"   36","line":"//!"},
{"lineNum":"   37","line":"//! By default libtls will verify certificates using the system certificate store (usually defined"},
{"lineNum":"   38","line":"//! as /etc/ssl/cert.pem). In some Linux flavours and in Windows this file does not exist and you"},
{"lineNum":"   39","line":"//! will need to use one of the appropriate methods to load the correct certificates for your"},
{"lineNum":"   40","line":"//! system - check the Builder classes for the ca methods."},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"extern crate libc;"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"/// TODO: Remove this from the public API"},
{"lineNum":"   45","line":"use libc::time_t;"},
{"lineNum":"   46","line":"use std::error::Error;"},
{"lineNum":"   47","line":"use std::io;"},
{"lineNum":"   48","line":"use std::io::{Read, Write};"},
{"lineNum":"   49","line":"#[cfg(unix)]"},
{"lineNum":"   50","line":"use std::os::unix::io::{IntoRawFd, RawFd};"},
{"lineNum":"   51","line":"#[cfg(windows)]"},
{"lineNum":"   52","line":"use std::os::windows::io::{IntoRawSocket, RawSocket};"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"mod util;"},
{"lineNum":"   55","line":"mod raw;"},
{"lineNum":"   56","line":"use raw::{TlsConfig, TlsContext};"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"pub use raw::{TlsResult, TlsError, init};"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"pub struct ClientBuilder {"},
{"lineNum":"   61","line":"    cfg: Option<TlsConfig>,"},
{"lineNum":"   62","line":"    error: Option<TlsError>,"},
{"lineNum":"   63","line":"}"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"impl ClientBuilder {"},
{"lineNum":"   66","line":"    /// Load CA certificates from PEM file"},
{"lineNum":"   67","line":"    pub fn ca_file(mut self, path: &str) -> Self {"},
{"lineNum":"   68","line":"        if self.error.is_some() {"},
{"lineNum":"   69","line":"            return self;"},
{"lineNum":"   70","line":"        }"},
{"lineNum":"   71","line":"        if let Some(cfg) = self.cfg.as_mut() {"},
{"lineNum":"   72","line":"            self.error = cfg.set_ca_file(path).err();"},
{"lineNum":"   73","line":"        }"},
{"lineNum":"   74","line":"        self"},
{"lineNum":"   75","line":"    }"},
{"lineNum":"   76","line":"    /// Load CA certificates from folder"},
{"lineNum":"   77","line":"    pub fn ca_path(mut self, path: &str) -> Self {"},
{"lineNum":"   78","line":"        if self.error.is_some() {"},
{"lineNum":"   79","line":"            return self;"},
{"lineNum":"   80","line":"        }"},
{"lineNum":"   81","line":"        if let Some(cfg) = self.cfg.as_mut() {"},
{"lineNum":"   82","line":"            self.error = cfg.set_ca_path(path).err();"},
{"lineNum":"   83","line":"        }"},
{"lineNum":"   84","line":"        self"},
{"lineNum":"   85","line":"    }"},
{"lineNum":"   86","line":"    /// Use CA certificates from PEM string"},
{"lineNum":"   87","line":"    pub fn ca(mut self, ca: &str) -> Self {"},
{"lineNum":"   88","line":"        if self.error.is_some() {"},
{"lineNum":"   89","line":"            return self;"},
{"lineNum":"   90","line":"        }"},
{"lineNum":"   91","line":"        if let Some(cfg) = self.cfg.as_mut() {"},
{"lineNum":"   92","line":"            self.error = cfg.set_ca_mem(ca).err();"},
{"lineNum":"   93","line":"        }"},
{"lineNum":"   94","line":"        self"},
{"lineNum":"   95","line":"    }"},
{"lineNum":"   96","line":"    pub fn verify_depth(mut self, depth: i32) -> Self {"},
{"lineNum":"   97","line":"        if self.error.is_some() {"},
{"lineNum":"   98","line":"            return self;"},
{"lineNum":"   99","line":"        }"},
{"lineNum":"  100","line":"        if let Some(cfg) = self.cfg.as_mut() {"},
{"lineNum":"  101","line":"            cfg.set_verify_depth(depth);"},
{"lineNum":"  102","line":"        }"},
{"lineNum":"  103","line":"        self"},
{"lineNum":"  104","line":"    }"},
{"lineNum":"  105","line":"    pub fn protocols(mut self, protocols: &str) -> Self {"},
{"lineNum":"  106","line":"        if self.error.is_some() {"},
{"lineNum":"  107","line":"            return self;"},
{"lineNum":"  108","line":"        }"},
{"lineNum":"  109","line":"        if let Some(cfg) = self.cfg.as_mut() {"},
{"lineNum":"  110","line":"            self.error = cfg.set_protocols(protocols).err();"},
{"lineNum":"  111","line":"        }"},
{"lineNum":"  112","line":"        self"},
{"lineNum":"  113","line":"    }"},
{"lineNum":"  114","line":"    pub fn ciphers(mut self, ciphers: &str) -> Self {"},
{"lineNum":"  115","line":"        if self.error.is_some() {"},
{"lineNum":"  116","line":"            return self;"},
{"lineNum":"  117","line":"        }"},
{"lineNum":"  118","line":"        if let Some(cfg) = self.cfg.as_mut() {"},
{"lineNum":"  119","line":"            self.error = cfg.set_ciphers(ciphers).err();"},
{"lineNum":"  120","line":"        }"},
{"lineNum":"  121","line":"        self"},
{"lineNum":"  122","line":"    }"},
{"lineNum":"  123","line":"    /// Disable certificate verification"},
{"lineNum":"  124","line":"    pub fn insecure_noverifycert(mut self) -> Self {"},
{"lineNum":"  125","line":"        if self.error.is_some() {"},
{"lineNum":"  126","line":"            return self;"},
{"lineNum":"  127","line":"        }"},
{"lineNum":"  128","line":"        if let Some(cfg) = self.cfg.as_mut() {"},
{"lineNum":"  129","line":"            cfg.insecure_noverifycert();"},
{"lineNum":"  130","line":"        }"},
{"lineNum":"  131","line":"        self"},
{"lineNum":"  132","line":"    }"},
{"lineNum":"  133","line":"    /// Disable hostname verification"},
{"lineNum":"  134","line":"    pub fn insecure_noverifyname(mut self) -> Self {"},
{"lineNum":"  135","line":"        if self.error.is_some() {"},
{"lineNum":"  136","line":"            return self;"},
{"lineNum":"  137","line":"        }"},
{"lineNum":"  138","line":"        if let Some(cfg) = self.cfg.as_mut() {"},
{"lineNum":"  139","line":"            cfg.insecure_noverifyname();"},
{"lineNum":"  140","line":"        }"},
{"lineNum":"  141","line":"        self"},
{"lineNum":"  142","line":"    }"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"    /// Create client context from settings"},
{"lineNum":"  145","line":"    fn new_ctx(self) -> TlsResult<TlsContext> {"},
{"lineNum":"  146","line":"        if let Some(err) = self.error {"},
{"lineNum":"  147","line":"            Err(err)"},
{"lineNum":"  148","line":"        } else {"},
{"lineNum":"  149","line":"            let mut cli = try!(TlsContext::new_client());"},
{"lineNum":"  150","line":"            // This unwrap should be safe, we can\'t have a cfg without an error"},
{"lineNum":"  151","line":"            try!(cli.configure(self.cfg.unwrap()));"},
{"lineNum":"  152","line":"            Ok(cli)"},
{"lineNum":"  153","line":"        }"},
{"lineNum":"  154","line":"    }"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"    /// Open Connection to remote host"},
{"lineNum":"  157","line":"    ///"},
{"lineNum":"  158","line":"    /// - If port is empty, the port value is assumed to be part of the hostname string as `host:port`."},
{"lineNum":"  159","line":"    /// - If servername is not empty it is used instead of the hostname for verification."},
{"lineNum":"  160","line":"    pub fn connect(self,"},
{"lineNum":"  161","line":"                   hostname: &str,"},
{"lineNum":"  162","line":"                   port: &str,"},
{"lineNum":"  163","line":"                   servername: Option<&str>)"},
{"lineNum":"  164","line":"                   -> TlsResult<TlsStream> {"},
{"lineNum":"  165","line":"        let mut ctx = try!(self.new_ctx());"},
{"lineNum":"  166","line":"        try!(ctx.connect_servername(hostname, port, servername.unwrap_or(\"\")));"},
{"lineNum":"  167","line":"        Ok(TlsStream {"},
{"lineNum":"  168","line":"            ctx: ctx,"},
{"lineNum":"  169","line":"            socket: None,"},
{"lineNum":"  170","line":"        })"},
{"lineNum":"  171","line":"    }"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"    #[cfg(unix)]"},
{"lineNum":"  174","line":"    /// Establish a TLS connection over the given socket"},
{"lineNum":"  175","line":"    pub fn connect_socket<F: IntoRawFd>(self, ifd: F, servername: &str) -> TlsResult<TlsStream> {"},
{"lineNum":"  176","line":"        let mut ctx = try!(self.new_ctx());"},
{"lineNum":"  177","line":"        let fd = ifd.into_raw_fd();"},
{"lineNum":"  178","line":"        try!(ctx.connect_socket(fd, servername));"},
{"lineNum":"  179","line":"        Ok(TlsStream {"},
{"lineNum":"  180","line":"            ctx: ctx,"},
{"lineNum":"  181","line":"            socket: Some(fd),"},
{"lineNum":"  182","line":"        })"},
{"lineNum":"  183","line":"    }"},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"    #[cfg(windows)]"},
{"lineNum":"  186","line":"    /// Establish a TLS connection over the given socket"},
{"lineNum":"  187","line":"    pub fn connect_socket<F: IntoRawSocket>(self, isock: F, servername: &str) -> TlsResult<TlsStream> {"},
{"lineNum":"  188","line":"        let mut ctx = try!(self.new_ctx());"},
{"lineNum":"  189","line":"        let sock = isock.into_raw_socket();"},
{"lineNum":"  190","line":"        try!(ctx.connect_socket(sock, servername));"},
{"lineNum":"  191","line":"        Ok(TlsStream { ctx: ctx })"},
{"lineNum":"  192","line":"    }"},
{"lineNum":"  193","line":"}"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"/// Create a new TLS client"},
{"lineNum":"  196","line":"pub fn new_client() -> ClientBuilder {"},
{"lineNum":"  197","line":"    match TlsConfig::new() {"},
{"lineNum":"  198","line":"        Ok(cfg) => {"},
{"lineNum":"  199","line":"            ClientBuilder {"},
{"lineNum":"  200","line":"                cfg: Some(cfg),"},
{"lineNum":"  201","line":"                error: None,"},
{"lineNum":"  202","line":"            }"},
{"lineNum":"  203","line":"        }"},
{"lineNum":"  204","line":"        Err(err) => {"},
{"lineNum":"  205","line":"            ClientBuilder {"},
{"lineNum":"  206","line":"                cfg: None,"},
{"lineNum":"  207","line":"                error: Some(err),"},
{"lineNum":"  208","line":"            }"},
{"lineNum":"  209","line":"        }"},
{"lineNum":"  210","line":"    }"},
{"lineNum":"  211","line":"}"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"pub struct TlsStream {"},
{"lineNum":"  214","line":"    ctx: TlsContext,"},
{"lineNum":"  215","line":"    #[cfg(unix)]"},
{"lineNum":"  216","line":"    socket: Option<RawFd>,"},
{"lineNum":"  217","line":"}"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"impl TlsStream {"},
{"lineNum":"  220","line":"    /// Executes the TLS handshake. This function is automatically called when reading or writing,"},
{"lineNum":"  221","line":"    /// you usually don\'t need to call it unless you want to force the handshake to finish sooner."},
{"lineNum":"  222","line":"    ///"},
{"lineNum":"  223","line":"    /// Calling handshake multiple times, if the other end of the connection is not expecting it"},
{"lineNum":"  224","line":"    /// will usually result in an error."},
{"lineNum":"  225","line":"    pub fn handshake(&mut self) -> TlsResult<()> {"},
{"lineNum":"  226","line":"        self.ctx.handshake()"},
{"lineNum":"  227","line":"    }"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"    /// Close the connection"},
{"lineNum":"  230","line":"    pub fn shutdown(&mut self) -> io::Result<()> {"},
{"lineNum":"  231","line":"        if let Err(err) = self.ctx.close() {"},
{"lineNum":"  232","line":"            if err.wants_more() {"},
{"lineNum":"  233","line":"                try!(self.ctx.close());"},
{"lineNum":"  234","line":"            } else {"},
{"lineNum":"  235","line":"                return Err(io::Error::from(err));"},
{"lineNum":"  236","line":"            }"},
{"lineNum":"  237","line":"        }"},
{"lineNum":"  238","line":"        Ok(())"},
{"lineNum":"  239","line":"    }"},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"    pub fn certificate_issuer(&self) -> String {"},
{"lineNum":"  242","line":"        self.ctx.peer_cert_issuer()"},
{"lineNum":"  243","line":"    }"},
{"lineNum":"  244","line":"    pub fn certificate_hash(&self) -> String {"},
{"lineNum":"  245","line":"        self.ctx.peer_cert_hash()"},
{"lineNum":"  246","line":"    }"},
{"lineNum":"  247","line":"    pub fn certificate_subject(&self) -> String {"},
{"lineNum":"  248","line":"        self.ctx.peer_cert_subject()"},
{"lineNum":"  249","line":"    }"},
{"lineNum":"  250","line":"    pub fn peer_cert_provided(&self) -> bool {"},
{"lineNum":"  251","line":"        self.ctx.peer_cert_provided()"},
{"lineNum":"  252","line":"    }"},
{"lineNum":"  253","line":"    pub fn peer_cert_notbefore(&self) -> TlsResult<time_t> {"},
{"lineNum":"  254","line":"        self.ctx.peer_cert_notbefore()"},
{"lineNum":"  255","line":"    }"},
{"lineNum":"  256","line":"    pub fn peer_cert_notafter(&self) -> TlsResult<time_t> {"},
{"lineNum":"  257","line":"        self.ctx.peer_cert_notafter()"},
{"lineNum":"  258","line":"    }"},
{"lineNum":"  259","line":"    pub fn peer_cert_contains_name(&self, name: &str) -> bool {"},
{"lineNum":"  260","line":"        self.ctx.peer_cert_contains_name(name)"},
{"lineNum":"  261","line":"    }"},
{"lineNum":"  262","line":"    pub fn version(&self) -> String {"},
{"lineNum":"  263","line":"        self.ctx.conn_version()"},
{"lineNum":"  264","line":"    }"},
{"lineNum":"  265","line":"    pub fn cipher(&self) -> String {"},
{"lineNum":"  266","line":"        self.ctx.conn_cipher()"},
{"lineNum":"  267","line":"    }"},
{"lineNum":"  268","line":"}"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"impl Read for TlsStream {"},
{"lineNum":"  271","line":"    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {"},
{"lineNum":"  272","line":"        self.ctx"},
{"lineNum":"  273","line":"            .read(buf)"},
{"lineNum":"  274","line":"            .map_err(|err| io::Error::from(err))"},
{"lineNum":"  275","line":"    }"},
{"lineNum":"  276","line":"}"},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"impl Write for TlsStream {"},
{"lineNum":"  279","line":"    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {"},
{"lineNum":"  280","line":"        self.ctx"},
{"lineNum":"  281","line":"            .write(buf)"},
{"lineNum":"  282","line":"            .map_err(|err| io::Error::from(err))"},
{"lineNum":"  283","line":"    }"},
{"lineNum":"  284","line":"    fn flush(&mut self) -> io::Result<()> {"},
{"lineNum":"  285","line":"        Ok(())"},
{"lineNum":"  286","line":"    }"},
{"lineNum":"  287","line":"}"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"impl Drop for TlsStream {"},
{"lineNum":"  290","line":"    fn drop(&mut self) {"},
{"lineNum":"  291","line":"        let _ = self.ctx.close();"},
{"lineNum":"  292","line":"    }"},
{"lineNum":"  293","line":"}"},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"pub struct ServerBuilder {"},
{"lineNum":"  296","line":"    cfg: Option<TlsConfig>,"},
{"lineNum":"  297","line":"    error: Option<TlsError>,"},
{"lineNum":"  298","line":"}"},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"impl ServerBuilder {"},
{"lineNum":"  301","line":"    pub fn key_file(mut self, path: &str) -> Self {"},
{"lineNum":"  302","line":"        if self.error.is_some() {"},
{"lineNum":"  303","line":"            return self;"},
{"lineNum":"  304","line":"        }"},
{"lineNum":"  305","line":"        if let Some(cfg) = self.cfg.as_mut() {"},
{"lineNum":"  306","line":"            self.error = cfg.set_key_file(path).err();"},
{"lineNum":"  307","line":"        }"},
{"lineNum":"  308","line":"        self"},
{"lineNum":"  309","line":"    }"},
{"lineNum":"  310","line":"    pub fn cert_file(mut self, path: &str) -> Self {"},
{"lineNum":"  311","line":"        if self.error.is_some() {"},
{"lineNum":"  312","line":"            return self;"},
{"lineNum":"  313","line":"        }"},
{"lineNum":"  314","line":"        if let Some(cfg) = self.cfg.as_mut() {"},
{"lineNum":"  315","line":"            self.error = cfg.set_cert_file(path).err();"},
{"lineNum":"  316","line":"        }"},
{"lineNum":"  317","line":"        self"},
{"lineNum":"  318","line":"    }"},
{"lineNum":"  319","line":""},
{"lineNum":"  320","line":"    /// Create server context from settings"},
{"lineNum":"  321","line":"    fn new_ctx(self) -> TlsResult<TlsContext> {"},
{"lineNum":"  322","line":"        if let Some(err) = self.error {"},
{"lineNum":"  323","line":"            Err(err)"},
{"lineNum":"  324","line":"        } else {"},
{"lineNum":"  325","line":"            let mut cli = try!(TlsContext::new_server());"},
{"lineNum":"  326","line":"            // This unwrap should be safe, we can\'t have a cfg without an error"},
{"lineNum":"  327","line":"            try!(cli.configure(self.cfg.unwrap()));"},
{"lineNum":"  328","line":"            Ok(cli)"},
{"lineNum":"  329","line":"        }"},
{"lineNum":"  330","line":"    }"},
{"lineNum":"  331","line":"    pub fn bind(self) -> TlsResult<TlsServer> {"},
{"lineNum":"  332","line":"        let ctx = try!(self.new_ctx());"},
{"lineNum":"  333","line":"        Ok(TlsServer { ctx: ctx })"},
{"lineNum":"  334","line":"    }"},
{"lineNum":"  335","line":"}"},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"/// Create a new TLS server"},
{"lineNum":"  338","line":"pub fn new_server() -> ServerBuilder {"},
{"lineNum":"  339","line":"    match TlsConfig::new() {"},
{"lineNum":"  340","line":"        Ok(cfg) => {"},
{"lineNum":"  341","line":"            ServerBuilder {"},
{"lineNum":"  342","line":"                cfg: Some(cfg),"},
{"lineNum":"  343","line":"                error: None,"},
{"lineNum":"  344","line":"            }"},
{"lineNum":"  345","line":"        }"},
{"lineNum":"  346","line":"        Err(err) => {"},
{"lineNum":"  347","line":"            ServerBuilder {"},
{"lineNum":"  348","line":"                cfg: None,"},
{"lineNum":"  349","line":"                error: Some(err),"},
{"lineNum":"  350","line":"            }"},
{"lineNum":"  351","line":"        }"},
{"lineNum":"  352","line":"    }"},
{"lineNum":"  353","line":"}"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"/// TLS Server, used to start TLS session over existing sockets."},
{"lineNum":"  356","line":"pub struct TlsServer {"},
{"lineNum":"  357","line":"    ctx: TlsContext,"},
{"lineNum":"  358","line":"}"},
{"lineNum":"  359","line":""},
{"lineNum":"  360","line":"impl TlsServer {"},
{"lineNum":"  361","line":"    #[cfg(unix)]"},
{"lineNum":"  362","line":"    /// Start a new TLS connection over an existing socket (server-side)"},
{"lineNum":"  363","line":"    pub fn accept<F: IntoRawFd>(&mut self, ifd: F) -> io::Result<TlsStream> {"},
{"lineNum":"  364","line":"        let fd = ifd.into_raw_fd();"},
{"lineNum":"  365","line":"        let c = try!(self.ctx.accept_socket(fd));"},
{"lineNum":"  366","line":"        Ok(TlsStream {"},
{"lineNum":"  367","line":"            ctx: c,"},
{"lineNum":"  368","line":"            socket: Some(fd),"},
{"lineNum":"  369","line":"        })"},
{"lineNum":"  370","line":"    }"},
{"lineNum":"  371","line":""},
{"lineNum":"  372","line":"    #[cfg(windows)]"},
{"lineNum":"  373","line":"    /// Start a new TLS connection over an existing socket (server-side)"},
{"lineNum":"  374","line":"    pub fn accept<F: IntoRawSocket>(&mut self, isock: F) -> TlsResult<TlsStream> {"},
{"lineNum":"  375","line":"        let sock = isock.into_raw_socket();"},
{"lineNum":"  376","line":"        let c = try!(self.ctx.accept_socket(sock));"},
{"lineNum":"  377","line":"        Ok(TlsStream { ctx: c })"},
{"lineNum":"  378","line":"    }"},
{"lineNum":"  379","line":"}"},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"#[test]"},
{"lineNum":"  382","line":"fn test_protocols() {","class":"lineCov","hits":"1","order":"7","possible_hits":"1",},
{"lineNum":"  383","line":"    let mut cfg = TlsConfig::new().unwrap();","class":"lineCov","hits":"1","order":"9","possible_hits":"1",},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"    // The following are all supported"},
{"lineNum":"  386","line":"    cfg.set_protocols(\"all\").unwrap();","class":"lineCov","hits":"1","order":"533","possible_hits":"1",},
{"lineNum":"  387","line":"    cfg.set_protocols(\"legacy\").unwrap();","class":"lineCov","hits":"1","order":"564","possible_hits":"1",},
{"lineNum":"  388","line":"    cfg.set_protocols(\"default\").unwrap();","class":"lineCov","hits":"1","order":"566","possible_hits":"1",},
{"lineNum":"  389","line":"    cfg.set_protocols(\"secure\").unwrap();","class":"lineCov","hits":"1","order":"569","possible_hits":"1",},
{"lineNum":"  390","line":"    cfg.set_protocols(\"tlsv1\").unwrap();","class":"lineCov","hits":"1","order":"571","possible_hits":"1",},
{"lineNum":"  391","line":"    cfg.set_protocols(\"tlsv1.0\").unwrap();","class":"lineCov","hits":"1","order":"573","possible_hits":"1",},
{"lineNum":"  392","line":"    cfg.set_protocols(\"tlsv1.1\").unwrap();","class":"lineCov","hits":"1","order":"575","possible_hits":"1",},
{"lineNum":"  393","line":"    cfg.set_protocols(\"tlsv1.2\").unwrap();","class":"lineCov","hits":"1","order":"577","possible_hits":"1",},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"    // This is not valid"},
{"lineNum":"  396","line":"    assert!(cfg.set_protocols(\"unknown-proto\").is_err());","class":"linePartCov","hits":"1","order":"579","possible_hits":"2",},
{"lineNum":"  397","line":"}","class":"linePartCov","hits":"1","order":"590","possible_hits":"2",},
{"lineNum":"  398","line":""},
{"lineNum":"  399","line":"#[test]"},
{"lineNum":"  400","line":"fn client_ctx_defs() {","class":"lineCov","hits":"1","order":"6","possible_hits":"1",},
{"lineNum":"  401","line":"    assert!(init());","class":"lineCov","hits":"1","order":"8","possible_hits":"1",},
{"lineNum":"  402","line":""},
{"lineNum":"  403","line":"    let c = TlsContext::new_client().unwrap();","class":"lineCov","hits":"1","order":"148","possible_hits":"1",},
{"lineNum":"  404","line":""},
{"lineNum":"  405","line":"    // These are the defaults before the connection is set"},
{"lineNum":"  406","line":"    assert_eq!(c.conn_version(), \"\");"},
{"lineNum":"  407","line":"    assert_eq!(c.conn_cipher(), \"\");"},
{"lineNum":"  408","line":"    assert!(c.peer_cert_notbefore().is_err());","class":"linePartCov","hits":"1","order":"265","possible_hits":"2",},
{"lineNum":"  409","line":"    assert!(c.peer_cert_notafter().is_err());","class":"linePartCov","hits":"1","order":"394","possible_hits":"2",},
{"lineNum":"  410","line":"    assert_eq!(c.peer_cert_issuer(), \"\");"},
{"lineNum":"  411","line":"    assert_eq!(c.peer_cert_subject(), \"\");"},
{"lineNum":"  412","line":"    assert_eq!(c.peer_cert_hash(), \"\");"},
{"lineNum":"  413","line":"    assert_eq!(c.peer_cert_contains_name(\"some.name\"), false);"},
{"lineNum":"  414","line":"    assert_eq!(c.peer_cert_provided(), false);"},
{"lineNum":"  415","line":"}","class":"linePartCov","hits":"1","order":"520","possible_hits":"2",},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "tls-90dc0ae2bd2b42a3", "date" : "2016-01-25 22:00:58", "instrumented" : 19, "covered" : 19,};
var merged_data = [];
