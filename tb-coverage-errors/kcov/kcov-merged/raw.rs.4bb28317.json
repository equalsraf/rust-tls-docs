var data = {lines:[
{"lineNum":"    1","line":""},
{"lineNum":"    2","line":"extern crate tls_sys as ffi;","class":"lineCov","hits":"1","order":"260",},
{"lineNum":"    3","line":"extern crate libc;"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"use std::ffi::CString;"},
{"lineNum":"    6","line":"use libc::{time_t, c_void, size_t};"},
{"lineNum":"    7","line":"use std::ptr;"},
{"lineNum":"    8","line":"use std::error::Error;"},
{"lineNum":"    9","line":"use std::fmt;"},
{"lineNum":"   10","line":"use std::convert;"},
{"lineNum":"   11","line":"use std::io;"},
{"lineNum":"   12","line":"#[cfg(unix)]"},
{"lineNum":"   13","line":"use std::os::unix::io::RawFd;"},
{"lineNum":"   14","line":"#[cfg(windows)]"},
{"lineNum":"   15","line":"use std::os::windows::io::RawSocket;"},
{"lineNum":"   16","line":"use std::sync::{Once, ONCE_INIT};"},
{"lineNum":"   17","line":"use super::util::*;"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"#[derive(Debug)]","class":"lineNoCov","hits":"0",},
{"lineNum":"   20","line":"pub struct TlsError {"},
{"lineNum":"   21","line":"    msg: String,","class":"lineNoCov","hits":"0",},
{"lineNum":"   22","line":"    code: i64,","class":"lineNoCov","hits":"0",},
{"lineNum":"   23","line":"}"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"impl TlsError {"},
{"lineNum":"   26","line":"    /// The operation failed because it would block reading"},
{"lineNum":"   27","line":"    fn want_pollin(&self) -> bool {","class":"lineCov","hits":"1","order":"486",},
{"lineNum":"   28","line":"        self.code == ffi::WANT_POLLIN","class":"lineCov","hits":"1","order":"488",},
{"lineNum":"   29","line":"    }","class":"lineCov","hits":"1","order":"489",},
{"lineNum":"   30","line":"    /// The operation failed because it would block writing"},
{"lineNum":"   31","line":"    fn want_pollout(&self) -> bool {","class":"lineCov","hits":"1","order":"492",},
{"lineNum":"   32","line":"        self.code == ffi::WANT_POLLIN","class":"lineCov","hits":"1","order":"493",},
{"lineNum":"   33","line":"    }","class":"lineCov","hits":"1","order":"494",},
{"lineNum":"   34","line":"    /// The operation failed because it would block, repeating"},
{"lineNum":"   35","line":"    /// the same operation should succeed, but will block."},
{"lineNum":"   36","line":"    pub fn wants_more(&self) -> bool {","class":"lineCov","hits":"1","order":"496",},
{"lineNum":"   37","line":"        self.want_pollin() || self.want_pollout()","class":"lineCov","hits":"1","order":"498",},
{"lineNum":"   38","line":"    }","class":"lineCov","hits":"1","order":"500",},
{"lineNum":"   39","line":"    fn new<S: Into<String>>(msg: S) -> TlsError {","class":"lineCov","hits":"1","order":"144",},
{"lineNum":"   40","line":"        TlsError {"},
{"lineNum":"   41","line":"            msg: msg.into(),","class":"lineCov","hits":"1","order":"145",},
{"lineNum":"   42","line":"            code: -1,","class":"lineCov","hits":"1","order":"146",},
{"lineNum":"   43","line":"        }"},
{"lineNum":"   44","line":"    }","class":"lineCov","hits":"1","order":"147",},
{"lineNum":"   45","line":"}"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"impl fmt::Display for TlsError {"},
{"lineNum":"   48","line":"    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {","class":"lineNoCov","hits":"0",},
{"lineNum":"   49","line":"        write!(f, \"{}\", self.msg)","class":"lineNoCov","hits":"0",},
{"lineNum":"   50","line":"    }","class":"lineNoCov","hits":"0",},
{"lineNum":"   51","line":"}"},
{"lineNum":"   52","line":"impl Error for TlsError {"},
{"lineNum":"   53","line":"    fn description(&self) -> &str {","class":"lineNoCov","hits":"0",},
{"lineNum":"   54","line":"        &self.msg","class":"lineNoCov","hits":"0",},
{"lineNum":"   55","line":"    }","class":"lineNoCov","hits":"0",},
{"lineNum":"   56","line":"}"},
{"lineNum":"   57","line":"/// Convert TlsError to io::Error, use WouldBlock if applicable"},
{"lineNum":"   58","line":"impl convert::From<TlsError> for io::Error {"},
{"lineNum":"   59","line":"    fn from(err: TlsError) -> Self {","class":"lineCov","hits":"1","order":"503",},
{"lineNum":"   60","line":"        match err.code {","class":"lineCov","hits":"1","order":"504",},
{"lineNum":"   61","line":"            ffi::WANT_POLLIN | ffi::WANT_POLLOUT => io::Error::new(io::ErrorKind::WouldBlock, err),","class":"lineNoCov","hits":"0",},
{"lineNum":"   62","line":"            _ => io::Error::new(io::ErrorKind::Other, err.msg),","class":"lineCov","hits":"1","order":"505",},
{"lineNum":"   63","line":"        }"},
{"lineNum":"   64","line":"    }","class":"lineNoCov","hits":"0",},
{"lineNum":"   65","line":"}"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"/// result type for TLS operations"},
{"lineNum":"   68","line":"pub type TlsResult<T> = Result<T, TlsError>;"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"/// TLS configuration settings, see `TlsContext::configure` to apply them"},
{"lineNum":"   71","line":"pub struct TlsConfig {"},
{"lineNum":"   72","line":"    cfg: ffi::Config,"},
{"lineNum":"   73","line":"}"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"impl TlsConfig {"},
{"lineNum":"   76","line":"    pub fn new() -> TlsResult<TlsConfig> {","class":"lineCov","hits":"1","order":"6",},
{"lineNum":"   77","line":"        let p = unsafe { ffi::tls_config_new() };","class":"lineCov","hits":"1","order":"206",},
{"lineNum":"   78","line":"        if p == ptr::null_mut() {","class":"lineCov","hits":"1","order":"207",},
{"lineNum":"   79","line":"            Err(TlsError::new(\"Unable to create TLS config\"))","class":"lineNoCov","hits":"0",},
{"lineNum":"   80","line":"        } else {"},
{"lineNum":"   81","line":"            Ok(TlsConfig { cfg: p })","class":"lineCov","hits":"1","order":"208",},
{"lineNum":"   82","line":"        }"},
{"lineNum":"   83","line":"    }","class":"lineCov","hits":"1","order":"209",},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"    pub fn set_ca_file(&mut self, path: &str) -> TlsResult<()> {","class":"lineCov","hits":"1","order":"512",},
{"lineNum":"   86","line":"        let rv = unsafe {"},
{"lineNum":"   87","line":"            let path_c = CString::from_vec_unchecked(path.bytes().collect());","class":"lineCov","hits":"1","order":"514",},
{"lineNum":"   88","line":"            ffi::tls_config_set_ca_file(self.cfg, path_c.as_ptr())","class":"lineCov","hits":"1","order":"515",},
{"lineNum":"   89","line":"        };","class":"lineCov","hits":"1","order":"516",},
{"lineNum":"   90","line":"        if rv == 0 {","class":"lineCov","hits":"1","order":"517",},
{"lineNum":"   91","line":"            Ok(())"},
{"lineNum":"   92","line":"        } else {"},
{"lineNum":"   93","line":"            Err(TlsError::new(\"Unable to set CA file\"))","class":"lineNoCov","hits":"0",},
{"lineNum":"   94","line":"        }"},
{"lineNum":"   95","line":"    }","class":"lineCov","hits":"1","order":"518",},
{"lineNum":"   96","line":"    pub fn set_ca_path(&mut self, path: &str) -> TlsResult<()> {","class":"lineCov","hits":"1","order":"519",},
{"lineNum":"   97","line":"        let rv = unsafe {"},
{"lineNum":"   98","line":"            let path_c = str_c_ptr(path);","class":"lineCov","hits":"1","order":"520",},
{"lineNum":"   99","line":"            ffi::tls_config_set_ca_path(self.cfg, path_c)","class":"lineCov","hits":"1","order":"521",},
{"lineNum":"  100","line":"        };"},
{"lineNum":"  101","line":"        if rv == 0 {","class":"lineCov","hits":"1","order":"522",},
{"lineNum":"  102","line":"            Ok(())"},
{"lineNum":"  103","line":"        } else {"},
{"lineNum":"  104","line":"            Err(TlsError::new(\"Unable to set CA path\"))","class":"lineNoCov","hits":"0",},
{"lineNum":"  105","line":"        }"},
{"lineNum":"  106","line":"    }","class":"lineCov","hits":"1","order":"523",},
{"lineNum":"  107","line":"    pub fn set_ca_mem(&mut self, ca: &str) -> TlsResult<()> {","class":"lineCov","hits":"1","order":"524",},
{"lineNum":"  108","line":"        let rv = unsafe { ffi::tls_config_set_ca_mem(self.cfg, ca.as_ptr(), ca.len()) };","class":"lineCov","hits":"1","order":"525",},
{"lineNum":"  109","line":"        if rv == 0 {","class":"lineCov","hits":"1","order":"526",},
{"lineNum":"  110","line":"            Ok(())"},
{"lineNum":"  111","line":"        } else {"},
{"lineNum":"  112","line":"            Err(TlsError::new(\"Unable to set CA from memory\"))","class":"lineNoCov","hits":"0",},
{"lineNum":"  113","line":"        }"},
{"lineNum":"  114","line":"    }","class":"lineCov","hits":"1","order":"527",},
{"lineNum":"  115","line":"    pub fn set_verify_depth(&mut self, depth: i32) {","class":"lineCov","hits":"1","order":"529",},
{"lineNum":"  116","line":"        unsafe { ffi::tls_config_set_verify_depth(self.cfg, depth) }","class":"lineCov","hits":"1","order":"531",},
{"lineNum":"  117","line":"    }","class":"lineCov","hits":"1","order":"532",},
{"lineNum":"  118","line":"    pub fn insecure_noverifyname(&mut self) {","class":"lineCov","hits":"1","order":"534",},
{"lineNum":"  119","line":"        unsafe { ffi::tls_config_insecure_noverifyname(self.cfg) }","class":"lineCov","hits":"1","order":"536",},
{"lineNum":"  120","line":"    }","class":"lineCov","hits":"1","order":"538",},
{"lineNum":"  121","line":"    pub fn insecure_noverifycert(&mut self) {","class":"lineCov","hits":"1","order":"539",},
{"lineNum":"  122","line":"        unsafe { ffi::tls_config_insecure_noverifycert(self.cfg) }","class":"lineCov","hits":"1","order":"540",},
{"lineNum":"  123","line":"    }","class":"lineCov","hits":"1","order":"541",},
{"lineNum":"  124","line":"    pub fn set_key_file(&mut self, path: &str) -> TlsResult<()> {","class":"lineCov","hits":"1","order":"943",},
{"lineNum":"  125","line":"        let rv = unsafe {"},
{"lineNum":"  126","line":"            let path_c = CString::from_vec_unchecked(path.bytes().collect());","class":"lineCov","hits":"1","order":"944",},
{"lineNum":"  127","line":"            ffi::tls_config_set_key_file(self.cfg, path_c.as_ptr())","class":"lineCov","hits":"1","order":"945",},
{"lineNum":"  128","line":"        };","class":"lineCov","hits":"1","order":"946",},
{"lineNum":"  129","line":"        if rv == 0 {","class":"lineCov","hits":"1","order":"947",},
{"lineNum":"  130","line":"            Ok(())"},
{"lineNum":"  131","line":"        } else {"},
{"lineNum":"  132","line":"            Err(TlsError::new(\"Unable to set key file\"))","class":"lineNoCov","hits":"0",},
{"lineNum":"  133","line":"        }"},
{"lineNum":"  134","line":"    }","class":"lineCov","hits":"1","order":"948",},
{"lineNum":"  135","line":"    pub fn set_cert_file(&mut self, path: &str) -> TlsResult<()> {","class":"lineCov","hits":"1","order":"949",},
{"lineNum":"  136","line":"        let rv = unsafe {"},
{"lineNum":"  137","line":"            let path_c = CString::from_vec_unchecked(path.bytes().collect());","class":"lineCov","hits":"1","order":"950",},
{"lineNum":"  138","line":"            ffi::tls_config_set_cert_file(self.cfg, path_c.as_ptr())","class":"lineCov","hits":"1","order":"951",},
{"lineNum":"  139","line":"        };","class":"lineCov","hits":"1","order":"952",},
{"lineNum":"  140","line":"        if rv == 0 {","class":"lineCov","hits":"1","order":"953",},
{"lineNum":"  141","line":"            Ok(())"},
{"lineNum":"  142","line":"        } else {"},
{"lineNum":"  143","line":"            Err(TlsError::new(\"Unable to set certificate file\"))","class":"lineNoCov","hits":"0",},
{"lineNum":"  144","line":"        }"},
{"lineNum":"  145","line":"    }","class":"lineCov","hits":"1","order":"954",},
{"lineNum":"  146","line":"    pub fn set_protocols(&mut self, protocols: &str) -> TlsResult<()> {","class":"lineCov","hits":"1","order":"211",},
{"lineNum":"  147","line":"        let mut proto = 0;","class":"lineCov","hits":"1","order":"212",},
{"lineNum":"  148","line":"        unsafe {"},
{"lineNum":"  149","line":"            let proto_c = CString::from_vec_unchecked(protocols.bytes().collect());","class":"lineCov","hits":"1","order":"213",},
{"lineNum":"  150","line":"            if ffi::tls_config_parse_protocols(&mut proto, proto_c.as_ptr()) == -1 {","class":"lineCov","hits":"1","order":"214",},
{"lineNum":"  151","line":"                return Err(TlsError::new(format!(\"Invalid protocols: {}\", protocols)));","class":"lineCov","hits":"1","order":"259",},
{"lineNum":"  152","line":"            }"},
{"lineNum":"  153","line":"            ffi::tls_config_set_protocols(self.cfg, proto);","class":"lineCov","hits":"1","order":"238",},
{"lineNum":"  154","line":"        }","class":"lineCov","hits":"1","order":"239",},
{"lineNum":"  155","line":"        Ok(())"},
{"lineNum":"  156","line":"    }","class":"lineCov","hits":"1","order":"240",},
{"lineNum":"  157","line":"    pub fn set_ciphers(&mut self, ciphers: &str) -> TlsResult<()> {","class":"lineCov","hits":"1","order":"561",},
{"lineNum":"  158","line":"        let rv = unsafe {"},
{"lineNum":"  159","line":"            let ciphers_c = CString::from_vec_unchecked(ciphers.bytes().collect());","class":"lineCov","hits":"1","order":"563",},
{"lineNum":"  160","line":"            ffi::tls_config_set_ciphers(self.cfg, ciphers_c.as_ptr())","class":"lineCov","hits":"1","order":"565",},
{"lineNum":"  161","line":"        };","class":"lineCov","hits":"1","order":"567",},
{"lineNum":"  162","line":"        if rv == 0 {","class":"lineCov","hits":"1","order":"569",},
{"lineNum":"  163","line":"            Ok(())"},
{"lineNum":"  164","line":"        } else {"},
{"lineNum":"  165","line":"            return Err(TlsError::new(format!(\"Invalid ciphers: {}\", ciphers)));","class":"lineNoCov","hits":"0",},
{"lineNum":"  166","line":"        }"},
{"lineNum":"  167","line":"    }","class":"lineCov","hits":"1","order":"573",},
{"lineNum":"  168","line":"}"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"impl Drop for TlsConfig {"},
{"lineNum":"  171","line":"    fn drop(&mut self) {","class":"lineCov","hits":"1","order":"262",},
{"lineNum":"  172","line":"        unsafe {"},
{"lineNum":"  173","line":"            ffi::tls_config_free(self.cfg);","class":"lineCov","hits":"1","order":"263",},
{"lineNum":"  174","line":"        }"},
{"lineNum":"  175","line":"    }","class":"lineCov","hits":"1","order":"299",},
{"lineNum":"  176","line":"}"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"/// A structure that represents all TLS context"},
{"lineNum":"  179","line":"///"},
{"lineNum":"  180","line":"/// This can be a client connection, a server, or a connection accepted by the server"},
{"lineNum":"  181","line":"pub struct TlsContext {"},
{"lineNum":"  182","line":"    ptr: ffi::Tls,"},
{"lineNum":"  183","line":"    cfg: Option<TlsConfig>,"},
{"lineNum":"  184","line":"}"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"impl TlsContext {"},
{"lineNum":"  187","line":"    /// Create a new client context"},
{"lineNum":"  188","line":"    pub fn new_client() -> TlsResult<TlsContext> {","class":"lineCov","hits":"1","order":"80",},
{"lineNum":"  189","line":"        let p = unsafe { ffi::tls_client() };","class":"lineCov","hits":"1","order":"81",},
{"lineNum":"  190","line":"        if p == ptr::null_mut() {","class":"lineCov","hits":"1","order":"114",},
{"lineNum":"  191","line":"            Err(TlsError::new(\"Unable to create TLS client\"))","class":"lineNoCov","hits":"0",},
{"lineNum":"  192","line":"        } else {"},
{"lineNum":"  193","line":"            Ok(TlsContext {"},
{"lineNum":"  194","line":"                ptr: p,","class":"lineCov","hits":"1","order":"115",},
{"lineNum":"  195","line":"                cfg: None,"},
{"lineNum":"  196","line":"            })"},
{"lineNum":"  197","line":"        }"},
{"lineNum":"  198","line":"    }","class":"lineCov","hits":"1","order":"116",},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"    fn error(&self) -> String {","class":"lineCov","hits":"1","order":"474",},
{"lineNum":"  201","line":"        unsafe { from_cstr(ffi::tls_error(self.ptr)) }","class":"lineCov","hits":"1","order":"475",},
{"lineNum":"  202","line":"    }","class":"lineCov","hits":"1","order":"476",},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"    fn rv_to_result(&self, rv: i64) -> TlsResult<()> {","class":"lineCov","hits":"1","order":"477",},
{"lineNum":"  205","line":"        if rv == 0 {","class":"lineCov","hits":"1","order":"478",},
{"lineNum":"  206","line":"            Ok(())"},
{"lineNum":"  207","line":"        } else {"},
{"lineNum":"  208","line":"            Err(TlsError {"},
{"lineNum":"  209","line":"                msg: self.error(),","class":"lineCov","hits":"1","order":"479",},
{"lineNum":"  210","line":"                code: rv,","class":"lineCov","hits":"1","order":"480",},
{"lineNum":"  211","line":"            })"},
{"lineNum":"  212","line":"        }"},
{"lineNum":"  213","line":"    }","class":"lineCov","hits":"1","order":"481",},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"    /// If port is empty, the port value is assumed to be part of the hostname string as host:port."},
{"lineNum":"  216","line":"    /// If servername is not empty it is used instead of the hostname for verification."},
{"lineNum":"  217","line":"    pub fn connect_servername(&mut self,"},
{"lineNum":"  218","line":"                              hostname: &str,"},
{"lineNum":"  219","line":"                              port: &str,"},
{"lineNum":"  220","line":"                              servername: &str)"},
{"lineNum":"  221","line":"                              -> TlsResult<()> {","class":"lineCov","hits":"1","order":"482",},
{"lineNum":"  222","line":"        let rv = unsafe {"},
{"lineNum":"  223","line":"            let hostname_c = CString::from_vec_unchecked(hostname.bytes().collect()).as_ptr();","class":"lineCov","hits":"1","order":"483",},
{"lineNum":"  224","line":"            // Both port and servername can be NULL"},
{"lineNum":"  225","line":"            let port_c = str_c_ptr(port);","class":"lineCov","hits":"1","order":"484",},
{"lineNum":"  226","line":"            let servername_c = str_c_ptr(servername);","class":"lineCov","hits":"1","order":"485",},
{"lineNum":"  227","line":"            ffi::tls_connect_servername(self.ptr, hostname_c, port_c, servername_c)","class":"lineCov","hits":"1","order":"487",},
{"lineNum":"  228","line":"        };"},
{"lineNum":"  229","line":"        self.rv_to_result(rv as i64)","class":"lineCov","hits":"1","order":"490",},
{"lineNum":"  230","line":"    }","class":"lineCov","hits":"1","order":"491",},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"    #[cfg(unix)]"},
{"lineNum":"  233","line":"    /// Establish a TLS connection over the given socket"},
{"lineNum":"  234","line":"    pub fn connect_socket(&mut self, fd: RawFd, servername: &str) -> TlsResult<()> {","class":"lineCov","hits":"1","order":"495",},
{"lineNum":"  235","line":"        let rv = unsafe {"},
{"lineNum":"  236","line":"            let servername_c = str_c_ptr(servername);","class":"lineCov","hits":"1","order":"497",},
{"lineNum":"  237","line":"            ffi::tls_connect_socket(self.ptr, fd, servername_c)","class":"lineCov","hits":"1","order":"499",},
{"lineNum":"  238","line":"        };"},
{"lineNum":"  239","line":"        self.rv_to_result(rv as i64)","class":"lineCov","hits":"1","order":"501",},
{"lineNum":"  240","line":"    }","class":"lineCov","hits":"1","order":"502",},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"    #[cfg(windows)]"},
{"lineNum":"  243","line":"    /// Establish a TLS connection over the given socket"},
{"lineNum":"  244","line":"    pub fn connect_socket(&mut self, sock: RawSocket, servername: &str) -> TlsResult<()> {"},
{"lineNum":"  245","line":"        let rv = unsafe {"},
{"lineNum":"  246","line":"            let servername_c = str_c_ptr(servername);"},
{"lineNum":"  247","line":"            // This cast is not exactly safe"},
{"lineNum":"  248","line":"            // http://stackoverflow.com/questions/1953639/"},
{"lineNum":"  249","line":"            ffi::tls_connect_socket(self.ptr, sock as i32, servername_c)"},
{"lineNum":"  250","line":"        };"},
{"lineNum":"  251","line":"        self.rv_to_result(rv as i64)"},
{"lineNum":"  252","line":"    }"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"    pub fn conn_version(&self) -> String {","class":"lineCov","hits":"1","order":"117",},
{"lineNum":"  255","line":"        unsafe { from_cstr(ffi::tls_conn_version(self.ptr)) }","class":"lineCov","hits":"1","order":"118",},
{"lineNum":"  256","line":"    }","class":"lineCov","hits":"1","order":"127",},
{"lineNum":"  257","line":"    pub fn conn_cipher(&self) -> String {","class":"lineCov","hits":"1","order":"128",},
{"lineNum":"  258","line":"        unsafe { from_cstr(ffi::tls_conn_cipher(self.ptr)) }","class":"lineCov","hits":"1","order":"129",},
{"lineNum":"  259","line":"    }","class":"lineCov","hits":"1","order":"134",},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"    /// Apply configuration settings to the context, consuming the config struct"},
{"lineNum":"  262","line":"    ///"},
{"lineNum":"  263","line":"    /// This should be called BEFORE trying to establish/accept"},
{"lineNum":"  264","line":"    /// a connection"},
{"lineNum":"  265","line":"    pub fn configure(&mut self, cfg: TlsConfig) -> TlsResult<()> {","class":"lineCov","hits":"1","order":"506",},
{"lineNum":"  266","line":"        let rv = unsafe { ffi::tls_configure(self.ptr, cfg.cfg) };","class":"lineCov","hits":"1","order":"507",},
{"lineNum":"  267","line":"        self.cfg = Some(cfg);","class":"lineCov","hits":"1","order":"508",},
{"lineNum":"  268","line":"        self.rv_to_result(rv as i64)","class":"lineCov","hits":"1","order":"509",},
{"lineNum":"  269","line":"    }","class":"lineCov","hits":"1","order":"510",},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"    pub fn peer_cert_notbefore(&self) -> TlsResult<time_t> {","class":"lineCov","hits":"1","order":"136",},
{"lineNum":"  272","line":"        let rv = unsafe { ffi::tls_peer_cert_notbefore(self.ptr) };","class":"lineCov","hits":"1","order":"137",},
{"lineNum":"  273","line":"        if rv == -1 {","class":"lineCov","hits":"1","order":"142",},
{"lineNum":"  274","line":"            Err(TlsError::new(\"Unable to get certificate information\"))","class":"lineCov","hits":"1","order":"143",},
{"lineNum":"  275","line":"        } else {"},
{"lineNum":"  276","line":"            Ok(rv)","class":"lineCov","hits":"1","order":"511",},
{"lineNum":"  277","line":"        }"},
{"lineNum":"  278","line":"    }","class":"lineCov","hits":"1","order":"148",},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"    pub fn peer_cert_notafter(&self) -> TlsResult<time_t> {","class":"lineCov","hits":"1","order":"150",},
{"lineNum":"  281","line":"        let rv = unsafe { ffi::tls_peer_cert_notafter(self.ptr) };","class":"lineCov","hits":"1","order":"151",},
{"lineNum":"  282","line":"        if rv == -1 {","class":"lineCov","hits":"1","order":"156",},
{"lineNum":"  283","line":"            Err(TlsError::new(\"Unable to get certificate information\"))","class":"lineCov","hits":"1","order":"157",},
{"lineNum":"  284","line":"        } else {"},
{"lineNum":"  285","line":"            Ok(rv)","class":"lineCov","hits":"1","order":"513",},
{"lineNum":"  286","line":"        }"},
{"lineNum":"  287","line":"    }","class":"lineCov","hits":"1","order":"158",},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"    pub fn peer_cert_hash(&self) -> String {","class":"lineCov","hits":"1","order":"173",},
{"lineNum":"  290","line":"        unsafe { from_cstr(ffi::tls_peer_cert_hash(self.ptr)) }","class":"lineCov","hits":"1","order":"174",},
{"lineNum":"  291","line":"    }","class":"lineCov","hits":"1","order":"179",},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"    pub fn peer_cert_issuer(&self) -> String {","class":"lineCov","hits":"1","order":"159",},
{"lineNum":"  294","line":"        unsafe { from_cstr(ffi::tls_peer_cert_issuer(self.ptr)) }","class":"lineCov","hits":"1","order":"160",},
{"lineNum":"  295","line":"    }","class":"lineCov","hits":"1","order":"165",},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"    pub fn peer_cert_subject(&self) -> String {","class":"lineCov","hits":"1","order":"166",},
{"lineNum":"  298","line":"        unsafe { from_cstr(ffi::tls_peer_cert_subject(self.ptr)) }","class":"lineCov","hits":"1","order":"167",},
{"lineNum":"  299","line":"    }","class":"lineCov","hits":"1","order":"172",},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"    pub fn peer_cert_contains_name(&self, name: &str) -> bool {","class":"lineCov","hits":"1","order":"180",},
{"lineNum":"  302","line":"        let rv = unsafe {"},
{"lineNum":"  303","line":"            let name_c = CString::from_vec_unchecked(name.bytes().collect());","class":"lineCov","hits":"1","order":"181",},
{"lineNum":"  304","line":"            ffi::tls_peer_cert_contains_name(self.ptr, name_c.as_ptr())","class":"lineCov","hits":"1","order":"182",},
{"lineNum":"  305","line":"        };","class":"lineCov","hits":"1","order":"187",},
{"lineNum":"  306","line":"        (rv == 1)","class":"lineCov","hits":"1","order":"188",},
{"lineNum":"  307","line":"    }","class":"lineCov","hits":"1","order":"189",},
{"lineNum":"  308","line":""},
{"lineNum":"  309","line":"    pub fn peer_cert_provided(&self) -> bool {","class":"lineCov","hits":"1","order":"190",},
{"lineNum":"  310","line":"        let rv = unsafe { ffi::tls_peer_cert_provided(self.ptr) };","class":"lineCov","hits":"1","order":"191",},
{"lineNum":"  311","line":"        (rv == 1)","class":"lineCov","hits":"1","order":"195",},
{"lineNum":"  312","line":"    }","class":"lineCov","hits":"1","order":"196",},
{"lineNum":"  313","line":""},
{"lineNum":"  314","line":"    fn rv_to_result_io(&self, rv: i64) -> TlsResult<usize> {","class":"lineCov","hits":"1","order":"528",},
{"lineNum":"  315","line":"        match rv {","class":"lineCov","hits":"1","order":"530",},
{"lineNum":"  316","line":"            ffi::WANT_POLLIN => {"},
{"lineNum":"  317","line":"                Err(TlsError {","class":"lineCov","hits":"1","order":"533",},
{"lineNum":"  318","line":"                    msg: String::new(),","class":"lineCov","hits":"1","order":"535",},
{"lineNum":"  319","line":"                    code: rv,","class":"lineCov","hits":"1","order":"537",},
{"lineNum":"  320","line":"                })"},
{"lineNum":"  321","line":"            }"},
{"lineNum":"  322","line":"            ffi::WANT_POLLOUT => {"},
{"lineNum":"  323","line":"                Err(TlsError {","class":"lineNoCov","hits":"0",},
{"lineNum":"  324","line":"                    msg: String::new(),","class":"lineNoCov","hits":"0",},
{"lineNum":"  325","line":"                    code: rv,","class":"lineNoCov","hits":"0",},
{"lineNum":"  326","line":"                })"},
{"lineNum":"  327","line":"            }"},
{"lineNum":"  328","line":"            rv if rv < 0 => {","class":"lineCov","hits":"1","order":"542",},
{"lineNum":"  329","line":"                Err(TlsError {","class":"lineCov","hits":"1","order":"543",},
{"lineNum":"  330","line":"                    msg: self.error(),","class":"lineCov","hits":"1","order":"544",},
{"lineNum":"  331","line":"                    code: -1,","class":"lineCov","hits":"1","order":"545",},
{"lineNum":"  332","line":"                })"},
{"lineNum":"  333","line":"            }"},
{"lineNum":"  334","line":"            rv => Ok(rv as usize),","class":"lineCov","hits":"1","order":"546",},
{"lineNum":"  335","line":"        }"},
{"lineNum":"  336","line":"    }","class":"lineCov","hits":"1","order":"547",},
{"lineNum":"  337","line":""},
{"lineNum":"  338","line":"    /// Complete the TLS handshake"},
{"lineNum":"  339","line":"    ///"},
{"lineNum":"  340","line":"    /// This function will be called when needed by `read()` or `write()`, but"},
{"lineNum":"  341","line":"    /// can be called to complete the handshake."},
{"lineNum":"  342","line":"    pub fn handshake(&mut self) -> TlsResult<()> {","class":"lineCov","hits":"1","order":"548",},
{"lineNum":"  343","line":"        let rv = unsafe { ffi::tls_handshake(self.ptr) };","class":"lineCov","hits":"1","order":"549",},
{"lineNum":"  344","line":"        self.rv_to_result_io(rv as i64).map(|_| ())","class":"lineCov","hits":"1","order":"550",},
{"lineNum":"  345","line":"    }","class":"lineCov","hits":"1","order":"551",},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"    pub fn close(&mut self) -> TlsResult<()> {","class":"lineCov","hits":"1","order":"552",},
{"lineNum":"  348","line":"        let rv = unsafe { ffi::tls_close(self.ptr) };","class":"lineCov","hits":"1","order":"553",},
{"lineNum":"  349","line":"        self.rv_to_result_io(rv as i64).map(|_| ())","class":"lineCov","hits":"1","order":"554",},
{"lineNum":"  350","line":"    }","class":"lineCov","hits":"1","order":"555",},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"    pub fn read(&mut self, buf: &mut [u8]) -> TlsResult<usize> {","class":"lineCov","hits":"1","order":"556",},
{"lineNum":"  353","line":"        let buflen = buf.len() as size_t;","class":"lineCov","hits":"1","order":"557",},
{"lineNum":"  354","line":"        let bptr = buf.as_mut_ptr() as *mut c_void;","class":"lineCov","hits":"1","order":"558",},
{"lineNum":"  355","line":"        let rv = unsafe { ffi::tls_read(self.ptr, bptr, buflen) };","class":"lineCov","hits":"1","order":"559",},
{"lineNum":"  356","line":"        self.rv_to_result_io(rv as i64)","class":"lineCov","hits":"1","order":"560",},
{"lineNum":"  357","line":"    }","class":"lineCov","hits":"1","order":"562",},
{"lineNum":"  358","line":""},
{"lineNum":"  359","line":"    pub fn write(&mut self, buf: &[u8]) -> TlsResult<usize> {","class":"lineCov","hits":"1","order":"564",},
{"lineNum":"  360","line":"        let buflen = buf.len() as size_t;","class":"lineCov","hits":"1","order":"566",},
{"lineNum":"  361","line":"        let bptr = buf.as_ptr() as *const c_void;","class":"lineCov","hits":"1","order":"568",},
{"lineNum":"  362","line":"        let rv = unsafe { ffi::tls_write(self.ptr, bptr, buflen) };","class":"lineCov","hits":"1","order":"570",},
{"lineNum":"  363","line":"        self.rv_to_result_io(rv as i64)","class":"lineCov","hits":"1","order":"571",},
{"lineNum":"  364","line":"    }","class":"lineCov","hits":"1","order":"572",},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"    /// Create new server context"},
{"lineNum":"  367","line":"    pub fn new_server() -> TlsResult<TlsContext> {","class":"lineCov","hits":"1","order":"955",},
{"lineNum":"  368","line":"        let p = unsafe { ffi::tls_server() };","class":"lineCov","hits":"1","order":"956",},
{"lineNum":"  369","line":"        if p == ptr::null_mut() {","class":"lineCov","hits":"1","order":"957",},
{"lineNum":"  370","line":"            Err(TlsError::new(\"Unable to create TLS server\"))","class":"lineNoCov","hits":"0",},
{"lineNum":"  371","line":"        } else {"},
{"lineNum":"  372","line":"            Ok(TlsContext {"},
{"lineNum":"  373","line":"                ptr: p,","class":"lineCov","hits":"1","order":"958",},
{"lineNum":"  374","line":"                cfg: None,"},
{"lineNum":"  375","line":"            })"},
{"lineNum":"  376","line":"        }"},
{"lineNum":"  377","line":"    }","class":"lineCov","hits":"1","order":"959",},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"    #[cfg(unix)]"},
{"lineNum":"  380","line":"    /// Accept a new TLS connection over an existing socket"},
{"lineNum":"  381","line":"    pub fn accept_socket(&mut self, fd: RawFd) -> TlsResult<TlsContext> {","class":"lineCov","hits":"1","order":"960",},
{"lineNum":"  382","line":"        let mut cctx: ffi::Tls = ptr::null_mut();;","class":"lineCov","hits":"1","order":"961",},
{"lineNum":"  383","line":"        let rv = unsafe { ffi::tls_accept_socket(self.ptr, &mut cctx, fd) };","class":"lineCov","hits":"1","order":"962",},
{"lineNum":"  384","line":"        self.rv_to_result(rv as i64)","class":"lineCov","hits":"1","order":"963",},
{"lineNum":"  385","line":"            .map(|_| {","class":"lineCov","hits":"1","order":"964",},
{"lineNum":"  386","line":"                TlsContext {"},
{"lineNum":"  387","line":"                    ptr: cctx,","class":"lineCov","hits":"1","order":"965",},
{"lineNum":"  388","line":"                    cfg: None,"},
{"lineNum":"  389","line":"                }"},
{"lineNum":"  390","line":"            })","class":"lineCov","hits":"1","order":"966",},
{"lineNum":"  391","line":"    }","class":"lineCov","hits":"1","order":"967",},
{"lineNum":"  392","line":""},
{"lineNum":"  393","line":"    #[cfg(windows)]"},
{"lineNum":"  394","line":"    /// Accept a new TLS connection over an existing socket"},
{"lineNum":"  395","line":"    pub fn accept_socket(&mut self, sock: RawSocket) -> TlsResult<TlsContext> {"},
{"lineNum":"  396","line":"        let mut cctx: ffi::Tls = ptr::null_mut();;"},
{"lineNum":"  397","line":"        // This cast is not exactly safe"},
{"lineNum":"  398","line":"        // http://stackoverflow.com/questions/1953639/"},
{"lineNum":"  399","line":"        let rv = unsafe {"},
{"lineNum":"  400","line":"            ffi::tls_accept_socket(self.ptr, &mut cctx, sock as i32)"},
{"lineNum":"  401","line":"        };"},
{"lineNum":"  402","line":"        self.rv_to_result(rv as i64)"},
{"lineNum":"  403","line":"            .map(|_| {"},
{"lineNum":"  404","line":"                TlsContext {"},
{"lineNum":"  405","line":"                    ptr: cctx,"},
{"lineNum":"  406","line":"                    cfg: None,"},
{"lineNum":"  407","line":"                }"},
{"lineNum":"  408","line":"            })"},
{"lineNum":"  409","line":"    }"},
{"lineNum":"  410","line":"}"},
{"lineNum":"  411","line":""},
{"lineNum":"  412","line":"impl Drop for TlsContext {"},
{"lineNum":"  413","line":"    fn drop(&mut self) {","class":"lineCov","hits":"1","order":"198",},
{"lineNum":"  414","line":"        unsafe {"},
{"lineNum":"  415","line":"            ffi::tls_free(self.ptr);","class":"lineCov","hits":"1","order":"199",},
{"lineNum":"  416","line":"        }"},
{"lineNum":"  417","line":"    }","class":"lineCov","hits":"1","order":"205",},
{"lineNum":"  418","line":"}"},
{"lineNum":"  419","line":""},
{"lineNum":"  420","line":"/// Initialize libtls - make sure to call this before using the API"},
{"lineNum":"  421","line":"/// Returns false if libtls failed to initialise."},
{"lineNum":"  422","line":"pub fn init() -> bool {","class":"lineCov","hits":"1","order":"5",},
{"lineNum":"  423","line":"    static mut RET: i32 = -1;"},
{"lineNum":"  424","line":"    static ONCE: Once = ONCE_INIT;"},
{"lineNum":"  425","line":"    ONCE.call_once(|| {","class":"lineCov","hits":"1","order":"7",},
{"lineNum":"  426","line":"        other_init();","class":"lineCov","hits":"1","order":"8",},
{"lineNum":"  427","line":"        unsafe { RET = ffi::tls_init() };","class":"lineCov","hits":"1","order":"10",},
{"lineNum":"  428","line":"    });","class":"lineCov","hits":"1","order":"75",},
{"lineNum":"  429","line":"    unsafe { (RET == 0) }","class":"lineCov","hits":"1","order":"76",},
{"lineNum":"  430","line":"}","class":"lineCov","hits":"1","order":"77",},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "tls-c00d5486bf2a262a", "date" : "2016-01-13 13:40:10", "instrumented" : 219, "covered" : 196,};
var merged_data = [];
