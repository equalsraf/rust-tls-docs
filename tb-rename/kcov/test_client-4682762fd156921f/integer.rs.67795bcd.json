var data = {lines:[
{"lineNum":"    1","line":"// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT"},
{"lineNum":"    2","line":"// file at the top-level directory of this distribution and at"},
{"lineNum":"    3","line":"// http://rust-lang.org/COPYRIGHT."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or"},
{"lineNum":"    6","line":"// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license"},
{"lineNum":"    7","line":"// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your"},
{"lineNum":"    8","line":"// option. This file may not be copied, modified, or distributed"},
{"lineNum":"    9","line":"// except according to those terms."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"//! Integer trait and functions."},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"use {Num, Signed};"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"pub trait Integer"},
{"lineNum":"   16","line":"    : Sized"},
{"lineNum":"   17","line":"    + Num"},
{"lineNum":"   18","line":"    + PartialOrd + Ord + Eq"},
{"lineNum":"   19","line":"{"},
{"lineNum":"   20","line":"    /// Floored integer division."},
{"lineNum":"   21","line":"    ///"},
{"lineNum":"   22","line":"    /// # Examples"},
{"lineNum":"   23","line":"    ///"},
{"lineNum":"   24","line":"    /// ~~~"},
{"lineNum":"   25","line":"    /// # use num::Integer;"},
{"lineNum":"   26","line":"    /// assert!(( 8).div_floor(& 3) ==  2);"},
{"lineNum":"   27","line":"    /// assert!(( 8).div_floor(&-3) == -3);"},
{"lineNum":"   28","line":"    /// assert!((-8).div_floor(& 3) == -3);"},
{"lineNum":"   29","line":"    /// assert!((-8).div_floor(&-3) ==  2);"},
{"lineNum":"   30","line":"    ///"},
{"lineNum":"   31","line":"    /// assert!(( 1).div_floor(& 2) ==  0);"},
{"lineNum":"   32","line":"    /// assert!(( 1).div_floor(&-2) == -1);"},
{"lineNum":"   33","line":"    /// assert!((-1).div_floor(& 2) == -1);"},
{"lineNum":"   34","line":"    /// assert!((-1).div_floor(&-2) ==  0);"},
{"lineNum":"   35","line":"    /// ~~~"},
{"lineNum":"   36","line":"    fn div_floor(&self, other: &Self) -> Self;"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"    /// Floored integer modulo, satisfying:"},
{"lineNum":"   39","line":"    ///"},
{"lineNum":"   40","line":"    /// ~~~"},
{"lineNum":"   41","line":"    /// # use num::Integer;"},
{"lineNum":"   42","line":"    /// # let n = 1; let d = 1;"},
{"lineNum":"   43","line":"    /// assert!(n.div_floor(&d) * d + n.mod_floor(&d) == n)"},
{"lineNum":"   44","line":"    /// ~~~"},
{"lineNum":"   45","line":"    ///"},
{"lineNum":"   46","line":"    /// # Examples"},
{"lineNum":"   47","line":"    ///"},
{"lineNum":"   48","line":"    /// ~~~"},
{"lineNum":"   49","line":"    /// # use num::Integer;"},
{"lineNum":"   50","line":"    /// assert!(( 8).mod_floor(& 3) ==  2);"},
{"lineNum":"   51","line":"    /// assert!(( 8).mod_floor(&-3) == -1);"},
{"lineNum":"   52","line":"    /// assert!((-8).mod_floor(& 3) ==  1);"},
{"lineNum":"   53","line":"    /// assert!((-8).mod_floor(&-3) == -2);"},
{"lineNum":"   54","line":"    ///"},
{"lineNum":"   55","line":"    /// assert!(( 1).mod_floor(& 2) ==  1);"},
{"lineNum":"   56","line":"    /// assert!(( 1).mod_floor(&-2) == -1);"},
{"lineNum":"   57","line":"    /// assert!((-1).mod_floor(& 2) ==  1);"},
{"lineNum":"   58","line":"    /// assert!((-1).mod_floor(&-2) == -1);"},
{"lineNum":"   59","line":"    /// ~~~"},
{"lineNum":"   60","line":"    fn mod_floor(&self, other: &Self) -> Self;"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"    /// Greatest Common Divisor (GCD)."},
{"lineNum":"   63","line":"    ///"},
{"lineNum":"   64","line":"    /// # Examples"},
{"lineNum":"   65","line":"    ///"},
{"lineNum":"   66","line":"    /// ~~~"},
{"lineNum":"   67","line":"    /// # use num::Integer;"},
{"lineNum":"   68","line":"    /// assert_eq!(6.gcd(&8), 2);"},
{"lineNum":"   69","line":"    /// assert_eq!(7.gcd(&3), 1);"},
{"lineNum":"   70","line":"    /// ~~~"},
{"lineNum":"   71","line":"    fn gcd(&self, other: &Self) -> Self;"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"    /// Lowest Common Multiple (LCM)."},
{"lineNum":"   74","line":"    ///"},
{"lineNum":"   75","line":"    /// # Examples"},
{"lineNum":"   76","line":"    ///"},
{"lineNum":"   77","line":"    /// ~~~"},
{"lineNum":"   78","line":"    /// # use num::Integer;"},
{"lineNum":"   79","line":"    /// assert_eq!(7.lcm(&3), 21);"},
{"lineNum":"   80","line":"    /// assert_eq!(2.lcm(&4), 4);"},
{"lineNum":"   81","line":"    /// ~~~"},
{"lineNum":"   82","line":"    fn lcm(&self, other: &Self) -> Self;"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"    /// Deprecated, use `is_multiple_of` instead."},
{"lineNum":"   85","line":"    fn divides(&self, other: &Self) -> bool;"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"    /// Returns `true` if `other` is a multiple of `self`."},
{"lineNum":"   88","line":"    ///"},
{"lineNum":"   89","line":"    /// # Examples"},
{"lineNum":"   90","line":"    ///"},
{"lineNum":"   91","line":"    /// ~~~"},
{"lineNum":"   92","line":"    /// # use num::Integer;"},
{"lineNum":"   93","line":"    /// assert_eq!(9.is_multiple_of(&3), true);"},
{"lineNum":"   94","line":"    /// assert_eq!(3.is_multiple_of(&9), false);"},
{"lineNum":"   95","line":"    /// ~~~"},
{"lineNum":"   96","line":"    fn is_multiple_of(&self, other: &Self) -> bool;"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"    /// Returns `true` if the number is even."},
{"lineNum":"   99","line":"    ///"},
{"lineNum":"  100","line":"    /// # Examples"},
{"lineNum":"  101","line":"    ///"},
{"lineNum":"  102","line":"    /// ~~~"},
{"lineNum":"  103","line":"    /// # use num::Integer;"},
{"lineNum":"  104","line":"    /// assert_eq!(3.is_even(), false);"},
{"lineNum":"  105","line":"    /// assert_eq!(4.is_even(), true);"},
{"lineNum":"  106","line":"    /// ~~~"},
{"lineNum":"  107","line":"    fn is_even(&self) -> bool;"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"    /// Returns `true` if the number is odd."},
{"lineNum":"  110","line":"    ///"},
{"lineNum":"  111","line":"    /// # Examples"},
{"lineNum":"  112","line":"    ///"},
{"lineNum":"  113","line":"    /// ~~~"},
{"lineNum":"  114","line":"    /// # use num::Integer;"},
{"lineNum":"  115","line":"    /// assert_eq!(3.is_odd(), true);"},
{"lineNum":"  116","line":"    /// assert_eq!(4.is_odd(), false);"},
{"lineNum":"  117","line":"    /// ~~~"},
{"lineNum":"  118","line":"    fn is_odd(&self) -> bool;"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"    /// Simultaneous truncated integer division and modulus."},
{"lineNum":"  121","line":"    /// Returns `(quotient, remainder)`."},
{"lineNum":"  122","line":"    ///"},
{"lineNum":"  123","line":"    /// # Examples"},
{"lineNum":"  124","line":"    ///"},
{"lineNum":"  125","line":"    /// ~~~"},
{"lineNum":"  126","line":"    /// # use num::Integer;"},
{"lineNum":"  127","line":"    /// assert_eq!(( 8).div_rem( &3), ( 2,  2));"},
{"lineNum":"  128","line":"    /// assert_eq!(( 8).div_rem(&-3), (-2,  2));"},
{"lineNum":"  129","line":"    /// assert_eq!((-8).div_rem( &3), (-2, -2));"},
{"lineNum":"  130","line":"    /// assert_eq!((-8).div_rem(&-3), ( 2, -2));"},
{"lineNum":"  131","line":"    ///"},
{"lineNum":"  132","line":"    /// assert_eq!(( 1).div_rem( &2), ( 0,  1));"},
{"lineNum":"  133","line":"    /// assert_eq!(( 1).div_rem(&-2), ( 0,  1));"},
{"lineNum":"  134","line":"    /// assert_eq!((-1).div_rem( &2), ( 0, -1));"},
{"lineNum":"  135","line":"    /// assert_eq!((-1).div_rem(&-2), ( 0, -1));"},
{"lineNum":"  136","line":"    /// ~~~"},
{"lineNum":"  137","line":"    #[inline]"},
{"lineNum":"  138","line":"    fn div_rem(&self, other: &Self) -> (Self, Self);"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"    /// Simultaneous floored integer division and modulus."},
{"lineNum":"  141","line":"    /// Returns `(quotient, remainder)`."},
{"lineNum":"  142","line":"    ///"},
{"lineNum":"  143","line":"    /// # Examples"},
{"lineNum":"  144","line":"    ///"},
{"lineNum":"  145","line":"    /// ~~~"},
{"lineNum":"  146","line":"    /// # use num::Integer;"},
{"lineNum":"  147","line":"    /// assert_eq!(( 8).div_mod_floor( &3), ( 2,  2));"},
{"lineNum":"  148","line":"    /// assert_eq!(( 8).div_mod_floor(&-3), (-3, -1));"},
{"lineNum":"  149","line":"    /// assert_eq!((-8).div_mod_floor( &3), (-3,  1));"},
{"lineNum":"  150","line":"    /// assert_eq!((-8).div_mod_floor(&-3), ( 2, -2));"},
{"lineNum":"  151","line":"    ///"},
{"lineNum":"  152","line":"    /// assert_eq!(( 1).div_mod_floor( &2), ( 0,  1));"},
{"lineNum":"  153","line":"    /// assert_eq!(( 1).div_mod_floor(&-2), (-1, -1));"},
{"lineNum":"  154","line":"    /// assert_eq!((-1).div_mod_floor( &2), (-1,  1));"},
{"lineNum":"  155","line":"    /// assert_eq!((-1).div_mod_floor(&-2), ( 0, -1));"},
{"lineNum":"  156","line":"    /// ~~~"},
{"lineNum":"  157","line":"    fn div_mod_floor(&self, other: &Self) -> (Self, Self) {"},
{"lineNum":"  158","line":"        (self.div_floor(other), self.mod_floor(other))"},
{"lineNum":"  159","line":"    }"},
{"lineNum":"  160","line":"}"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"/// Simultaneous integer division and modulus"},
{"lineNum":"  163","line":"#[inline] pub fn div_rem<T: Integer>(x: T, y: T) -> (T, T) { x.div_rem(&y) }","class":"lineCov","hits":"2","order":"1089","possible_hits":"2",},
{"lineNum":"  164","line":"/// Floored integer division"},
{"lineNum":"  165","line":"#[inline] pub fn div_floor<T: Integer>(x: T, y: T) -> T { x.div_floor(&y) }"},
{"lineNum":"  166","line":"/// Floored integer modulus"},
{"lineNum":"  167","line":"#[inline] pub fn mod_floor<T: Integer>(x: T, y: T) -> T { x.mod_floor(&y) }"},
{"lineNum":"  168","line":"/// Simultaneous floored integer division and modulus"},
{"lineNum":"  169","line":"#[inline] pub fn div_mod_floor<T: Integer>(x: T, y: T) -> (T, T) { x.div_mod_floor(&y) }","class":"lineCov","hits":"4","order":"1061","possible_hits":"4",},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"/// Calculates the Greatest Common Divisor (GCD) of the number and `other`. The"},
{"lineNum":"  172","line":"/// result is always positive."},
{"lineNum":"  173","line":"#[inline(always)] pub fn gcd<T: Integer>(x: T, y: T) -> T { x.gcd(&y) }"},
{"lineNum":"  174","line":"/// Calculates the Lowest Common Multiple (LCM) of the number and `other`."},
{"lineNum":"  175","line":"#[inline(always)] pub fn lcm<T: Integer>(x: T, y: T) -> T { x.lcm(&y) }"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"macro_rules! impl_integer_for_isize {"},
{"lineNum":"  178","line":"    ($T:ty, $test_mod:ident) => ("},
{"lineNum":"  179","line":"        impl Integer for $T {"},
{"lineNum":"  180","line":"            /// Floored integer division"},
{"lineNum":"  181","line":"            #[inline]"},
{"lineNum":"  182","line":"            fn div_floor(&self, other: &$T) -> $T {"},
{"lineNum":"  183","line":"                // Algorithm from [Daan Leijen. _Division and Modulus for Computer Scientists_,"},
{"lineNum":"  184","line":"                // December 2001](http://research.microsoft.com/pubs/151917/divmodnote-letter.pdf)"},
{"lineNum":"  185","line":"                match self.div_rem(other) {"},
{"lineNum":"  186","line":"                    (d, r) if (r > 0 && *other < 0)"},
{"lineNum":"  187","line":"                           || (r < 0 && *other > 0) => d - 1,"},
{"lineNum":"  188","line":"                    (d, _)                          => d,"},
{"lineNum":"  189","line":"                }"},
{"lineNum":"  190","line":"            }"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"            /// Floored integer modulo"},
{"lineNum":"  193","line":"            #[inline]"},
{"lineNum":"  194","line":"            fn mod_floor(&self, other: &$T) -> $T {"},
{"lineNum":"  195","line":"                // Algorithm from [Daan Leijen. _Division and Modulus for Computer Scientists_,"},
{"lineNum":"  196","line":"                // December 2001](http://research.microsoft.com/pubs/151917/divmodnote-letter.pdf)"},
{"lineNum":"  197","line":"                match *self % *other {"},
{"lineNum":"  198","line":"                    r if (r > 0 && *other < 0)"},
{"lineNum":"  199","line":"                      || (r < 0 && *other > 0) => r + *other,"},
{"lineNum":"  200","line":"                    r                          => r,"},
{"lineNum":"  201","line":"                }"},
{"lineNum":"  202","line":"            }"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"            /// Calculates `div_floor` and `mod_floor` simultaneously"},
{"lineNum":"  205","line":"            #[inline]"},
{"lineNum":"  206","line":"            fn div_mod_floor(&self, other: &$T) -> ($T,$T) {","class":"linePartCov","hits":"4","order":"1062","possible_hits":"5",},
{"lineNum":"  207","line":"                // Algorithm from [Daan Leijen. _Division and Modulus for Computer Scientists_,"},
{"lineNum":"  208","line":"                // December 2001](http://research.microsoft.com/pubs/151917/divmodnote-letter.pdf)"},
{"lineNum":"  209","line":"                match self.div_rem(other) {","class":"lineCov","hits":"4","order":"1063","possible_hits":"4",},
{"lineNum":"  210","line":"                    (d, r) if (r > 0 && *other < 0)","class":"lineCov","hits":"4","order":"1066","possible_hits":"4",},
{"lineNum":"  211","line":"                           || (r < 0 && *other > 0) => (d - 1, r + *other),","class":"linePartCov","hits":"2","order":"1067","possible_hits":"4",},
{"lineNum":"  212","line":"                    (d, r)                          => (d, r),","class":"lineCov","hits":"2","order":"1068","possible_hits":"2",},
{"lineNum":"  213","line":"                }"},
{"lineNum":"  214","line":"            }"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"            /// Calculates the Greatest Common Divisor (GCD) of the number and"},
{"lineNum":"  217","line":"            /// `other`. The result is always positive."},
{"lineNum":"  218","line":"            #[inline]"},
{"lineNum":"  219","line":"            fn gcd(&self, other: &$T) -> $T {"},
{"lineNum":"  220","line":"                // Use Stein\'s algorithm"},
{"lineNum":"  221","line":"                let mut m = *self;"},
{"lineNum":"  222","line":"                let mut n = *other;"},
{"lineNum":"  223","line":"                if m == 0 || n == 0 { return (m | n).abs() }"},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"                // find common factors of 2"},
{"lineNum":"  226","line":"                let shift = (m | n).trailing_zeros();"},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"                // The algorithm needs positive numbers, but the minimum value"},
{"lineNum":"  229","line":"                // can\'t be represented as a positive one."},
{"lineNum":"  230","line":"                // It\'s also a power of two, so the gcd can be"},
{"lineNum":"  231","line":"                // calculated by bitshifting in that case"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"                // Assuming two\'s complement, the number created by the shift"},
{"lineNum":"  234","line":"                // is positive for all numbers except gcd = abs(min value)"},
{"lineNum":"  235","line":"                // The call to .abs() causes a panic in debug mode"},
{"lineNum":"  236","line":"                if m == <$T>::min_value() || n == <$T>::min_value() {"},
{"lineNum":"  237","line":"                    return (1 << shift).abs()"},
{"lineNum":"  238","line":"                }"},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"                // guaranteed to be positive now, rest like unsigned algorithm"},
{"lineNum":"  241","line":"                m = m.abs();"},
{"lineNum":"  242","line":"                n = n.abs();"},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"                // divide n and m by 2 until odd"},
{"lineNum":"  245","line":"                // m inside loop"},
{"lineNum":"  246","line":"                n >>= n.trailing_zeros();"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"                while m != 0 {"},
{"lineNum":"  249","line":"                    m >>= m.trailing_zeros();"},
{"lineNum":"  250","line":"                    if n > m { ::std::mem::swap(&mut n, &mut m) }"},
{"lineNum":"  251","line":"                    m -= n;"},
{"lineNum":"  252","line":"                }"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"                n << shift"},
{"lineNum":"  255","line":"            }"},
{"lineNum":"  256","line":""},
{"lineNum":"  257","line":"            /// Calculates the Lowest Common Multiple (LCM) of the number and"},
{"lineNum":"  258","line":"            /// `other`."},
{"lineNum":"  259","line":"            #[inline]"},
{"lineNum":"  260","line":"            fn lcm(&self, other: &$T) -> $T {"},
{"lineNum":"  261","line":"                // should not have to recalculate abs"},
{"lineNum":"  262","line":"                ((*self * *other) / self.gcd(other)).abs()"},
{"lineNum":"  263","line":"            }"},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"            /// Deprecated, use `is_multiple_of` instead."},
{"lineNum":"  266","line":"            #[inline]"},
{"lineNum":"  267","line":"            fn divides(&self, other: &$T) -> bool { return self.is_multiple_of(other); }"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"            /// Returns `true` if the number is a multiple of `other`."},
{"lineNum":"  270","line":"            #[inline]"},
{"lineNum":"  271","line":"            fn is_multiple_of(&self, other: &$T) -> bool { *self % *other == 0 }"},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"            /// Returns `true` if the number is divisible by `2`"},
{"lineNum":"  274","line":"            #[inline]"},
{"lineNum":"  275","line":"            fn is_even(&self) -> bool { (*self) & 1 == 0 }"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"            /// Returns `true` if the number is not divisible by `2`"},
{"lineNum":"  278","line":"            #[inline]"},
{"lineNum":"  279","line":"            fn is_odd(&self) -> bool { !self.is_even() }"},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"            /// Simultaneous truncated integer division and modulus."},
{"lineNum":"  282","line":"            #[inline]"},
{"lineNum":"  283","line":"            fn div_rem(&self, other: &$T) -> ($T, $T) {","class":"lineCov","hits":"4","order":"1064","possible_hits":"4",},
{"lineNum":"  284","line":"                (*self / *other, *self % *other)","class":"linePartCov","hits":"2","order":"1065","possible_hits":"6",},
{"lineNum":"  285","line":"            }"},
{"lineNum":"  286","line":"        }"},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"        #[cfg(test)]"},
{"lineNum":"  289","line":"        mod $test_mod {"},
{"lineNum":"  290","line":"            use Integer;"},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"            /// Checks that the division rule holds for:"},
{"lineNum":"  293","line":"            ///"},
{"lineNum":"  294","line":"            /// - `n`: numerator (dividend)"},
{"lineNum":"  295","line":"            /// - `d`: denominator (divisor)"},
{"lineNum":"  296","line":"            /// - `qr`: quotient and remainder"},
{"lineNum":"  297","line":"            #[cfg(test)]"},
{"lineNum":"  298","line":"            fn test_division_rule((n,d): ($T,$T), (q,r): ($T,$T)) {"},
{"lineNum":"  299","line":"                assert_eq!(d * q + r, n);"},
{"lineNum":"  300","line":"            }"},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"            #[test]"},
{"lineNum":"  303","line":"            fn test_div_rem() {"},
{"lineNum":"  304","line":"                fn test_nd_dr(nd: ($T,$T), qr: ($T,$T)) {"},
{"lineNum":"  305","line":"                    let (n,d) = nd;"},
{"lineNum":"  306","line":"                    let separate_div_rem = (n / d, n % d);"},
{"lineNum":"  307","line":"                    let combined_div_rem = n.div_rem(&d);"},
{"lineNum":"  308","line":""},
{"lineNum":"  309","line":"                    assert_eq!(separate_div_rem, qr);"},
{"lineNum":"  310","line":"                    assert_eq!(combined_div_rem, qr);"},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"                    test_division_rule(nd, separate_div_rem);"},
{"lineNum":"  313","line":"                    test_division_rule(nd, combined_div_rem);"},
{"lineNum":"  314","line":"                }"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"                test_nd_dr(( 8,  3), ( 2,  2));"},
{"lineNum":"  317","line":"                test_nd_dr(( 8, -3), (-2,  2));"},
{"lineNum":"  318","line":"                test_nd_dr((-8,  3), (-2, -2));"},
{"lineNum":"  319","line":"                test_nd_dr((-8, -3), ( 2, -2));"},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"                test_nd_dr(( 1,  2), ( 0,  1));"},
{"lineNum":"  322","line":"                test_nd_dr(( 1, -2), ( 0,  1));"},
{"lineNum":"  323","line":"                test_nd_dr((-1,  2), ( 0, -1));"},
{"lineNum":"  324","line":"                test_nd_dr((-1, -2), ( 0, -1));"},
{"lineNum":"  325","line":"            }"},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"            #[test]"},
{"lineNum":"  328","line":"            fn test_div_mod_floor() {"},
{"lineNum":"  329","line":"                fn test_nd_dm(nd: ($T,$T), dm: ($T,$T)) {"},
{"lineNum":"  330","line":"                    let (n,d) = nd;"},
{"lineNum":"  331","line":"                    let separate_div_mod_floor = (n.div_floor(&d), n.mod_floor(&d));"},
{"lineNum":"  332","line":"                    let combined_div_mod_floor = n.div_mod_floor(&d);"},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"                    assert_eq!(separate_div_mod_floor, dm);"},
{"lineNum":"  335","line":"                    assert_eq!(combined_div_mod_floor, dm);"},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"                    test_division_rule(nd, separate_div_mod_floor);"},
{"lineNum":"  338","line":"                    test_division_rule(nd, combined_div_mod_floor);"},
{"lineNum":"  339","line":"                }"},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"                test_nd_dm(( 8,  3), ( 2,  2));"},
{"lineNum":"  342","line":"                test_nd_dm(( 8, -3), (-3, -1));"},
{"lineNum":"  343","line":"                test_nd_dm((-8,  3), (-3,  1));"},
{"lineNum":"  344","line":"                test_nd_dm((-8, -3), ( 2, -2));"},
{"lineNum":"  345","line":""},
{"lineNum":"  346","line":"                test_nd_dm(( 1,  2), ( 0,  1));"},
{"lineNum":"  347","line":"                test_nd_dm(( 1, -2), (-1, -1));"},
{"lineNum":"  348","line":"                test_nd_dm((-1,  2), (-1,  1));"},
{"lineNum":"  349","line":"                test_nd_dm((-1, -2), ( 0, -1));"},
{"lineNum":"  350","line":"            }"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"            #[test]"},
{"lineNum":"  353","line":"            fn test_gcd() {"},
{"lineNum":"  354","line":"                assert_eq!((10 as $T).gcd(&2), 2 as $T);"},
{"lineNum":"  355","line":"                assert_eq!((10 as $T).gcd(&3), 1 as $T);"},
{"lineNum":"  356","line":"                assert_eq!((0 as $T).gcd(&3), 3 as $T);"},
{"lineNum":"  357","line":"                assert_eq!((3 as $T).gcd(&3), 3 as $T);"},
{"lineNum":"  358","line":"                assert_eq!((56 as $T).gcd(&42), 14 as $T);"},
{"lineNum":"  359","line":"                assert_eq!((3 as $T).gcd(&-3), 3 as $T);"},
{"lineNum":"  360","line":"                assert_eq!((-6 as $T).gcd(&3), 3 as $T);"},
{"lineNum":"  361","line":"                assert_eq!((-4 as $T).gcd(&-2), 2 as $T);"},
{"lineNum":"  362","line":"            }"},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"            #[test]"},
{"lineNum":"  365","line":"            fn test_gcd_cmp_with_euclidean() {"},
{"lineNum":"  366","line":"                fn euclidean_gcd(mut m: $T, mut n: $T) -> $T {"},
{"lineNum":"  367","line":"                    while m != 0 {"},
{"lineNum":"  368","line":"                        ::std::mem::swap(&mut m, &mut n);"},
{"lineNum":"  369","line":"                        m %= n;"},
{"lineNum":"  370","line":"                    }"},
{"lineNum":"  371","line":""},
{"lineNum":"  372","line":"                    n.abs()"},
{"lineNum":"  373","line":"                }"},
{"lineNum":"  374","line":""},
{"lineNum":"  375","line":"                // gcd(-128, b) = 128 is not representable as positive value"},
{"lineNum":"  376","line":"                // for i8"},
{"lineNum":"  377","line":"                for i in -127..127 {"},
{"lineNum":"  378","line":"                    for j in -127..127 {"},
{"lineNum":"  379","line":"                        assert_eq!(euclidean_gcd(i,j), i.gcd(&j));"},
{"lineNum":"  380","line":"                    }"},
{"lineNum":"  381","line":"                }"},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"                // last value"},
{"lineNum":"  384","line":"                // FIXME: Use inclusive ranges for above loop when implemented"},
{"lineNum":"  385","line":"                let i = 127;"},
{"lineNum":"  386","line":"                for j in -127..127 {"},
{"lineNum":"  387","line":"                    assert_eq!(euclidean_gcd(i,j), i.gcd(&j));"},
{"lineNum":"  388","line":"                }"},
{"lineNum":"  389","line":"                assert_eq!(127.gcd(&127), 127);"},
{"lineNum":"  390","line":"            }"},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":"            #[test]"},
{"lineNum":"  393","line":"            fn test_gcd_min_val() {"},
{"lineNum":"  394","line":"                let min = <$T>::min_value();"},
{"lineNum":"  395","line":"                let max = <$T>::max_value();"},
{"lineNum":"  396","line":"                let max_pow2 = max / 2 + 1;"},
{"lineNum":"  397","line":"                assert_eq!(min.gcd(&max), 1 as $T);"},
{"lineNum":"  398","line":"                assert_eq!(max.gcd(&min), 1 as $T);"},
{"lineNum":"  399","line":"                assert_eq!(min.gcd(&max_pow2), max_pow2);"},
{"lineNum":"  400","line":"                assert_eq!(max_pow2.gcd(&min), max_pow2);"},
{"lineNum":"  401","line":"                assert_eq!(min.gcd(&42), 2 as $T);"},
{"lineNum":"  402","line":"                assert_eq!((42 as $T).gcd(&min), 2 as $T);"},
{"lineNum":"  403","line":"            }"},
{"lineNum":"  404","line":""},
{"lineNum":"  405","line":"            #[test]"},
{"lineNum":"  406","line":"            #[should_panic]"},
{"lineNum":"  407","line":"            fn test_gcd_min_val_min_val() {"},
{"lineNum":"  408","line":"                let min = <$T>::min_value();"},
{"lineNum":"  409","line":"                assert!(min.gcd(&min) >= 0);"},
{"lineNum":"  410","line":"            }"},
{"lineNum":"  411","line":""},
{"lineNum":"  412","line":"            #[test]"},
{"lineNum":"  413","line":"            #[should_panic]"},
{"lineNum":"  414","line":"            fn test_gcd_min_val_0() {"},
{"lineNum":"  415","line":"                let min = <$T>::min_value();"},
{"lineNum":"  416","line":"                assert!(min.gcd(&0) >= 0);"},
{"lineNum":"  417","line":"            }"},
{"lineNum":"  418","line":""},
{"lineNum":"  419","line":"            #[test]"},
{"lineNum":"  420","line":"            #[should_panic]"},
{"lineNum":"  421","line":"            fn test_gcd_0_min_val() {"},
{"lineNum":"  422","line":"                let min = <$T>::min_value();"},
{"lineNum":"  423","line":"                assert!((0 as $T).gcd(&min) >= 0);"},
{"lineNum":"  424","line":"            }"},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"            #[test]"},
{"lineNum":"  427","line":"            fn test_lcm() {"},
{"lineNum":"  428","line":"                assert_eq!((1 as $T).lcm(&0), 0 as $T);"},
{"lineNum":"  429","line":"                assert_eq!((0 as $T).lcm(&1), 0 as $T);"},
{"lineNum":"  430","line":"                assert_eq!((1 as $T).lcm(&1), 1 as $T);"},
{"lineNum":"  431","line":"                assert_eq!((-1 as $T).lcm(&1), 1 as $T);"},
{"lineNum":"  432","line":"                assert_eq!((1 as $T).lcm(&-1), 1 as $T);"},
{"lineNum":"  433","line":"                assert_eq!((-1 as $T).lcm(&-1), 1 as $T);"},
{"lineNum":"  434","line":"                assert_eq!((8 as $T).lcm(&9), 72 as $T);"},
{"lineNum":"  435","line":"                assert_eq!((11 as $T).lcm(&5), 55 as $T);"},
{"lineNum":"  436","line":"            }"},
{"lineNum":"  437","line":""},
{"lineNum":"  438","line":"            #[test]"},
{"lineNum":"  439","line":"            fn test_even() {"},
{"lineNum":"  440","line":"                assert_eq!((-4 as $T).is_even(), true);"},
{"lineNum":"  441","line":"                assert_eq!((-3 as $T).is_even(), false);"},
{"lineNum":"  442","line":"                assert_eq!((-2 as $T).is_even(), true);"},
{"lineNum":"  443","line":"                assert_eq!((-1 as $T).is_even(), false);"},
{"lineNum":"  444","line":"                assert_eq!((0 as $T).is_even(), true);"},
{"lineNum":"  445","line":"                assert_eq!((1 as $T).is_even(), false);"},
{"lineNum":"  446","line":"                assert_eq!((2 as $T).is_even(), true);"},
{"lineNum":"  447","line":"                assert_eq!((3 as $T).is_even(), false);"},
{"lineNum":"  448","line":"                assert_eq!((4 as $T).is_even(), true);"},
{"lineNum":"  449","line":"            }"},
{"lineNum":"  450","line":""},
{"lineNum":"  451","line":"            #[test]"},
{"lineNum":"  452","line":"            fn test_odd() {"},
{"lineNum":"  453","line":"                assert_eq!((-4 as $T).is_odd(), false);"},
{"lineNum":"  454","line":"                assert_eq!((-3 as $T).is_odd(), true);"},
{"lineNum":"  455","line":"                assert_eq!((-2 as $T).is_odd(), false);"},
{"lineNum":"  456","line":"                assert_eq!((-1 as $T).is_odd(), true);"},
{"lineNum":"  457","line":"                assert_eq!((0 as $T).is_odd(), false);"},
{"lineNum":"  458","line":"                assert_eq!((1 as $T).is_odd(), true);"},
{"lineNum":"  459","line":"                assert_eq!((2 as $T).is_odd(), false);"},
{"lineNum":"  460","line":"                assert_eq!((3 as $T).is_odd(), true);"},
{"lineNum":"  461","line":"                assert_eq!((4 as $T).is_odd(), false);"},
{"lineNum":"  462","line":"            }"},
{"lineNum":"  463","line":"        }"},
{"lineNum":"  464","line":"    )"},
{"lineNum":"  465","line":"}"},
{"lineNum":"  466","line":""},
{"lineNum":"  467","line":"impl_integer_for_isize!(i8,   test_integer_i8);"},
{"lineNum":"  468","line":"impl_integer_for_isize!(i16,  test_integer_i16);"},
{"lineNum":"  469","line":"impl_integer_for_isize!(i32,  test_integer_i32);"},
{"lineNum":"  470","line":"impl_integer_for_isize!(i64,  test_integer_i64);"},
{"lineNum":"  471","line":"impl_integer_for_isize!(isize,  test_integer_isize);"},
{"lineNum":"  472","line":""},
{"lineNum":"  473","line":"macro_rules! impl_integer_for_usize {"},
{"lineNum":"  474","line":"    ($T:ty, $test_mod:ident) => ("},
{"lineNum":"  475","line":"        impl Integer for $T {"},
{"lineNum":"  476","line":"            /// Unsigned integer division. Returns the same result as `div` (`/`)."},
{"lineNum":"  477","line":"            #[inline]"},
{"lineNum":"  478","line":"            fn div_floor(&self, other: &$T) -> $T { *self / *other }"},
{"lineNum":"  479","line":""},
{"lineNum":"  480","line":"            /// Unsigned integer modulo operation. Returns the same result as `rem` (`%`)."},
{"lineNum":"  481","line":"            #[inline]"},
{"lineNum":"  482","line":"            fn mod_floor(&self, other: &$T) -> $T { *self % *other }"},
{"lineNum":"  483","line":""},
{"lineNum":"  484","line":"            /// Calculates the Greatest Common Divisor (GCD) of the number and `other`"},
{"lineNum":"  485","line":"            #[inline]"},
{"lineNum":"  486","line":"            fn gcd(&self, other: &$T) -> $T {"},
{"lineNum":"  487","line":"                // Use Stein\'s algorithm"},
{"lineNum":"  488","line":"                let mut m = *self;"},
{"lineNum":"  489","line":"                let mut n = *other;"},
{"lineNum":"  490","line":"                if m == 0 || n == 0 { return m | n }"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"                // find common factors of 2"},
{"lineNum":"  493","line":"                let shift = (m | n).trailing_zeros();"},
{"lineNum":"  494","line":""},
{"lineNum":"  495","line":"                // divide n and m by 2 until odd"},
{"lineNum":"  496","line":"                // m inside loop"},
{"lineNum":"  497","line":"                n >>= n.trailing_zeros();"},
{"lineNum":"  498","line":""},
{"lineNum":"  499","line":"                while m != 0 {"},
{"lineNum":"  500","line":"                    m >>= m.trailing_zeros();"},
{"lineNum":"  501","line":"                    if n > m { ::std::mem::swap(&mut n, &mut m) }"},
{"lineNum":"  502","line":"                    m -= n;"},
{"lineNum":"  503","line":"                }"},
{"lineNum":"  504","line":""},
{"lineNum":"  505","line":"                n << shift"},
{"lineNum":"  506","line":"            }"},
{"lineNum":"  507","line":""},
{"lineNum":"  508","line":"            /// Calculates the Lowest Common Multiple (LCM) of the number and `other`."},
{"lineNum":"  509","line":"            #[inline]"},
{"lineNum":"  510","line":"            fn lcm(&self, other: &$T) -> $T {"},
{"lineNum":"  511","line":"                (*self * *other) / self.gcd(other)"},
{"lineNum":"  512","line":"            }"},
{"lineNum":"  513","line":""},
{"lineNum":"  514","line":"            /// Deprecated, use `is_multiple_of` instead."},
{"lineNum":"  515","line":"            #[inline]"},
{"lineNum":"  516","line":"            fn divides(&self, other: &$T) -> bool { return self.is_multiple_of(other); }"},
{"lineNum":"  517","line":""},
{"lineNum":"  518","line":"            /// Returns `true` if the number is a multiple of `other`."},
{"lineNum":"  519","line":"            #[inline]"},
{"lineNum":"  520","line":"            fn is_multiple_of(&self, other: &$T) -> bool { *self % *other == 0 }"},
{"lineNum":"  521","line":""},
{"lineNum":"  522","line":"            /// Returns `true` if the number is divisible by `2`."},
{"lineNum":"  523","line":"            #[inline]"},
{"lineNum":"  524","line":"            fn is_even(&self) -> bool { (*self) & 1 == 0 }"},
{"lineNum":"  525","line":""},
{"lineNum":"  526","line":"            /// Returns `true` if the number is not divisible by `2`."},
{"lineNum":"  527","line":"            #[inline]"},
{"lineNum":"  528","line":"            fn is_odd(&self) -> bool { !(*self).is_even() }"},
{"lineNum":"  529","line":""},
{"lineNum":"  530","line":"            /// Simultaneous truncated integer division and modulus."},
{"lineNum":"  531","line":"            #[inline]"},
{"lineNum":"  532","line":"            fn div_rem(&self, other: &$T) -> ($T, $T) {","class":"lineCov","hits":"2","order":"1090","possible_hits":"2",},
{"lineNum":"  533","line":"                (*self / *other, *self % *other)","class":"linePartCov","hits":"1","order":"1091","possible_hits":"3",},
{"lineNum":"  534","line":"            }"},
{"lineNum":"  535","line":"        }"},
{"lineNum":"  536","line":""},
{"lineNum":"  537","line":"        #[cfg(test)]"},
{"lineNum":"  538","line":"        mod $test_mod {"},
{"lineNum":"  539","line":"            use Integer;"},
{"lineNum":"  540","line":""},
{"lineNum":"  541","line":"            #[test]"},
{"lineNum":"  542","line":"            fn test_div_mod_floor() {"},
{"lineNum":"  543","line":"                assert_eq!((10 as $T).div_floor(&(3 as $T)), 3 as $T);"},
{"lineNum":"  544","line":"                assert_eq!((10 as $T).mod_floor(&(3 as $T)), 1 as $T);"},
{"lineNum":"  545","line":"                assert_eq!((10 as $T).div_mod_floor(&(3 as $T)), (3 as $T, 1 as $T));"},
{"lineNum":"  546","line":"                assert_eq!((5 as $T).div_floor(&(5 as $T)), 1 as $T);"},
{"lineNum":"  547","line":"                assert_eq!((5 as $T).mod_floor(&(5 as $T)), 0 as $T);"},
{"lineNum":"  548","line":"                assert_eq!((5 as $T).div_mod_floor(&(5 as $T)), (1 as $T, 0 as $T));"},
{"lineNum":"  549","line":"                assert_eq!((3 as $T).div_floor(&(7 as $T)), 0 as $T);"},
{"lineNum":"  550","line":"                assert_eq!((3 as $T).mod_floor(&(7 as $T)), 3 as $T);"},
{"lineNum":"  551","line":"                assert_eq!((3 as $T).div_mod_floor(&(7 as $T)), (0 as $T, 3 as $T));"},
{"lineNum":"  552","line":"            }"},
{"lineNum":"  553","line":""},
{"lineNum":"  554","line":"            #[test]"},
{"lineNum":"  555","line":"            fn test_gcd() {"},
{"lineNum":"  556","line":"                assert_eq!((10 as $T).gcd(&2), 2 as $T);"},
{"lineNum":"  557","line":"                assert_eq!((10 as $T).gcd(&3), 1 as $T);"},
{"lineNum":"  558","line":"                assert_eq!((0 as $T).gcd(&3), 3 as $T);"},
{"lineNum":"  559","line":"                assert_eq!((3 as $T).gcd(&3), 3 as $T);"},
{"lineNum":"  560","line":"                assert_eq!((56 as $T).gcd(&42), 14 as $T);"},
{"lineNum":"  561","line":"            }"},
{"lineNum":"  562","line":""},
{"lineNum":"  563","line":"            #[test]"},
{"lineNum":"  564","line":"            fn test_gcd_cmp_with_euclidean() {"},
{"lineNum":"  565","line":"                fn euclidean_gcd(mut m: $T, mut n: $T) -> $T {"},
{"lineNum":"  566","line":"                    while m != 0 {"},
{"lineNum":"  567","line":"                        ::std::mem::swap(&mut m, &mut n);"},
{"lineNum":"  568","line":"                        m %= n;"},
{"lineNum":"  569","line":"                    }"},
{"lineNum":"  570","line":"                    n"},
{"lineNum":"  571","line":"                }"},
{"lineNum":"  572","line":""},
{"lineNum":"  573","line":"                for i in 0..255 {"},
{"lineNum":"  574","line":"                    for j in 0..255 {"},
{"lineNum":"  575","line":"                        assert_eq!(euclidean_gcd(i,j), i.gcd(&j));"},
{"lineNum":"  576","line":"                    }"},
{"lineNum":"  577","line":"                }"},
{"lineNum":"  578","line":""},
{"lineNum":"  579","line":"                // last value"},
{"lineNum":"  580","line":"                // FIXME: Use inclusive ranges for above loop when implemented"},
{"lineNum":"  581","line":"                let i = 255;"},
{"lineNum":"  582","line":"                for j in 0..255 {"},
{"lineNum":"  583","line":"                    assert_eq!(euclidean_gcd(i,j), i.gcd(&j));"},
{"lineNum":"  584","line":"                }"},
{"lineNum":"  585","line":"                assert_eq!(255.gcd(&255), 255);"},
{"lineNum":"  586","line":"            }"},
{"lineNum":"  587","line":""},
{"lineNum":"  588","line":"            #[test]"},
{"lineNum":"  589","line":"            fn test_lcm() {"},
{"lineNum":"  590","line":"                assert_eq!((1 as $T).lcm(&0), 0 as $T);"},
{"lineNum":"  591","line":"                assert_eq!((0 as $T).lcm(&1), 0 as $T);"},
{"lineNum":"  592","line":"                assert_eq!((1 as $T).lcm(&1), 1 as $T);"},
{"lineNum":"  593","line":"                assert_eq!((8 as $T).lcm(&9), 72 as $T);"},
{"lineNum":"  594","line":"                assert_eq!((11 as $T).lcm(&5), 55 as $T);"},
{"lineNum":"  595","line":"                assert_eq!((15 as $T).lcm(&17), 255 as $T);"},
{"lineNum":"  596","line":"            }"},
{"lineNum":"  597","line":""},
{"lineNum":"  598","line":"            #[test]"},
{"lineNum":"  599","line":"            fn test_is_multiple_of() {"},
{"lineNum":"  600","line":"                assert!((6 as $T).is_multiple_of(&(6 as $T)));"},
{"lineNum":"  601","line":"                assert!((6 as $T).is_multiple_of(&(3 as $T)));"},
{"lineNum":"  602","line":"                assert!((6 as $T).is_multiple_of(&(1 as $T)));"},
{"lineNum":"  603","line":"            }"},
{"lineNum":"  604","line":""},
{"lineNum":"  605","line":"            #[test]"},
{"lineNum":"  606","line":"            fn test_even() {"},
{"lineNum":"  607","line":"                assert_eq!((0 as $T).is_even(), true);"},
{"lineNum":"  608","line":"                assert_eq!((1 as $T).is_even(), false);"},
{"lineNum":"  609","line":"                assert_eq!((2 as $T).is_even(), true);"},
{"lineNum":"  610","line":"                assert_eq!((3 as $T).is_even(), false);"},
{"lineNum":"  611","line":"                assert_eq!((4 as $T).is_even(), true);"},
{"lineNum":"  612","line":"            }"},
{"lineNum":"  613","line":""},
{"lineNum":"  614","line":"            #[test]"},
{"lineNum":"  615","line":"            fn test_odd() {"},
{"lineNum":"  616","line":"                assert_eq!((0 as $T).is_odd(), false);"},
{"lineNum":"  617","line":"                assert_eq!((1 as $T).is_odd(), true);"},
{"lineNum":"  618","line":"                assert_eq!((2 as $T).is_odd(), false);"},
{"lineNum":"  619","line":"                assert_eq!((3 as $T).is_odd(), true);"},
{"lineNum":"  620","line":"                assert_eq!((4 as $T).is_odd(), false);"},
{"lineNum":"  621","line":"            }"},
{"lineNum":"  622","line":"        }"},
{"lineNum":"  623","line":"    )"},
{"lineNum":"  624","line":"}"},
{"lineNum":"  625","line":""},
{"lineNum":"  626","line":"impl_integer_for_usize!(u8,   test_integer_u8);"},
{"lineNum":"  627","line":"impl_integer_for_usize!(u16,  test_integer_u16);"},
{"lineNum":"  628","line":"impl_integer_for_usize!(u32,  test_integer_u32);"},
{"lineNum":"  629","line":"impl_integer_for_usize!(u64,  test_integer_u64);"},
{"lineNum":"  630","line":"impl_integer_for_usize!(usize, test_integer_usize);"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test_client-4682762fd156921f", "date" : "2016-02-11 01:02:55", "instrumented" : 11, "covered" : 11,};
var merged_data = [];
