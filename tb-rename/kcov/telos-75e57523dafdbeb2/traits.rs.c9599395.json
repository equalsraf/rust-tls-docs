var data = {lines:[
{"lineNum":"    1","line":"// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT"},
{"lineNum":"    2","line":"// file at the top-level directory of this distribution and at"},
{"lineNum":"    3","line":"// http://rust-lang.org/COPYRIGHT."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or"},
{"lineNum":"    6","line":"// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license"},
{"lineNum":"    7","line":"// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your"},
{"lineNum":"    8","line":"// option. This file may not be copied, modified, or distributed"},
{"lineNum":"    9","line":"// except according to those terms."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"//! Numeric traits for generic mathematics"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"use std::ops::{Add, Sub, Mul, Div, Rem, Neg};"},
{"lineNum":"   14","line":"use std::ops::{Not, BitAnd, BitOr, BitXor, Shl, Shr};"},
{"lineNum":"   15","line":"use std::{usize, u8, u16, u32, u64};"},
{"lineNum":"   16","line":"use std::{isize, i8, i16, i32, i64};"},
{"lineNum":"   17","line":"use std::{f32, f64};"},
{"lineNum":"   18","line":"use std::mem::{self, size_of};"},
{"lineNum":"   19","line":"use std::num::FpCategory;"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"/// The base trait for numeric types"},
{"lineNum":"   22","line":"pub trait Num: PartialEq + Zero + One"},
{"lineNum":"   23","line":"    + Add<Output = Self> + Sub<Output = Self>"},
{"lineNum":"   24","line":"    + Mul<Output = Self> + Div<Output = Self> + Rem<Output = Self>"},
{"lineNum":"   25","line":"{"},
{"lineNum":"   26","line":"    /// Parse error for `from_str_radix`"},
{"lineNum":"   27","line":"    type FromStrRadixErr;"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"    /// Convert from a string and radix <= 36."},
{"lineNum":"   30","line":"    fn from_str_radix(str: &str, radix: u32) -> Result<Self, Self::FromStrRadixErr>;"},
{"lineNum":"   31","line":"}"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"macro_rules! int_trait_impl {"},
{"lineNum":"   34","line":"    ($name:ident for $($t:ty)*) => ($("},
{"lineNum":"   35","line":"        impl $name for $t {"},
{"lineNum":"   36","line":"            type FromStrRadixErr = ::std::num::ParseIntError;"},
{"lineNum":"   37","line":"            fn from_str_radix(s: &str, radix: u32)"},
{"lineNum":"   38","line":"                              -> Result<Self, ::std::num::ParseIntError>"},
{"lineNum":"   39","line":"            {"},
{"lineNum":"   40","line":"                <$t>::from_str_radix(s, radix)"},
{"lineNum":"   41","line":"            }"},
{"lineNum":"   42","line":"        }"},
{"lineNum":"   43","line":"    )*)"},
{"lineNum":"   44","line":"}"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"// FIXME: Temporary replacements for unstable ::std::num::ParseFloatError and"},
{"lineNum":"   47","line":"// ::std::num::FloatErrorKind. These can be removed once the std float implementation of"},
{"lineNum":"   48","line":"// from_str_radix stabilises."},
{"lineNum":"   49","line":"pub enum FloatErrorKind { Empty, Invalid }"},
{"lineNum":"   50","line":"pub struct ParseFloatError { pub kind: FloatErrorKind }"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"// FIXME: This should be removed and replaced with the std implementation of from_str_radix once"},
{"lineNum":"   53","line":"// it is stabilised."},
{"lineNum":"   54","line":"macro_rules! float_trait_impl {"},
{"lineNum":"   55","line":"    ($name:ident for $($t:ty)*) => ($("},
{"lineNum":"   56","line":"        impl $name for $t {"},
{"lineNum":"   57","line":"            type FromStrRadixErr = ParseFloatError;"},
{"lineNum":"   58","line":"            fn from_str_radix(src: &str, radix: u32)"},
{"lineNum":"   59","line":"                              -> Result<Self, ParseFloatError>"},
{"lineNum":"   60","line":"            {"},
{"lineNum":"   61","line":"                use self::FloatErrorKind::*;"},
{"lineNum":"   62","line":"                use self::ParseFloatError as PFE;"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"                // Special values"},
{"lineNum":"   65","line":"                match src {"},
{"lineNum":"   66","line":"                    \"inf\"   => return Ok(Float::infinity()),"},
{"lineNum":"   67","line":"                    \"-inf\"  => return Ok(Float::neg_infinity()),"},
{"lineNum":"   68","line":"                    \"NaN\"   => return Ok(Float::nan()),"},
{"lineNum":"   69","line":"                    _       => {},"},
{"lineNum":"   70","line":"                }"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"                fn slice_shift_char(src: &str) -> Option<(char, &str)> {"},
{"lineNum":"   73","line":"                    src.chars().nth(0).map(|ch| (ch, &src[1..]))"},
{"lineNum":"   74","line":"                }"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"                let (is_positive, src) =  match slice_shift_char(src) {"},
{"lineNum":"   77","line":"                    None             => return Err(PFE { kind: Empty }),"},
{"lineNum":"   78","line":"                    Some((\'-\', \"\"))  => return Err(PFE { kind: Empty }),"},
{"lineNum":"   79","line":"                    Some((\'-\', src)) => (false, src),"},
{"lineNum":"   80","line":"                    Some((_, _))     => (true,  src),"},
{"lineNum":"   81","line":"                };"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"                // The significand to accumulate"},
{"lineNum":"   84","line":"                let mut sig = if is_positive { 0.0 } else { -0.0 };"},
{"lineNum":"   85","line":"                // Necessary to detect overflow"},
{"lineNum":"   86","line":"                let mut prev_sig = sig;"},
{"lineNum":"   87","line":"                let mut cs = src.chars().enumerate();"},
{"lineNum":"   88","line":"                // Exponent prefix and exponent index offset"},
{"lineNum":"   89","line":"                let mut exp_info = None::<(char, usize)>;"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"                // Parse the integer part of the significand"},
{"lineNum":"   92","line":"                for (i, c) in cs.by_ref() {"},
{"lineNum":"   93","line":"                    match c.to_digit(radix) {"},
{"lineNum":"   94","line":"                        Some(digit) => {"},
{"lineNum":"   95","line":"                            // shift significand one digit left"},
{"lineNum":"   96","line":"                            sig = sig * (radix as $t);"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"                            // add/subtract current digit depending on sign"},
{"lineNum":"   99","line":"                            if is_positive {"},
{"lineNum":"  100","line":"                                sig = sig + ((digit as isize) as $t);"},
{"lineNum":"  101","line":"                            } else {"},
{"lineNum":"  102","line":"                                sig = sig - ((digit as isize) as $t);"},
{"lineNum":"  103","line":"                            }"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"                            // Detect overflow by comparing to last value, except"},
{"lineNum":"  106","line":"                            // if we\'ve not seen any non-zero digits."},
{"lineNum":"  107","line":"                            if prev_sig != 0.0 {"},
{"lineNum":"  108","line":"                                if is_positive && sig <= prev_sig"},
{"lineNum":"  109","line":"                                    { return Ok(Float::infinity()); }"},
{"lineNum":"  110","line":"                                if !is_positive && sig >= prev_sig"},
{"lineNum":"  111","line":"                                    { return Ok(Float::neg_infinity()); }"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"                                // Detect overflow by reversing the shift-and-add process"},
{"lineNum":"  114","line":"                                if is_positive && (prev_sig != (sig - digit as $t) / radix as $t)"},
{"lineNum":"  115","line":"                                    { return Ok(Float::infinity()); }"},
{"lineNum":"  116","line":"                                if !is_positive && (prev_sig != (sig + digit as $t) / radix as $t)"},
{"lineNum":"  117","line":"                                    { return Ok(Float::neg_infinity()); }"},
{"lineNum":"  118","line":"                            }"},
{"lineNum":"  119","line":"                            prev_sig = sig;"},
{"lineNum":"  120","line":"                        },"},
{"lineNum":"  121","line":"                        None => match c {"},
{"lineNum":"  122","line":"                            \'e\' | \'E\' | \'p\' | \'P\' => {"},
{"lineNum":"  123","line":"                                exp_info = Some((c, i + 1));"},
{"lineNum":"  124","line":"                                break;  // start of exponent"},
{"lineNum":"  125","line":"                            },"},
{"lineNum":"  126","line":"                            \'.\' => {"},
{"lineNum":"  127","line":"                                break;  // start of fractional part"},
{"lineNum":"  128","line":"                            },"},
{"lineNum":"  129","line":"                            _ => {"},
{"lineNum":"  130","line":"                                return Err(PFE { kind: Invalid });"},
{"lineNum":"  131","line":"                            },"},
{"lineNum":"  132","line":"                        },"},
{"lineNum":"  133","line":"                    }"},
{"lineNum":"  134","line":"                }"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"                // If we are not yet at the exponent parse the fractional"},
{"lineNum":"  137","line":"                // part of the significand"},
{"lineNum":"  138","line":"                if exp_info.is_none() {"},
{"lineNum":"  139","line":"                    let mut power = 1.0;"},
{"lineNum":"  140","line":"                    for (i, c) in cs.by_ref() {"},
{"lineNum":"  141","line":"                        match c.to_digit(radix) {"},
{"lineNum":"  142","line":"                            Some(digit) => {"},
{"lineNum":"  143","line":"                                // Decrease power one order of magnitude"},
{"lineNum":"  144","line":"                                power = power / (radix as $t);"},
{"lineNum":"  145","line":"                                // add/subtract current digit depending on sign"},
{"lineNum":"  146","line":"                                sig = if is_positive {"},
{"lineNum":"  147","line":"                                    sig + (digit as $t) * power"},
{"lineNum":"  148","line":"                                } else {"},
{"lineNum":"  149","line":"                                    sig - (digit as $t) * power"},
{"lineNum":"  150","line":"                                };"},
{"lineNum":"  151","line":"                                // Detect overflow by comparing to last value"},
{"lineNum":"  152","line":"                                if is_positive && sig < prev_sig"},
{"lineNum":"  153","line":"                                    { return Ok(Float::infinity()); }"},
{"lineNum":"  154","line":"                                if !is_positive && sig > prev_sig"},
{"lineNum":"  155","line":"                                    { return Ok(Float::neg_infinity()); }"},
{"lineNum":"  156","line":"                                prev_sig = sig;"},
{"lineNum":"  157","line":"                            },"},
{"lineNum":"  158","line":"                            None => match c {"},
{"lineNum":"  159","line":"                                \'e\' | \'E\' | \'p\' | \'P\' => {"},
{"lineNum":"  160","line":"                                    exp_info = Some((c, i + 1));"},
{"lineNum":"  161","line":"                                    break; // start of exponent"},
{"lineNum":"  162","line":"                                },"},
{"lineNum":"  163","line":"                                _ => {"},
{"lineNum":"  164","line":"                                    return Err(PFE { kind: Invalid });"},
{"lineNum":"  165","line":"                                },"},
{"lineNum":"  166","line":"                            },"},
{"lineNum":"  167","line":"                        }"},
{"lineNum":"  168","line":"                    }"},
{"lineNum":"  169","line":"                }"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"                // Parse and calculate the exponent"},
{"lineNum":"  172","line":"                let exp = match exp_info {"},
{"lineNum":"  173","line":"                    Some((c, offset)) => {"},
{"lineNum":"  174","line":"                        let base = match c {"},
{"lineNum":"  175","line":"                            \'E\' | \'e\' if radix == 10 => 10.0,"},
{"lineNum":"  176","line":"                            \'P\' | \'p\' if radix == 16 => 2.0,"},
{"lineNum":"  177","line":"                            _ => return Err(PFE { kind: Invalid }),"},
{"lineNum":"  178","line":"                        };"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"                        // Parse the exponent as decimal integer"},
{"lineNum":"  181","line":"                        let src = &src[offset..];"},
{"lineNum":"  182","line":"                        let (is_positive, exp) = match slice_shift_char(src) {"},
{"lineNum":"  183","line":"                            Some((\'-\', src)) => (false, src.parse::<usize>()),"},
{"lineNum":"  184","line":"                            Some((\'+\', src)) => (true,  src.parse::<usize>()),"},
{"lineNum":"  185","line":"                            Some((_, _))     => (true,  src.parse::<usize>()),"},
{"lineNum":"  186","line":"                            None             => return Err(PFE { kind: Invalid }),"},
{"lineNum":"  187","line":"                        };"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"                        match (is_positive, exp) {"},
{"lineNum":"  190","line":"                            (true,  Ok(exp)) => base.powi(exp as i32),"},
{"lineNum":"  191","line":"                            (false, Ok(exp)) => 1.0 / base.powi(exp as i32),"},
{"lineNum":"  192","line":"                            (_, Err(_))      => return Err(PFE { kind: Invalid }),"},
{"lineNum":"  193","line":"                        }"},
{"lineNum":"  194","line":"                    },"},
{"lineNum":"  195","line":"                    None => 1.0, // no exponent"},
{"lineNum":"  196","line":"                };"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"                Ok(sig * exp)"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"            }"},
{"lineNum":"  201","line":"        }"},
{"lineNum":"  202","line":"    )*)"},
{"lineNum":"  203","line":"}"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"int_trait_impl!(Num for usize u8 u16 u32 u64 isize i8 i16 i32 i64);"},
{"lineNum":"  206","line":"float_trait_impl!(Num for f32 f64);"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"/// Defines an additive identity element for `Self`."},
{"lineNum":"  209","line":"///"},
{"lineNum":"  210","line":"/// # Deriving"},
{"lineNum":"  211","line":"///"},
{"lineNum":"  212","line":"/// This trait can be automatically be derived using `#[deriving(Zero)]`"},
{"lineNum":"  213","line":"/// attribute. If you choose to use this, make sure that the laws outlined in"},
{"lineNum":"  214","line":"/// the documentation for `Zero::zero` still hold."},
{"lineNum":"  215","line":"pub trait Zero: Sized + Add<Self, Output = Self> {"},
{"lineNum":"  216","line":"    /// Returns the additive identity element of `Self`, `0`."},
{"lineNum":"  217","line":"    ///"},
{"lineNum":"  218","line":"    /// # Laws"},
{"lineNum":"  219","line":"    ///"},
{"lineNum":"  220","line":"    /// ```{.text}"},
{"lineNum":"  221","line":"    /// a + 0 = a       ∀ a ∈ Self"},
{"lineNum":"  222","line":"    /// 0 + a = a       ∀ a ∈ Self"},
{"lineNum":"  223","line":"    /// ```"},
{"lineNum":"  224","line":"    ///"},
{"lineNum":"  225","line":"    /// # Purity"},
{"lineNum":"  226","line":"    ///"},
{"lineNum":"  227","line":"    /// This function should return the same result at all times regardless of"},
{"lineNum":"  228","line":"    /// external mutable state, for example values stored in TLS or in"},
{"lineNum":"  229","line":"    /// `static mut`s."},
{"lineNum":"  230","line":"    // FIXME (#5527): This should be an associated constant"},
{"lineNum":"  231","line":"    fn zero() -> Self;"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"    /// Returns `true` if `self` is equal to the additive identity."},
{"lineNum":"  234","line":"    #[inline]"},
{"lineNum":"  235","line":"    fn is_zero(&self) -> bool;"},
{"lineNum":"  236","line":"}"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"macro_rules! zero_impl {"},
{"lineNum":"  239","line":"    ($t:ty, $v:expr) => {"},
{"lineNum":"  240","line":"        impl Zero for $t {"},
{"lineNum":"  241","line":"            #[inline]"},
{"lineNum":"  242","line":"            fn zero() -> $t { $v }"},
{"lineNum":"  243","line":"            #[inline]"},
{"lineNum":"  244","line":"            fn is_zero(&self) -> bool { *self == $v }"},
{"lineNum":"  245","line":"        }"},
{"lineNum":"  246","line":"    }"},
{"lineNum":"  247","line":"}"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"zero_impl!(usize, 0usize);"},
{"lineNum":"  250","line":"zero_impl!(u8,   0u8);"},
{"lineNum":"  251","line":"zero_impl!(u16,  0u16);"},
{"lineNum":"  252","line":"zero_impl!(u32,  0u32);"},
{"lineNum":"  253","line":"zero_impl!(u64,  0u64);"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"zero_impl!(isize, 0isize);"},
{"lineNum":"  256","line":"zero_impl!(i8,  0i8);"},
{"lineNum":"  257","line":"zero_impl!(i16, 0i16);"},
{"lineNum":"  258","line":"zero_impl!(i32, 0i32);"},
{"lineNum":"  259","line":"zero_impl!(i64, 0i64);"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"zero_impl!(f32, 0.0f32);"},
{"lineNum":"  262","line":"zero_impl!(f64, 0.0f64);"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"/// Defines a multiplicative identity element for `Self`."},
{"lineNum":"  265","line":"pub trait One: Sized + Mul<Self, Output = Self> {"},
{"lineNum":"  266","line":"    /// Returns the multiplicative identity element of `Self`, `1`."},
{"lineNum":"  267","line":"    ///"},
{"lineNum":"  268","line":"    /// # Laws"},
{"lineNum":"  269","line":"    ///"},
{"lineNum":"  270","line":"    /// ```{.text}"},
{"lineNum":"  271","line":"    /// a * 1 = a       ∀ a ∈ Self"},
{"lineNum":"  272","line":"    /// 1 * a = a       ∀ a ∈ Self"},
{"lineNum":"  273","line":"    /// ```"},
{"lineNum":"  274","line":"    ///"},
{"lineNum":"  275","line":"    /// # Purity"},
{"lineNum":"  276","line":"    ///"},
{"lineNum":"  277","line":"    /// This function should return the same result at all times regardless of"},
{"lineNum":"  278","line":"    /// external mutable state, for example values stored in TLS or in"},
{"lineNum":"  279","line":"    /// `static mut`s."},
{"lineNum":"  280","line":"    // FIXME (#5527): This should be an associated constant"},
{"lineNum":"  281","line":"    fn one() -> Self;"},
{"lineNum":"  282","line":"}"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"macro_rules! one_impl {"},
{"lineNum":"  285","line":"    ($t:ty, $v:expr) => {"},
{"lineNum":"  286","line":"        impl One for $t {"},
{"lineNum":"  287","line":"            #[inline]"},
{"lineNum":"  288","line":"            fn one() -> $t { $v }"},
{"lineNum":"  289","line":"        }"},
{"lineNum":"  290","line":"    }"},
{"lineNum":"  291","line":"}"},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"one_impl!(usize, 1usize);"},
{"lineNum":"  294","line":"one_impl!(u8,  1u8);"},
{"lineNum":"  295","line":"one_impl!(u16, 1u16);"},
{"lineNum":"  296","line":"one_impl!(u32, 1u32);"},
{"lineNum":"  297","line":"one_impl!(u64, 1u64);"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"one_impl!(isize, 1isize);"},
{"lineNum":"  300","line":"one_impl!(i8,  1i8);"},
{"lineNum":"  301","line":"one_impl!(i16, 1i16);"},
{"lineNum":"  302","line":"one_impl!(i32, 1i32);"},
{"lineNum":"  303","line":"one_impl!(i64, 1i64);"},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"one_impl!(f32, 1.0f32);"},
{"lineNum":"  306","line":"one_impl!(f64, 1.0f64);"},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"/// Useful functions for signed numbers (i.e. numbers that can be negative)."},
{"lineNum":"  309","line":"pub trait Signed: Sized + Num + Neg<Output = Self> {"},
{"lineNum":"  310","line":"    /// Computes the absolute value."},
{"lineNum":"  311","line":"    ///"},
{"lineNum":"  312","line":"    /// For `f32` and `f64`, `NaN` will be returned if the number is `NaN`."},
{"lineNum":"  313","line":"    ///"},
{"lineNum":"  314","line":"    /// For signed integers, `::MIN` will be returned if the number is `::MIN`."},
{"lineNum":"  315","line":"    fn abs(&self) -> Self;"},
{"lineNum":"  316","line":""},
{"lineNum":"  317","line":"    /// The positive difference of two numbers."},
{"lineNum":"  318","line":"    ///"},
{"lineNum":"  319","line":"    /// Returns `zero` if the number is less than or equal to `other`, otherwise the difference"},
{"lineNum":"  320","line":"    /// between `self` and `other` is returned."},
{"lineNum":"  321","line":"    fn abs_sub(&self, other: &Self) -> Self;"},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"    /// Returns the sign of the number."},
{"lineNum":"  324","line":"    ///"},
{"lineNum":"  325","line":"    /// For `f32` and `f64`:"},
{"lineNum":"  326","line":"    ///"},
{"lineNum":"  327","line":"    /// * `1.0` if the number is positive, `+0.0` or `INFINITY`"},
{"lineNum":"  328","line":"    /// * `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`"},
{"lineNum":"  329","line":"    /// * `NaN` if the number is `NaN`"},
{"lineNum":"  330","line":"    ///"},
{"lineNum":"  331","line":"    /// For signed integers:"},
{"lineNum":"  332","line":"    ///"},
{"lineNum":"  333","line":"    /// * `0` if the number is zero"},
{"lineNum":"  334","line":"    /// * `1` if the number is positive"},
{"lineNum":"  335","line":"    /// * `-1` if the number is negative"},
{"lineNum":"  336","line":"    fn signum(&self) -> Self;"},
{"lineNum":"  337","line":""},
{"lineNum":"  338","line":"    /// Returns true if the number is positive and false if the number is zero or negative."},
{"lineNum":"  339","line":"    fn is_positive(&self) -> bool;"},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"    /// Returns true if the number is negative and false if the number is zero or positive."},
{"lineNum":"  342","line":"    fn is_negative(&self) -> bool;"},
{"lineNum":"  343","line":"}"},
{"lineNum":"  344","line":""},
{"lineNum":"  345","line":"macro_rules! signed_impl {"},
{"lineNum":"  346","line":"    ($($t:ty)*) => ($("},
{"lineNum":"  347","line":"        impl Signed for $t {"},
{"lineNum":"  348","line":"            #[inline]"},
{"lineNum":"  349","line":"            fn abs(&self) -> $t {"},
{"lineNum":"  350","line":"                if self.is_negative() { -*self } else { *self }"},
{"lineNum":"  351","line":"            }"},
{"lineNum":"  352","line":""},
{"lineNum":"  353","line":"            #[inline]"},
{"lineNum":"  354","line":"            fn abs_sub(&self, other: &$t) -> $t {"},
{"lineNum":"  355","line":"                if *self <= *other { 0 } else { *self - *other }"},
{"lineNum":"  356","line":"            }"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"            #[inline]"},
{"lineNum":"  359","line":"            fn signum(&self) -> $t {"},
{"lineNum":"  360","line":"                match *self {"},
{"lineNum":"  361","line":"                    n if n > 0 => 1,"},
{"lineNum":"  362","line":"                    0 => 0,"},
{"lineNum":"  363","line":"                    _ => -1,"},
{"lineNum":"  364","line":"                }"},
{"lineNum":"  365","line":"            }"},
{"lineNum":"  366","line":""},
{"lineNum":"  367","line":"            #[inline]"},
{"lineNum":"  368","line":"            fn is_positive(&self) -> bool { *self > 0 }"},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"            #[inline]"},
{"lineNum":"  371","line":"            fn is_negative(&self) -> bool { *self < 0 }"},
{"lineNum":"  372","line":"        }"},
{"lineNum":"  373","line":"    )*)"},
{"lineNum":"  374","line":"}"},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"signed_impl!(isize i8 i16 i32 i64);"},
{"lineNum":"  377","line":""},
{"lineNum":"  378","line":"macro_rules! signed_float_impl {"},
{"lineNum":"  379","line":"    ($t:ty, $nan:expr, $inf:expr, $neg_inf:expr) => {"},
{"lineNum":"  380","line":"        impl Signed for $t {"},
{"lineNum":"  381","line":"            /// Computes the absolute value. Returns `NAN` if the number is `NAN`."},
{"lineNum":"  382","line":"            #[inline]"},
{"lineNum":"  383","line":"            fn abs(&self) -> $t {"},
{"lineNum":"  384","line":"                <$t>::abs(*self)"},
{"lineNum":"  385","line":"            }"},
{"lineNum":"  386","line":""},
{"lineNum":"  387","line":"            /// The positive difference of two numbers. Returns `0.0` if the number is"},
{"lineNum":"  388","line":"            /// less than or equal to `other`, otherwise the difference between`self`"},
{"lineNum":"  389","line":"            /// and `other` is returned."},
{"lineNum":"  390","line":"            #[inline]"},
{"lineNum":"  391","line":"            fn abs_sub(&self, other: &$t) -> $t {"},
{"lineNum":"  392","line":"                <$t>::abs_sub(*self, *other)"},
{"lineNum":"  393","line":"            }"},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"            /// # Returns"},
{"lineNum":"  396","line":"            ///"},
{"lineNum":"  397","line":"            /// - `1.0` if the number is positive, `+0.0` or `INFINITY`"},
{"lineNum":"  398","line":"            /// - `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`"},
{"lineNum":"  399","line":"            /// - `NAN` if the number is NaN"},
{"lineNum":"  400","line":"            #[inline]"},
{"lineNum":"  401","line":"            fn signum(&self) -> $t {"},
{"lineNum":"  402","line":"                <$t>::signum(*self)"},
{"lineNum":"  403","line":"            }"},
{"lineNum":"  404","line":""},
{"lineNum":"  405","line":"            /// Returns `true` if the number is positive, including `+0.0` and `INFINITY`"},
{"lineNum":"  406","line":"            #[inline]"},
{"lineNum":"  407","line":"            fn is_positive(&self) -> bool { *self > 0.0 || (1.0 / *self) == $inf }"},
{"lineNum":"  408","line":""},
{"lineNum":"  409","line":"            /// Returns `true` if the number is negative, including `-0.0` and `NEG_INFINITY`"},
{"lineNum":"  410","line":"            #[inline]"},
{"lineNum":"  411","line":"            fn is_negative(&self) -> bool { *self < 0.0 || (1.0 / *self) == $neg_inf }"},
{"lineNum":"  412","line":"        }"},
{"lineNum":"  413","line":"    }"},
{"lineNum":"  414","line":"}"},
{"lineNum":"  415","line":""},
{"lineNum":"  416","line":"signed_float_impl!(f32, f32::NAN, f32::INFINITY, f32::NEG_INFINITY);"},
{"lineNum":"  417","line":"signed_float_impl!(f64, f64::NAN, f64::INFINITY, f64::NEG_INFINITY);"},
{"lineNum":"  418","line":""},
{"lineNum":"  419","line":"/// A trait for values which cannot be negative"},
{"lineNum":"  420","line":"pub trait Unsigned: Num {}"},
{"lineNum":"  421","line":""},
{"lineNum":"  422","line":"macro_rules! empty_trait_impl {"},
{"lineNum":"  423","line":"    ($name:ident for $($t:ty)*) => ($("},
{"lineNum":"  424","line":"        impl $name for $t {}"},
{"lineNum":"  425","line":"    )*)"},
{"lineNum":"  426","line":"}"},
{"lineNum":"  427","line":""},
{"lineNum":"  428","line":"empty_trait_impl!(Unsigned for usize u8 u16 u32 u64);"},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"/// Numbers which have upper and lower bounds"},
{"lineNum":"  431","line":"pub trait Bounded {"},
{"lineNum":"  432","line":"    // FIXME (#5527): These should be associated constants"},
{"lineNum":"  433","line":"    /// returns the smallest finite number this type can represent"},
{"lineNum":"  434","line":"    fn min_value() -> Self;"},
{"lineNum":"  435","line":"    /// returns the largest finite number this type can represent"},
{"lineNum":"  436","line":"    fn max_value() -> Self;"},
{"lineNum":"  437","line":"}"},
{"lineNum":"  438","line":""},
{"lineNum":"  439","line":"macro_rules! bounded_impl {"},
{"lineNum":"  440","line":"    ($t:ty, $min:expr, $max:expr) => {"},
{"lineNum":"  441","line":"        impl Bounded for $t {"},
{"lineNum":"  442","line":"            #[inline]"},
{"lineNum":"  443","line":"            fn min_value() -> $t { $min }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  444","line":""},
{"lineNum":"  445","line":"            #[inline]"},
{"lineNum":"  446","line":"            fn max_value() -> $t { $max }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  447","line":"        }"},
{"lineNum":"  448","line":"    }"},
{"lineNum":"  449","line":"}"},
{"lineNum":"  450","line":""},
{"lineNum":"  451","line":"bounded_impl!(usize, usize::MIN, usize::MAX);"},
{"lineNum":"  452","line":"bounded_impl!(u8, u8::MIN, u8::MAX);"},
{"lineNum":"  453","line":"bounded_impl!(u16, u16::MIN, u16::MAX);"},
{"lineNum":"  454","line":"bounded_impl!(u32, u32::MIN, u32::MAX);"},
{"lineNum":"  455","line":"bounded_impl!(u64, u64::MIN, u64::MAX);"},
{"lineNum":"  456","line":""},
{"lineNum":"  457","line":"bounded_impl!(isize, isize::MIN, isize::MAX);"},
{"lineNum":"  458","line":"bounded_impl!(i8, i8::MIN, i8::MAX);"},
{"lineNum":"  459","line":"bounded_impl!(i16, i16::MIN, i16::MAX);"},
{"lineNum":"  460","line":"bounded_impl!(i32, i32::MIN, i32::MAX);"},
{"lineNum":"  461","line":"bounded_impl!(i64, i64::MIN, i64::MAX);"},
{"lineNum":"  462","line":""},
{"lineNum":"  463","line":"bounded_impl!(f32, f32::MIN, f32::MAX);"},
{"lineNum":"  464","line":"bounded_impl!(f64, f64::MIN, f64::MAX);"},
{"lineNum":"  465","line":""},
{"lineNum":"  466","line":"macro_rules! for_each_tuple_ {"},
{"lineNum":"  467","line":"    ( $m:ident !! ) => ("},
{"lineNum":"  468","line":"        $m! { }"},
{"lineNum":"  469","line":"    );"},
{"lineNum":"  470","line":"    ( $m:ident !! $h:ident, $($t:ident,)* ) => ("},
{"lineNum":"  471","line":"        $m! { $h $($t)* }"},
{"lineNum":"  472","line":"        for_each_tuple_! { $m !! $($t,)* }"},
{"lineNum":"  473","line":"    );"},
{"lineNum":"  474","line":"}"},
{"lineNum":"  475","line":"macro_rules! for_each_tuple {"},
{"lineNum":"  476","line":"    ( $m:ident ) => ("},
{"lineNum":"  477","line":"        for_each_tuple_! { $m !! A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, }"},
{"lineNum":"  478","line":"    );"},
{"lineNum":"  479","line":"}"},
{"lineNum":"  480","line":""},
{"lineNum":"  481","line":"macro_rules! bounded_tuple {"},
{"lineNum":"  482","line":"    ( $($name:ident)* ) => ("},
{"lineNum":"  483","line":"        impl<$($name: Bounded,)*> Bounded for ($($name,)*) {"},
{"lineNum":"  484","line":"            fn min_value() -> Self {"},
{"lineNum":"  485","line":"                ($($name::min_value(),)*)"},
{"lineNum":"  486","line":"            }"},
{"lineNum":"  487","line":"            fn max_value() -> Self {"},
{"lineNum":"  488","line":"                ($($name::max_value(),)*)"},
{"lineNum":"  489","line":"            }"},
{"lineNum":"  490","line":"        }"},
{"lineNum":"  491","line":"    );"},
{"lineNum":"  492","line":"}"},
{"lineNum":"  493","line":""},
{"lineNum":"  494","line":"for_each_tuple!(bounded_tuple);"},
{"lineNum":"  495","line":""},
{"lineNum":"  496","line":"/// Saturating math operations"},
{"lineNum":"  497","line":"pub trait Saturating {"},
{"lineNum":"  498","line":"    /// Saturating addition operator."},
{"lineNum":"  499","line":"    /// Returns a+b, saturating at the numeric bounds instead of overflowing."},
{"lineNum":"  500","line":"    fn saturating_add(self, v: Self) -> Self;"},
{"lineNum":"  501","line":""},
{"lineNum":"  502","line":"    /// Saturating subtraction operator."},
{"lineNum":"  503","line":"    /// Returns a-b, saturating at the numeric bounds instead of overflowing."},
{"lineNum":"  504","line":"    fn saturating_sub(self, v: Self) -> Self;"},
{"lineNum":"  505","line":"}"},
{"lineNum":"  506","line":""},
{"lineNum":"  507","line":"impl<T: CheckedAdd + CheckedSub + Zero + PartialOrd + Bounded> Saturating for T {"},
{"lineNum":"  508","line":"    #[inline]"},
{"lineNum":"  509","line":"    fn saturating_add(self, v: T) -> T {"},
{"lineNum":"  510","line":"        match self.checked_add(&v) {"},
{"lineNum":"  511","line":"            Some(x) => x,"},
{"lineNum":"  512","line":"            None => if v >= Zero::zero() {"},
{"lineNum":"  513","line":"                Bounded::max_value()"},
{"lineNum":"  514","line":"            } else {"},
{"lineNum":"  515","line":"                Bounded::min_value()"},
{"lineNum":"  516","line":"            }"},
{"lineNum":"  517","line":"        }"},
{"lineNum":"  518","line":"    }"},
{"lineNum":"  519","line":""},
{"lineNum":"  520","line":"    #[inline]"},
{"lineNum":"  521","line":"    fn saturating_sub(self, v: T) -> T {"},
{"lineNum":"  522","line":"        match self.checked_sub(&v) {"},
{"lineNum":"  523","line":"            Some(x) => x,"},
{"lineNum":"  524","line":"            None => if v >= Zero::zero() {"},
{"lineNum":"  525","line":"                Bounded::min_value()"},
{"lineNum":"  526","line":"            } else {"},
{"lineNum":"  527","line":"                Bounded::max_value()"},
{"lineNum":"  528","line":"            }"},
{"lineNum":"  529","line":"        }"},
{"lineNum":"  530","line":"    }"},
{"lineNum":"  531","line":"}"},
{"lineNum":"  532","line":""},
{"lineNum":"  533","line":"/// Performs addition that returns `None` instead of wrapping around on"},
{"lineNum":"  534","line":"/// overflow."},
{"lineNum":"  535","line":"pub trait CheckedAdd: Sized + Add<Self, Output = Self> {"},
{"lineNum":"  536","line":"    /// Adds two numbers, checking for overflow. If overflow happens, `None` is"},
{"lineNum":"  537","line":"    /// returned."},
{"lineNum":"  538","line":"    fn checked_add(&self, v: &Self) -> Option<Self>;"},
{"lineNum":"  539","line":"}"},
{"lineNum":"  540","line":""},
{"lineNum":"  541","line":"macro_rules! checked_impl {"},
{"lineNum":"  542","line":"    ($trait_name:ident, $method:ident, $t:ty) => {"},
{"lineNum":"  543","line":"        impl $trait_name for $t {"},
{"lineNum":"  544","line":"            #[inline]"},
{"lineNum":"  545","line":"            fn $method(&self, v: &$t) -> Option<$t> {"},
{"lineNum":"  546","line":"                <$t>::$method(*self, *v)"},
{"lineNum":"  547","line":"            }"},
{"lineNum":"  548","line":"        }"},
{"lineNum":"  549","line":"    }"},
{"lineNum":"  550","line":"}"},
{"lineNum":"  551","line":""},
{"lineNum":"  552","line":"checked_impl!(CheckedAdd, checked_add, u8);"},
{"lineNum":"  553","line":"checked_impl!(CheckedAdd, checked_add, u16);"},
{"lineNum":"  554","line":"checked_impl!(CheckedAdd, checked_add, u32);"},
{"lineNum":"  555","line":"checked_impl!(CheckedAdd, checked_add, u64);"},
{"lineNum":"  556","line":"checked_impl!(CheckedAdd, checked_add, usize);"},
{"lineNum":"  557","line":""},
{"lineNum":"  558","line":"checked_impl!(CheckedAdd, checked_add, i8);"},
{"lineNum":"  559","line":"checked_impl!(CheckedAdd, checked_add, i16);"},
{"lineNum":"  560","line":"checked_impl!(CheckedAdd, checked_add, i32);"},
{"lineNum":"  561","line":"checked_impl!(CheckedAdd, checked_add, i64);"},
{"lineNum":"  562","line":"checked_impl!(CheckedAdd, checked_add, isize);"},
{"lineNum":"  563","line":""},
{"lineNum":"  564","line":"/// Performs subtraction that returns `None` instead of wrapping around on underflow."},
{"lineNum":"  565","line":"pub trait CheckedSub: Sized + Sub<Self, Output = Self> {"},
{"lineNum":"  566","line":"    /// Subtracts two numbers, checking for underflow. If underflow happens,"},
{"lineNum":"  567","line":"    /// `None` is returned."},
{"lineNum":"  568","line":"    fn checked_sub(&self, v: &Self) -> Option<Self>;"},
{"lineNum":"  569","line":"}"},
{"lineNum":"  570","line":""},
{"lineNum":"  571","line":"checked_impl!(CheckedSub, checked_sub, u8);"},
{"lineNum":"  572","line":"checked_impl!(CheckedSub, checked_sub, u16);"},
{"lineNum":"  573","line":"checked_impl!(CheckedSub, checked_sub, u32);"},
{"lineNum":"  574","line":"checked_impl!(CheckedSub, checked_sub, u64);"},
{"lineNum":"  575","line":"checked_impl!(CheckedSub, checked_sub, usize);"},
{"lineNum":"  576","line":""},
{"lineNum":"  577","line":"checked_impl!(CheckedSub, checked_sub, i8);"},
{"lineNum":"  578","line":"checked_impl!(CheckedSub, checked_sub, i16);"},
{"lineNum":"  579","line":"checked_impl!(CheckedSub, checked_sub, i32);"},
{"lineNum":"  580","line":"checked_impl!(CheckedSub, checked_sub, i64);"},
{"lineNum":"  581","line":"checked_impl!(CheckedSub, checked_sub, isize);"},
{"lineNum":"  582","line":""},
{"lineNum":"  583","line":"/// Performs multiplication that returns `None` instead of wrapping around on underflow or"},
{"lineNum":"  584","line":"/// overflow."},
{"lineNum":"  585","line":"pub trait CheckedMul: Sized + Mul<Self, Output = Self> {"},
{"lineNum":"  586","line":"    /// Multiplies two numbers, checking for underflow or overflow. If underflow"},
{"lineNum":"  587","line":"    /// or overflow happens, `None` is returned."},
{"lineNum":"  588","line":"    fn checked_mul(&self, v: &Self) -> Option<Self>;"},
{"lineNum":"  589","line":"}"},
{"lineNum":"  590","line":""},
{"lineNum":"  591","line":"checked_impl!(CheckedMul, checked_mul, u8);"},
{"lineNum":"  592","line":"checked_impl!(CheckedMul, checked_mul, u16);"},
{"lineNum":"  593","line":"checked_impl!(CheckedMul, checked_mul, u32);"},
{"lineNum":"  594","line":"checked_impl!(CheckedMul, checked_mul, u64);"},
{"lineNum":"  595","line":"checked_impl!(CheckedMul, checked_mul, usize);"},
{"lineNum":"  596","line":""},
{"lineNum":"  597","line":"checked_impl!(CheckedMul, checked_mul, i8);"},
{"lineNum":"  598","line":"checked_impl!(CheckedMul, checked_mul, i16);"},
{"lineNum":"  599","line":"checked_impl!(CheckedMul, checked_mul, i32);"},
{"lineNum":"  600","line":"checked_impl!(CheckedMul, checked_mul, i64);"},
{"lineNum":"  601","line":"checked_impl!(CheckedMul, checked_mul, isize);"},
{"lineNum":"  602","line":""},
{"lineNum":"  603","line":"/// Performs division that returns `None` instead of panicking on division by zero and instead of"},
{"lineNum":"  604","line":"/// wrapping around on underflow and overflow."},
{"lineNum":"  605","line":"pub trait CheckedDiv: Sized + Div<Self, Output = Self> {"},
{"lineNum":"  606","line":"    /// Divides two numbers, checking for underflow, overflow and division by"},
{"lineNum":"  607","line":"    /// zero. If any of that happens, `None` is returned."},
{"lineNum":"  608","line":"    fn checked_div(&self, v: &Self) -> Option<Self>;"},
{"lineNum":"  609","line":"}"},
{"lineNum":"  610","line":""},
{"lineNum":"  611","line":"macro_rules! checkeddiv_int_impl {"},
{"lineNum":"  612","line":"    ($t:ty, $min:expr) => {"},
{"lineNum":"  613","line":"        impl CheckedDiv for $t {"},
{"lineNum":"  614","line":"            #[inline]"},
{"lineNum":"  615","line":"            fn checked_div(&self, v: &$t) -> Option<$t> {"},
{"lineNum":"  616","line":"                if *v == 0 || (*self == $min && *v == -1) {"},
{"lineNum":"  617","line":"                    None"},
{"lineNum":"  618","line":"                } else {"},
{"lineNum":"  619","line":"                    Some(*self / *v)"},
{"lineNum":"  620","line":"                }"},
{"lineNum":"  621","line":"            }"},
{"lineNum":"  622","line":"        }"},
{"lineNum":"  623","line":"    }"},
{"lineNum":"  624","line":"}"},
{"lineNum":"  625","line":""},
{"lineNum":"  626","line":"checkeddiv_int_impl!(isize, isize::MIN);"},
{"lineNum":"  627","line":"checkeddiv_int_impl!(i8, i8::MIN);"},
{"lineNum":"  628","line":"checkeddiv_int_impl!(i16, i16::MIN);"},
{"lineNum":"  629","line":"checkeddiv_int_impl!(i32, i32::MIN);"},
{"lineNum":"  630","line":"checkeddiv_int_impl!(i64, i64::MIN);"},
{"lineNum":"  631","line":""},
{"lineNum":"  632","line":"macro_rules! checkeddiv_uint_impl {"},
{"lineNum":"  633","line":"    ($($t:ty)*) => ($("},
{"lineNum":"  634","line":"        impl CheckedDiv for $t {"},
{"lineNum":"  635","line":"            #[inline]"},
{"lineNum":"  636","line":"            fn checked_div(&self, v: &$t) -> Option<$t> {"},
{"lineNum":"  637","line":"                if *v == 0 {"},
{"lineNum":"  638","line":"                    None"},
{"lineNum":"  639","line":"                } else {"},
{"lineNum":"  640","line":"                    Some(*self / *v)"},
{"lineNum":"  641","line":"                }"},
{"lineNum":"  642","line":"            }"},
{"lineNum":"  643","line":"        }"},
{"lineNum":"  644","line":"    )*)"},
{"lineNum":"  645","line":"}"},
{"lineNum":"  646","line":""},
{"lineNum":"  647","line":"checkeddiv_uint_impl!(usize u8 u16 u32 u64);"},
{"lineNum":"  648","line":""},
{"lineNum":"  649","line":"pub trait PrimInt"},
{"lineNum":"  650","line":"    : Sized"},
{"lineNum":"  651","line":"    + Copy"},
{"lineNum":"  652","line":"    + Num + NumCast"},
{"lineNum":"  653","line":"    + Bounded"},
{"lineNum":"  654","line":"    + PartialOrd + Ord + Eq"},
{"lineNum":"  655","line":"    + Not<Output=Self>"},
{"lineNum":"  656","line":"    + BitAnd<Output=Self>"},
{"lineNum":"  657","line":"    + BitOr<Output=Self>"},
{"lineNum":"  658","line":"    + BitXor<Output=Self>"},
{"lineNum":"  659","line":"    + Shl<usize, Output=Self>"},
{"lineNum":"  660","line":"    + Shr<usize, Output=Self>"},
{"lineNum":"  661","line":"    + CheckedAdd<Output=Self>"},
{"lineNum":"  662","line":"    + CheckedSub<Output=Self>"},
{"lineNum":"  663","line":"    + CheckedMul<Output=Self>"},
{"lineNum":"  664","line":"    + CheckedDiv<Output=Self>"},
{"lineNum":"  665","line":"    + Saturating"},
{"lineNum":"  666","line":"{"},
{"lineNum":"  667","line":"    /// Returns the number of ones in the binary representation of `self`."},
{"lineNum":"  668","line":"    ///"},
{"lineNum":"  669","line":"    /// # Examples"},
{"lineNum":"  670","line":"    ///"},
{"lineNum":"  671","line":"    /// ```"},
{"lineNum":"  672","line":"    /// use num::traits::PrimInt;"},
{"lineNum":"  673","line":"    ///"},
{"lineNum":"  674","line":"    /// let n = 0b01001100u8;"},
{"lineNum":"  675","line":"    ///"},
{"lineNum":"  676","line":"    /// assert_eq!(n.count_ones(), 3);"},
{"lineNum":"  677","line":"    /// ```"},
{"lineNum":"  678","line":"    fn count_ones(self) -> u32;"},
{"lineNum":"  679","line":""},
{"lineNum":"  680","line":"    /// Returns the number of zeros in the binary representation of `self`."},
{"lineNum":"  681","line":"    ///"},
{"lineNum":"  682","line":"    /// # Examples"},
{"lineNum":"  683","line":"    ///"},
{"lineNum":"  684","line":"    /// ```"},
{"lineNum":"  685","line":"    /// use num::traits::PrimInt;"},
{"lineNum":"  686","line":"    ///"},
{"lineNum":"  687","line":"    /// let n = 0b01001100u8;"},
{"lineNum":"  688","line":"    ///"},
{"lineNum":"  689","line":"    /// assert_eq!(n.count_zeros(), 5);"},
{"lineNum":"  690","line":"    /// ```"},
{"lineNum":"  691","line":"    fn count_zeros(self) -> u32;"},
{"lineNum":"  692","line":""},
{"lineNum":"  693","line":"    /// Returns the number of leading zeros in the binary representation"},
{"lineNum":"  694","line":"    /// of `self`."},
{"lineNum":"  695","line":"    ///"},
{"lineNum":"  696","line":"    /// # Examples"},
{"lineNum":"  697","line":"    ///"},
{"lineNum":"  698","line":"    /// ```"},
{"lineNum":"  699","line":"    /// use num::traits::PrimInt;"},
{"lineNum":"  700","line":"    ///"},
{"lineNum":"  701","line":"    /// let n = 0b0101000u16;"},
{"lineNum":"  702","line":"    ///"},
{"lineNum":"  703","line":"    /// assert_eq!(n.leading_zeros(), 10);"},
{"lineNum":"  704","line":"    /// ```"},
{"lineNum":"  705","line":"    fn leading_zeros(self) -> u32;"},
{"lineNum":"  706","line":""},
{"lineNum":"  707","line":"    /// Returns the number of trailing zeros in the binary representation"},
{"lineNum":"  708","line":"    /// of `self`."},
{"lineNum":"  709","line":"    ///"},
{"lineNum":"  710","line":"    /// # Examples"},
{"lineNum":"  711","line":"    ///"},
{"lineNum":"  712","line":"    /// ```"},
{"lineNum":"  713","line":"    /// use num::traits::PrimInt;"},
{"lineNum":"  714","line":"    ///"},
{"lineNum":"  715","line":"    /// let n = 0b0101000u16;"},
{"lineNum":"  716","line":"    ///"},
{"lineNum":"  717","line":"    /// assert_eq!(n.trailing_zeros(), 3);"},
{"lineNum":"  718","line":"    /// ```"},
{"lineNum":"  719","line":"    fn trailing_zeros(self) -> u32;"},
{"lineNum":"  720","line":""},
{"lineNum":"  721","line":"    /// Shifts the bits to the left by a specified amount amount, `n`, wrapping"},
{"lineNum":"  722","line":"    /// the truncated bits to the end of the resulting integer."},
{"lineNum":"  723","line":"    ///"},
{"lineNum":"  724","line":"    /// # Examples"},
{"lineNum":"  725","line":"    ///"},
{"lineNum":"  726","line":"    /// ```"},
{"lineNum":"  727","line":"    /// use num::traits::PrimInt;"},
{"lineNum":"  728","line":"    ///"},
{"lineNum":"  729","line":"    /// let n = 0x0123456789ABCDEFu64;"},
{"lineNum":"  730","line":"    /// let m = 0x3456789ABCDEF012u64;"},
{"lineNum":"  731","line":"    ///"},
{"lineNum":"  732","line":"    /// assert_eq!(n.rotate_left(12), m);"},
{"lineNum":"  733","line":"    /// ```"},
{"lineNum":"  734","line":"    fn rotate_left(self, n: u32) -> Self;"},
{"lineNum":"  735","line":""},
{"lineNum":"  736","line":"    /// Shifts the bits to the right by a specified amount amount, `n`, wrapping"},
{"lineNum":"  737","line":"    /// the truncated bits to the beginning of the resulting integer."},
{"lineNum":"  738","line":"    ///"},
{"lineNum":"  739","line":"    /// # Examples"},
{"lineNum":"  740","line":"    ///"},
{"lineNum":"  741","line":"    /// ```"},
{"lineNum":"  742","line":"    /// use num::traits::PrimInt;"},
{"lineNum":"  743","line":"    ///"},
{"lineNum":"  744","line":"    /// let n = 0x0123456789ABCDEFu64;"},
{"lineNum":"  745","line":"    /// let m = 0xDEF0123456789ABCu64;"},
{"lineNum":"  746","line":"    ///"},
{"lineNum":"  747","line":"    /// assert_eq!(n.rotate_right(12), m);"},
{"lineNum":"  748","line":"    /// ```"},
{"lineNum":"  749","line":"    fn rotate_right(self, n: u32) -> Self;"},
{"lineNum":"  750","line":""},
{"lineNum":"  751","line":"    /// Reverses the byte order of the integer."},
{"lineNum":"  752","line":"    ///"},
{"lineNum":"  753","line":"    /// # Examples"},
{"lineNum":"  754","line":"    ///"},
{"lineNum":"  755","line":"    /// ```"},
{"lineNum":"  756","line":"    /// use num::traits::PrimInt;"},
{"lineNum":"  757","line":"    ///"},
{"lineNum":"  758","line":"    /// let n = 0x0123456789ABCDEFu64;"},
{"lineNum":"  759","line":"    /// let m = 0xEFCDAB8967452301u64;"},
{"lineNum":"  760","line":"    ///"},
{"lineNum":"  761","line":"    /// assert_eq!(n.swap_bytes(), m);"},
{"lineNum":"  762","line":"    /// ```"},
{"lineNum":"  763","line":"    fn swap_bytes(self) -> Self;"},
{"lineNum":"  764","line":""},
{"lineNum":"  765","line":"    /// Convert an integer from big endian to the target\'s endianness."},
{"lineNum":"  766","line":"    ///"},
{"lineNum":"  767","line":"    /// On big endian this is a no-op. On little endian the bytes are swapped."},
{"lineNum":"  768","line":"    ///"},
{"lineNum":"  769","line":"    /// # Examples"},
{"lineNum":"  770","line":"    ///"},
{"lineNum":"  771","line":"    /// ```"},
{"lineNum":"  772","line":"    /// use num::traits::PrimInt;"},
{"lineNum":"  773","line":"    ///"},
{"lineNum":"  774","line":"    /// let n = 0x0123456789ABCDEFu64;"},
{"lineNum":"  775","line":"    ///"},
{"lineNum":"  776","line":"    /// if cfg!(target_endian = \"big\") {"},
{"lineNum":"  777","line":"    ///     assert_eq!(u64::from_be(n), n)"},
{"lineNum":"  778","line":"    /// } else {"},
{"lineNum":"  779","line":"    ///     assert_eq!(u64::from_be(n), n.swap_bytes())"},
{"lineNum":"  780","line":"    /// }"},
{"lineNum":"  781","line":"    /// ```"},
{"lineNum":"  782","line":"    fn from_be(x: Self) -> Self;"},
{"lineNum":"  783","line":""},
{"lineNum":"  784","line":"    /// Convert an integer from little endian to the target\'s endianness."},
{"lineNum":"  785","line":"    ///"},
{"lineNum":"  786","line":"    /// On little endian this is a no-op. On big endian the bytes are swapped."},
{"lineNum":"  787","line":"    ///"},
{"lineNum":"  788","line":"    /// # Examples"},
{"lineNum":"  789","line":"    ///"},
{"lineNum":"  790","line":"    /// ```"},
{"lineNum":"  791","line":"    /// use num::traits::PrimInt;"},
{"lineNum":"  792","line":"    ///"},
{"lineNum":"  793","line":"    /// let n = 0x0123456789ABCDEFu64;"},
{"lineNum":"  794","line":"    ///"},
{"lineNum":"  795","line":"    /// if cfg!(target_endian = \"little\") {"},
{"lineNum":"  796","line":"    ///     assert_eq!(u64::from_le(n), n)"},
{"lineNum":"  797","line":"    /// } else {"},
{"lineNum":"  798","line":"    ///     assert_eq!(u64::from_le(n), n.swap_bytes())"},
{"lineNum":"  799","line":"    /// }"},
{"lineNum":"  800","line":"    /// ```"},
{"lineNum":"  801","line":"    fn from_le(x: Self) -> Self;"},
{"lineNum":"  802","line":""},
{"lineNum":"  803","line":"    /// Convert `self` to big endian from the target\'s endianness."},
{"lineNum":"  804","line":"    ///"},
{"lineNum":"  805","line":"    /// On big endian this is a no-op. On little endian the bytes are swapped."},
{"lineNum":"  806","line":"    ///"},
{"lineNum":"  807","line":"    /// # Examples"},
{"lineNum":"  808","line":"    ///"},
{"lineNum":"  809","line":"    /// ```"},
{"lineNum":"  810","line":"    /// use num::traits::PrimInt;"},
{"lineNum":"  811","line":"    ///"},
{"lineNum":"  812","line":"    /// let n = 0x0123456789ABCDEFu64;"},
{"lineNum":"  813","line":"    ///"},
{"lineNum":"  814","line":"    /// if cfg!(target_endian = \"big\") {"},
{"lineNum":"  815","line":"    ///     assert_eq!(n.to_be(), n)"},
{"lineNum":"  816","line":"    /// } else {"},
{"lineNum":"  817","line":"    ///     assert_eq!(n.to_be(), n.swap_bytes())"},
{"lineNum":"  818","line":"    /// }"},
{"lineNum":"  819","line":"    /// ```"},
{"lineNum":"  820","line":"    fn to_be(self) -> Self;"},
{"lineNum":"  821","line":""},
{"lineNum":"  822","line":"    /// Convert `self` to little endian from the target\'s endianness."},
{"lineNum":"  823","line":"    ///"},
{"lineNum":"  824","line":"    /// On little endian this is a no-op. On big endian the bytes are swapped."},
{"lineNum":"  825","line":"    ///"},
{"lineNum":"  826","line":"    /// # Examples"},
{"lineNum":"  827","line":"    ///"},
{"lineNum":"  828","line":"    /// ```"},
{"lineNum":"  829","line":"    /// use num::traits::PrimInt;"},
{"lineNum":"  830","line":"    ///"},
{"lineNum":"  831","line":"    /// let n = 0x0123456789ABCDEFu64;"},
{"lineNum":"  832","line":"    ///"},
{"lineNum":"  833","line":"    /// if cfg!(target_endian = \"little\") {"},
{"lineNum":"  834","line":"    ///     assert_eq!(n.to_le(), n)"},
{"lineNum":"  835","line":"    /// } else {"},
{"lineNum":"  836","line":"    ///     assert_eq!(n.to_le(), n.swap_bytes())"},
{"lineNum":"  837","line":"    /// }"},
{"lineNum":"  838","line":"    /// ```"},
{"lineNum":"  839","line":"    fn to_le(self) -> Self;"},
{"lineNum":"  840","line":""},
{"lineNum":"  841","line":"    /// Raises self to the power of `exp`, using exponentiation by squaring."},
{"lineNum":"  842","line":"    ///"},
{"lineNum":"  843","line":"    /// # Examples"},
{"lineNum":"  844","line":"    ///"},
{"lineNum":"  845","line":"    /// ```"},
{"lineNum":"  846","line":"    /// use num::traits::PrimInt;"},
{"lineNum":"  847","line":"    ///"},
{"lineNum":"  848","line":"    /// assert_eq!(2i32.pow(4), 16);"},
{"lineNum":"  849","line":"    /// ```"},
{"lineNum":"  850","line":"    fn pow(self, mut exp: u32) -> Self;"},
{"lineNum":"  851","line":"}"},
{"lineNum":"  852","line":""},
{"lineNum":"  853","line":"macro_rules! prim_int_impl {"},
{"lineNum":"  854","line":"    ($($T:ty)*) => ($("},
{"lineNum":"  855","line":"        impl PrimInt for $T {"},
{"lineNum":"  856","line":"            fn count_ones(self) -> u32 {"},
{"lineNum":"  857","line":"                <$T>::count_ones(self)"},
{"lineNum":"  858","line":"            }"},
{"lineNum":"  859","line":""},
{"lineNum":"  860","line":"            fn count_zeros(self) -> u32 {"},
{"lineNum":"  861","line":"                <$T>::count_zeros(self)"},
{"lineNum":"  862","line":"            }"},
{"lineNum":"  863","line":""},
{"lineNum":"  864","line":"            fn leading_zeros(self) -> u32 {"},
{"lineNum":"  865","line":"                <$T>::leading_zeros(self)"},
{"lineNum":"  866","line":"            }"},
{"lineNum":"  867","line":""},
{"lineNum":"  868","line":"            fn trailing_zeros(self) -> u32 {"},
{"lineNum":"  869","line":"                <$T>::trailing_zeros(self)"},
{"lineNum":"  870","line":"            }"},
{"lineNum":"  871","line":""},
{"lineNum":"  872","line":"            fn rotate_left(self, n: u32) -> Self {"},
{"lineNum":"  873","line":"                <$T>::rotate_left(self, n)"},
{"lineNum":"  874","line":"            }"},
{"lineNum":"  875","line":""},
{"lineNum":"  876","line":"            fn rotate_right(self, n: u32) -> Self {"},
{"lineNum":"  877","line":"                <$T>::rotate_right(self, n)"},
{"lineNum":"  878","line":"            }"},
{"lineNum":"  879","line":""},
{"lineNum":"  880","line":"            fn swap_bytes(self) -> Self {"},
{"lineNum":"  881","line":"                <$T>::swap_bytes(self)"},
{"lineNum":"  882","line":"            }"},
{"lineNum":"  883","line":""},
{"lineNum":"  884","line":"            fn from_be(x: Self) -> Self {"},
{"lineNum":"  885","line":"                <$T>::from_be(x)"},
{"lineNum":"  886","line":"            }"},
{"lineNum":"  887","line":""},
{"lineNum":"  888","line":"            fn from_le(x: Self) -> Self {"},
{"lineNum":"  889","line":"                <$T>::from_le(x)"},
{"lineNum":"  890","line":"            }"},
{"lineNum":"  891","line":""},
{"lineNum":"  892","line":"            fn to_be(self) -> Self {"},
{"lineNum":"  893","line":"                <$T>::to_be(self)"},
{"lineNum":"  894","line":"            }"},
{"lineNum":"  895","line":""},
{"lineNum":"  896","line":"            fn to_le(self) -> Self {"},
{"lineNum":"  897","line":"                <$T>::to_le(self)"},
{"lineNum":"  898","line":"            }"},
{"lineNum":"  899","line":""},
{"lineNum":"  900","line":"            fn pow(self, exp: u32) -> Self {"},
{"lineNum":"  901","line":"                <$T>::pow(self, exp)"},
{"lineNum":"  902","line":"            }"},
{"lineNum":"  903","line":"        }"},
{"lineNum":"  904","line":"    )*)"},
{"lineNum":"  905","line":"}"},
{"lineNum":"  906","line":""},
{"lineNum":"  907","line":"prim_int_impl!(u8 u16 u32 u64 usize i8 i16 i32 i64 isize);"},
{"lineNum":"  908","line":""},
{"lineNum":"  909","line":"/// A generic trait for converting a value to a number."},
{"lineNum":"  910","line":"pub trait ToPrimitive {"},
{"lineNum":"  911","line":"    /// Converts the value of `self` to an `isize`."},
{"lineNum":"  912","line":"    #[inline]"},
{"lineNum":"  913","line":"    fn to_isize(&self) -> Option<isize> {"},
{"lineNum":"  914","line":"        self.to_i64().and_then(|x| x.to_isize())"},
{"lineNum":"  915","line":"    }"},
{"lineNum":"  916","line":""},
{"lineNum":"  917","line":"    /// Converts the value of `self` to an `i8`."},
{"lineNum":"  918","line":"    #[inline]"},
{"lineNum":"  919","line":"    fn to_i8(&self) -> Option<i8> {"},
{"lineNum":"  920","line":"        self.to_i64().and_then(|x| x.to_i8())"},
{"lineNum":"  921","line":"    }"},
{"lineNum":"  922","line":""},
{"lineNum":"  923","line":"    /// Converts the value of `self` to an `i16`."},
{"lineNum":"  924","line":"    #[inline]"},
{"lineNum":"  925","line":"    fn to_i16(&self) -> Option<i16> {"},
{"lineNum":"  926","line":"        self.to_i64().and_then(|x| x.to_i16())"},
{"lineNum":"  927","line":"    }"},
{"lineNum":"  928","line":""},
{"lineNum":"  929","line":"    /// Converts the value of `self` to an `i32`."},
{"lineNum":"  930","line":"    #[inline]"},
{"lineNum":"  931","line":"    fn to_i32(&self) -> Option<i32> {"},
{"lineNum":"  932","line":"        self.to_i64().and_then(|x| x.to_i32())"},
{"lineNum":"  933","line":"    }"},
{"lineNum":"  934","line":""},
{"lineNum":"  935","line":"    /// Converts the value of `self` to an `i64`."},
{"lineNum":"  936","line":"    fn to_i64(&self) -> Option<i64>;"},
{"lineNum":"  937","line":""},
{"lineNum":"  938","line":"    /// Converts the value of `self` to a `usize`."},
{"lineNum":"  939","line":"    #[inline]"},
{"lineNum":"  940","line":"    fn to_usize(&self) -> Option<usize> {"},
{"lineNum":"  941","line":"        self.to_u64().and_then(|x| x.to_usize())"},
{"lineNum":"  942","line":"    }"},
{"lineNum":"  943","line":""},
{"lineNum":"  944","line":"    /// Converts the value of `self` to an `u8`."},
{"lineNum":"  945","line":"    #[inline]"},
{"lineNum":"  946","line":"    fn to_u8(&self) -> Option<u8> {"},
{"lineNum":"  947","line":"        self.to_u64().and_then(|x| x.to_u8())"},
{"lineNum":"  948","line":"    }"},
{"lineNum":"  949","line":""},
{"lineNum":"  950","line":"    /// Converts the value of `self` to an `u16`."},
{"lineNum":"  951","line":"    #[inline]"},
{"lineNum":"  952","line":"    fn to_u16(&self) -> Option<u16> {"},
{"lineNum":"  953","line":"        self.to_u64().and_then(|x| x.to_u16())"},
{"lineNum":"  954","line":"    }"},
{"lineNum":"  955","line":""},
{"lineNum":"  956","line":"    /// Converts the value of `self` to an `u32`."},
{"lineNum":"  957","line":"    #[inline]"},
{"lineNum":"  958","line":"    fn to_u32(&self) -> Option<u32> {"},
{"lineNum":"  959","line":"        self.to_u64().and_then(|x| x.to_u32())"},
{"lineNum":"  960","line":"    }"},
{"lineNum":"  961","line":""},
{"lineNum":"  962","line":"    /// Converts the value of `self` to an `u64`."},
{"lineNum":"  963","line":"    #[inline]"},
{"lineNum":"  964","line":"    fn to_u64(&self) -> Option<u64>;"},
{"lineNum":"  965","line":""},
{"lineNum":"  966","line":"    /// Converts the value of `self` to an `f32`."},
{"lineNum":"  967","line":"    #[inline]"},
{"lineNum":"  968","line":"    fn to_f32(&self) -> Option<f32> {"},
{"lineNum":"  969","line":"        self.to_f64().and_then(|x| x.to_f32())"},
{"lineNum":"  970","line":"    }"},
{"lineNum":"  971","line":""},
{"lineNum":"  972","line":"    /// Converts the value of `self` to an `f64`."},
{"lineNum":"  973","line":"    #[inline]"},
{"lineNum":"  974","line":"    fn to_f64(&self) -> Option<f64> {"},
{"lineNum":"  975","line":"        self.to_i64().and_then(|x| x.to_f64())"},
{"lineNum":"  976","line":"    }"},
{"lineNum":"  977","line":"}"},
{"lineNum":"  978","line":""},
{"lineNum":"  979","line":"macro_rules! impl_to_primitive_int_to_int {"},
{"lineNum":"  980","line":"    ($SrcT:ty, $DstT:ty, $slf:expr) => ("},
{"lineNum":"  981","line":"        {"},
{"lineNum":"  982","line":"            if size_of::<$SrcT>() <= size_of::<$DstT>() {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  983","line":"                Some($slf as $DstT)"},
{"lineNum":"  984","line":"            } else {"},
{"lineNum":"  985","line":"                let n = $slf as i64;"},
{"lineNum":"  986","line":"                let min_value: $DstT = Bounded::min_value();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  987","line":"                let max_value: $DstT = Bounded::max_value();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  988","line":"                if min_value as i64 <= n && n <= max_value as i64 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  989","line":"                    Some($slf as $DstT)"},
{"lineNum":"  990","line":"                } else {"},
{"lineNum":"  991","line":"                    None"},
{"lineNum":"  992","line":"                }"},
{"lineNum":"  993","line":"            }"},
{"lineNum":"  994","line":"        }"},
{"lineNum":"  995","line":"    )"},
{"lineNum":"  996","line":"}"},
{"lineNum":"  997","line":""},
{"lineNum":"  998","line":"macro_rules! impl_to_primitive_int_to_uint {"},
{"lineNum":"  999","line":"    ($SrcT:ty, $DstT:ty, $slf:expr) => ("},
{"lineNum":" 1000","line":"        {"},
{"lineNum":" 1001","line":"            let zero: $SrcT = Zero::zero();"},
{"lineNum":" 1002","line":"            let max_value: $DstT = Bounded::max_value();"},
{"lineNum":" 1003","line":"            if zero <= $slf && $slf as u64 <= max_value as u64 {"},
{"lineNum":" 1004","line":"                Some($slf as $DstT)"},
{"lineNum":" 1005","line":"            } else {"},
{"lineNum":" 1006","line":"                None"},
{"lineNum":" 1007","line":"            }"},
{"lineNum":" 1008","line":"        }"},
{"lineNum":" 1009","line":"    )"},
{"lineNum":" 1010","line":"}"},
{"lineNum":" 1011","line":""},
{"lineNum":" 1012","line":"macro_rules! impl_to_primitive_int {"},
{"lineNum":" 1013","line":"    ($T:ty) => ("},
{"lineNum":" 1014","line":"        impl ToPrimitive for $T {"},
{"lineNum":" 1015","line":"            #[inline]"},
{"lineNum":" 1016","line":"            fn to_isize(&self) -> Option<isize> { impl_to_primitive_int_to_int!($T, isize, *self) }"},
{"lineNum":" 1017","line":"            #[inline]"},
{"lineNum":" 1018","line":"            fn to_i8(&self) -> Option<i8> { impl_to_primitive_int_to_int!($T, i8, *self) }"},
{"lineNum":" 1019","line":"            #[inline]"},
{"lineNum":" 1020","line":"            fn to_i16(&self) -> Option<i16> { impl_to_primitive_int_to_int!($T, i16, *self) }"},
{"lineNum":" 1021","line":"            #[inline]"},
{"lineNum":" 1022","line":"            fn to_i32(&self) -> Option<i32> { impl_to_primitive_int_to_int!($T, i32, *self) }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1023","line":"            #[inline]"},
{"lineNum":" 1024","line":"            fn to_i64(&self) -> Option<i64> { impl_to_primitive_int_to_int!($T, i64, *self) }"},
{"lineNum":" 1025","line":""},
{"lineNum":" 1026","line":"            #[inline]"},
{"lineNum":" 1027","line":"            fn to_usize(&self) -> Option<usize> { impl_to_primitive_int_to_uint!($T, usize, *self) }"},
{"lineNum":" 1028","line":"            #[inline]"},
{"lineNum":" 1029","line":"            fn to_u8(&self) -> Option<u8> { impl_to_primitive_int_to_uint!($T, u8, *self) }"},
{"lineNum":" 1030","line":"            #[inline]"},
{"lineNum":" 1031","line":"            fn to_u16(&self) -> Option<u16> { impl_to_primitive_int_to_uint!($T, u16, *self) }"},
{"lineNum":" 1032","line":"            #[inline]"},
{"lineNum":" 1033","line":"            fn to_u32(&self) -> Option<u32> { impl_to_primitive_int_to_uint!($T, u32, *self) }"},
{"lineNum":" 1034","line":"            #[inline]"},
{"lineNum":" 1035","line":"            fn to_u64(&self) -> Option<u64> { impl_to_primitive_int_to_uint!($T, u64, *self) }"},
{"lineNum":" 1036","line":""},
{"lineNum":" 1037","line":"            #[inline]"},
{"lineNum":" 1038","line":"            fn to_f32(&self) -> Option<f32> { Some(*self as f32) }"},
{"lineNum":" 1039","line":"            #[inline]"},
{"lineNum":" 1040","line":"            fn to_f64(&self) -> Option<f64> { Some(*self as f64) }"},
{"lineNum":" 1041","line":"        }"},
{"lineNum":" 1042","line":"    )"},
{"lineNum":" 1043","line":"}"},
{"lineNum":" 1044","line":""},
{"lineNum":" 1045","line":"impl_to_primitive_int! { isize }"},
{"lineNum":" 1046","line":"impl_to_primitive_int! { i8 }"},
{"lineNum":" 1047","line":"impl_to_primitive_int! { i16 }"},
{"lineNum":" 1048","line":"impl_to_primitive_int! { i32 }"},
{"lineNum":" 1049","line":"impl_to_primitive_int! { i64 }"},
{"lineNum":" 1050","line":""},
{"lineNum":" 1051","line":"macro_rules! impl_to_primitive_uint_to_int {"},
{"lineNum":" 1052","line":"    ($DstT:ty, $slf:expr) => ("},
{"lineNum":" 1053","line":"        {"},
{"lineNum":" 1054","line":"            let max_value: $DstT = Bounded::max_value();"},
{"lineNum":" 1055","line":"            if $slf as u64 <= max_value as u64 {"},
{"lineNum":" 1056","line":"                Some($slf as $DstT)"},
{"lineNum":" 1057","line":"            } else {"},
{"lineNum":" 1058","line":"                None"},
{"lineNum":" 1059","line":"            }"},
{"lineNum":" 1060","line":"        }"},
{"lineNum":" 1061","line":"    )"},
{"lineNum":" 1062","line":"}"},
{"lineNum":" 1063","line":""},
{"lineNum":" 1064","line":"macro_rules! impl_to_primitive_uint_to_uint {"},
{"lineNum":" 1065","line":"    ($SrcT:ty, $DstT:ty, $slf:expr) => ("},
{"lineNum":" 1066","line":"        {"},
{"lineNum":" 1067","line":"            if size_of::<$SrcT>() <= size_of::<$DstT>() {"},
{"lineNum":" 1068","line":"                Some($slf as $DstT)"},
{"lineNum":" 1069","line":"            } else {"},
{"lineNum":" 1070","line":"                let zero: $SrcT = Zero::zero();"},
{"lineNum":" 1071","line":"                let max_value: $DstT = Bounded::max_value();"},
{"lineNum":" 1072","line":"                if zero <= $slf && $slf as u64 <= max_value as u64 {"},
{"lineNum":" 1073","line":"                    Some($slf as $DstT)"},
{"lineNum":" 1074","line":"                } else {"},
{"lineNum":" 1075","line":"                    None"},
{"lineNum":" 1076","line":"                }"},
{"lineNum":" 1077","line":"            }"},
{"lineNum":" 1078","line":"        }"},
{"lineNum":" 1079","line":"    )"},
{"lineNum":" 1080","line":"}"},
{"lineNum":" 1081","line":""},
{"lineNum":" 1082","line":"macro_rules! impl_to_primitive_uint {"},
{"lineNum":" 1083","line":"    ($T:ty) => ("},
{"lineNum":" 1084","line":"        impl ToPrimitive for $T {"},
{"lineNum":" 1085","line":"            #[inline]"},
{"lineNum":" 1086","line":"            fn to_isize(&self) -> Option<isize> { impl_to_primitive_uint_to_int!(isize, *self) }"},
{"lineNum":" 1087","line":"            #[inline]"},
{"lineNum":" 1088","line":"            fn to_i8(&self) -> Option<i8> { impl_to_primitive_uint_to_int!(i8, *self) }"},
{"lineNum":" 1089","line":"            #[inline]"},
{"lineNum":" 1090","line":"            fn to_i16(&self) -> Option<i16> { impl_to_primitive_uint_to_int!(i16, *self) }"},
{"lineNum":" 1091","line":"            #[inline]"},
{"lineNum":" 1092","line":"            fn to_i32(&self) -> Option<i32> { impl_to_primitive_uint_to_int!(i32, *self) }"},
{"lineNum":" 1093","line":"            #[inline]"},
{"lineNum":" 1094","line":"            fn to_i64(&self) -> Option<i64> { impl_to_primitive_uint_to_int!(i64, *self) }"},
{"lineNum":" 1095","line":""},
{"lineNum":" 1096","line":"            #[inline]"},
{"lineNum":" 1097","line":"            fn to_usize(&self) -> Option<usize> {"},
{"lineNum":" 1098","line":"                impl_to_primitive_uint_to_uint!($T, usize, *self)"},
{"lineNum":" 1099","line":"            }"},
{"lineNum":" 1100","line":"            #[inline]"},
{"lineNum":" 1101","line":"            fn to_u8(&self) -> Option<u8> { impl_to_primitive_uint_to_uint!($T, u8, *self) }"},
{"lineNum":" 1102","line":"            #[inline]"},
{"lineNum":" 1103","line":"            fn to_u16(&self) -> Option<u16> { impl_to_primitive_uint_to_uint!($T, u16, *self) }"},
{"lineNum":" 1104","line":"            #[inline]"},
{"lineNum":" 1105","line":"            fn to_u32(&self) -> Option<u32> { impl_to_primitive_uint_to_uint!($T, u32, *self) }"},
{"lineNum":" 1106","line":"            #[inline]"},
{"lineNum":" 1107","line":"            fn to_u64(&self) -> Option<u64> { impl_to_primitive_uint_to_uint!($T, u64, *self) }"},
{"lineNum":" 1108","line":""},
{"lineNum":" 1109","line":"            #[inline]"},
{"lineNum":" 1110","line":"            fn to_f32(&self) -> Option<f32> { Some(*self as f32) }"},
{"lineNum":" 1111","line":"            #[inline]"},
{"lineNum":" 1112","line":"            fn to_f64(&self) -> Option<f64> { Some(*self as f64) }"},
{"lineNum":" 1113","line":"        }"},
{"lineNum":" 1114","line":"    )"},
{"lineNum":" 1115","line":"}"},
{"lineNum":" 1116","line":""},
{"lineNum":" 1117","line":"impl_to_primitive_uint! { usize }"},
{"lineNum":" 1118","line":"impl_to_primitive_uint! { u8 }"},
{"lineNum":" 1119","line":"impl_to_primitive_uint! { u16 }"},
{"lineNum":" 1120","line":"impl_to_primitive_uint! { u32 }"},
{"lineNum":" 1121","line":"impl_to_primitive_uint! { u64 }"},
{"lineNum":" 1122","line":""},
{"lineNum":" 1123","line":"macro_rules! impl_to_primitive_float_to_float {"},
{"lineNum":" 1124","line":"    ($SrcT:ident, $DstT:ident, $slf:expr) => ("},
{"lineNum":" 1125","line":"        if size_of::<$SrcT>() <= size_of::<$DstT>() {"},
{"lineNum":" 1126","line":"            Some($slf as $DstT)"},
{"lineNum":" 1127","line":"        } else {"},
{"lineNum":" 1128","line":"            let n = $slf as f64;"},
{"lineNum":" 1129","line":"            let max_value: $SrcT = ::std::$SrcT::MAX;"},
{"lineNum":" 1130","line":"            if -max_value as f64 <= n && n <= max_value as f64 {"},
{"lineNum":" 1131","line":"                Some($slf as $DstT)"},
{"lineNum":" 1132","line":"            } else {"},
{"lineNum":" 1133","line":"                None"},
{"lineNum":" 1134","line":"            }"},
{"lineNum":" 1135","line":"        }"},
{"lineNum":" 1136","line":"    )"},
{"lineNum":" 1137","line":"}"},
{"lineNum":" 1138","line":""},
{"lineNum":" 1139","line":"macro_rules! impl_to_primitive_float {"},
{"lineNum":" 1140","line":"    ($T:ident) => ("},
{"lineNum":" 1141","line":"        impl ToPrimitive for $T {"},
{"lineNum":" 1142","line":"            #[inline]"},
{"lineNum":" 1143","line":"            fn to_isize(&self) -> Option<isize> { Some(*self as isize) }"},
{"lineNum":" 1144","line":"            #[inline]"},
{"lineNum":" 1145","line":"            fn to_i8(&self) -> Option<i8> { Some(*self as i8) }"},
{"lineNum":" 1146","line":"            #[inline]"},
{"lineNum":" 1147","line":"            fn to_i16(&self) -> Option<i16> { Some(*self as i16) }"},
{"lineNum":" 1148","line":"            #[inline]"},
{"lineNum":" 1149","line":"            fn to_i32(&self) -> Option<i32> { Some(*self as i32) }"},
{"lineNum":" 1150","line":"            #[inline]"},
{"lineNum":" 1151","line":"            fn to_i64(&self) -> Option<i64> { Some(*self as i64) }"},
{"lineNum":" 1152","line":""},
{"lineNum":" 1153","line":"            #[inline]"},
{"lineNum":" 1154","line":"            fn to_usize(&self) -> Option<usize> { Some(*self as usize) }"},
{"lineNum":" 1155","line":"            #[inline]"},
{"lineNum":" 1156","line":"            fn to_u8(&self) -> Option<u8> { Some(*self as u8) }"},
{"lineNum":" 1157","line":"            #[inline]"},
{"lineNum":" 1158","line":"            fn to_u16(&self) -> Option<u16> { Some(*self as u16) }"},
{"lineNum":" 1159","line":"            #[inline]"},
{"lineNum":" 1160","line":"            fn to_u32(&self) -> Option<u32> { Some(*self as u32) }"},
{"lineNum":" 1161","line":"            #[inline]"},
{"lineNum":" 1162","line":"            fn to_u64(&self) -> Option<u64> { Some(*self as u64) }"},
{"lineNum":" 1163","line":""},
{"lineNum":" 1164","line":"            #[inline]"},
{"lineNum":" 1165","line":"            fn to_f32(&self) -> Option<f32> { impl_to_primitive_float_to_float!($T, f32, *self) }"},
{"lineNum":" 1166","line":"            #[inline]"},
{"lineNum":" 1167","line":"            fn to_f64(&self) -> Option<f64> { impl_to_primitive_float_to_float!($T, f64, *self) }"},
{"lineNum":" 1168","line":"        }"},
{"lineNum":" 1169","line":"    )"},
{"lineNum":" 1170","line":"}"},
{"lineNum":" 1171","line":""},
{"lineNum":" 1172","line":"impl_to_primitive_float! { f32 }"},
{"lineNum":" 1173","line":"impl_to_primitive_float! { f64 }"},
{"lineNum":" 1174","line":""},
{"lineNum":" 1175","line":"/// A generic trait for converting a number to a value."},
{"lineNum":" 1176","line":"pub trait FromPrimitive: Sized {"},
{"lineNum":" 1177","line":"    /// Convert an `isize` to return an optional value of this type. If the"},
{"lineNum":" 1178","line":"    /// value cannot be represented by this value, the `None` is returned."},
{"lineNum":" 1179","line":"    #[inline]"},
{"lineNum":" 1180","line":"    fn from_isize(n: isize) -> Option<Self> {"},
{"lineNum":" 1181","line":"        FromPrimitive::from_i64(n as i64)"},
{"lineNum":" 1182","line":"    }"},
{"lineNum":" 1183","line":""},
{"lineNum":" 1184","line":"    /// Convert an `i8` to return an optional value of this type. If the"},
{"lineNum":" 1185","line":"    /// type cannot be represented by this value, the `None` is returned."},
{"lineNum":" 1186","line":"    #[inline]"},
{"lineNum":" 1187","line":"    fn from_i8(n: i8) -> Option<Self> {"},
{"lineNum":" 1188","line":"        FromPrimitive::from_i64(n as i64)"},
{"lineNum":" 1189","line":"    }"},
{"lineNum":" 1190","line":""},
{"lineNum":" 1191","line":"    /// Convert an `i16` to return an optional value of this type. If the"},
{"lineNum":" 1192","line":"    /// type cannot be represented by this value, the `None` is returned."},
{"lineNum":" 1193","line":"    #[inline]"},
{"lineNum":" 1194","line":"    fn from_i16(n: i16) -> Option<Self> {"},
{"lineNum":" 1195","line":"        FromPrimitive::from_i64(n as i64)"},
{"lineNum":" 1196","line":"    }"},
{"lineNum":" 1197","line":""},
{"lineNum":" 1198","line":"    /// Convert an `i32` to return an optional value of this type. If the"},
{"lineNum":" 1199","line":"    /// type cannot be represented by this value, the `None` is returned."},
{"lineNum":" 1200","line":"    #[inline]"},
{"lineNum":" 1201","line":"    fn from_i32(n: i32) -> Option<Self> {"},
{"lineNum":" 1202","line":"        FromPrimitive::from_i64(n as i64)"},
{"lineNum":" 1203","line":"    }"},
{"lineNum":" 1204","line":""},
{"lineNum":" 1205","line":"    /// Convert an `i64` to return an optional value of this type. If the"},
{"lineNum":" 1206","line":"    /// type cannot be represented by this value, the `None` is returned."},
{"lineNum":" 1207","line":"    fn from_i64(n: i64) -> Option<Self>;"},
{"lineNum":" 1208","line":""},
{"lineNum":" 1209","line":"    /// Convert a `usize` to return an optional value of this type. If the"},
{"lineNum":" 1210","line":"    /// type cannot be represented by this value, the `None` is returned."},
{"lineNum":" 1211","line":"    #[inline]"},
{"lineNum":" 1212","line":"    fn from_usize(n: usize) -> Option<Self> {"},
{"lineNum":" 1213","line":"        FromPrimitive::from_u64(n as u64)"},
{"lineNum":" 1214","line":"    }"},
{"lineNum":" 1215","line":""},
{"lineNum":" 1216","line":"    /// Convert an `u8` to return an optional value of this type. If the"},
{"lineNum":" 1217","line":"    /// type cannot be represented by this value, the `None` is returned."},
{"lineNum":" 1218","line":"    #[inline]"},
{"lineNum":" 1219","line":"    fn from_u8(n: u8) -> Option<Self> {"},
{"lineNum":" 1220","line":"        FromPrimitive::from_u64(n as u64)"},
{"lineNum":" 1221","line":"    }"},
{"lineNum":" 1222","line":""},
{"lineNum":" 1223","line":"    /// Convert an `u16` to return an optional value of this type. If the"},
{"lineNum":" 1224","line":"    /// type cannot be represented by this value, the `None` is returned."},
{"lineNum":" 1225","line":"    #[inline]"},
{"lineNum":" 1226","line":"    fn from_u16(n: u16) -> Option<Self> {"},
{"lineNum":" 1227","line":"        FromPrimitive::from_u64(n as u64)"},
{"lineNum":" 1228","line":"    }"},
{"lineNum":" 1229","line":""},
{"lineNum":" 1230","line":"    /// Convert an `u32` to return an optional value of this type. If the"},
{"lineNum":" 1231","line":"    /// type cannot be represented by this value, the `None` is returned."},
{"lineNum":" 1232","line":"    #[inline]"},
{"lineNum":" 1233","line":"    fn from_u32(n: u32) -> Option<Self> {"},
{"lineNum":" 1234","line":"        FromPrimitive::from_u64(n as u64)"},
{"lineNum":" 1235","line":"    }"},
{"lineNum":" 1236","line":""},
{"lineNum":" 1237","line":"    /// Convert an `u64` to return an optional value of this type. If the"},
{"lineNum":" 1238","line":"    /// type cannot be represented by this value, the `None` is returned."},
{"lineNum":" 1239","line":"    fn from_u64(n: u64) -> Option<Self>;"},
{"lineNum":" 1240","line":""},
{"lineNum":" 1241","line":"    /// Convert a `f32` to return an optional value of this type. If the"},
{"lineNum":" 1242","line":"    /// type cannot be represented by this value, the `None` is returned."},
{"lineNum":" 1243","line":"    #[inline]"},
{"lineNum":" 1244","line":"    fn from_f32(n: f32) -> Option<Self> {"},
{"lineNum":" 1245","line":"        FromPrimitive::from_f64(n as f64)"},
{"lineNum":" 1246","line":"    }"},
{"lineNum":" 1247","line":""},
{"lineNum":" 1248","line":"    /// Convert a `f64` to return an optional value of this type. If the"},
{"lineNum":" 1249","line":"    /// type cannot be represented by this value, the `None` is returned."},
{"lineNum":" 1250","line":"    #[inline]"},
{"lineNum":" 1251","line":"    fn from_f64(n: f64) -> Option<Self> {"},
{"lineNum":" 1252","line":"        FromPrimitive::from_i64(n as i64)"},
{"lineNum":" 1253","line":"    }"},
{"lineNum":" 1254","line":"}"},
{"lineNum":" 1255","line":""},
{"lineNum":" 1256","line":"macro_rules! impl_from_primitive {"},
{"lineNum":" 1257","line":"    ($T:ty, $to_ty:ident) => ("},
{"lineNum":" 1258","line":"        #[allow(deprecated)]"},
{"lineNum":" 1259","line":"        impl FromPrimitive for $T {"},
{"lineNum":" 1260","line":"            #[inline] fn from_i8(n: i8) -> Option<$T> { n.$to_ty() }"},
{"lineNum":" 1261","line":"            #[inline] fn from_i16(n: i16) -> Option<$T> { n.$to_ty() }"},
{"lineNum":" 1262","line":"            #[inline] fn from_i32(n: i32) -> Option<$T> { n.$to_ty() }"},
{"lineNum":" 1263","line":"            #[inline] fn from_i64(n: i64) -> Option<$T> { n.$to_ty() }"},
{"lineNum":" 1264","line":""},
{"lineNum":" 1265","line":"            #[inline] fn from_u8(n: u8) -> Option<$T> { n.$to_ty() }"},
{"lineNum":" 1266","line":"            #[inline] fn from_u16(n: u16) -> Option<$T> { n.$to_ty() }"},
{"lineNum":" 1267","line":"            #[inline] fn from_u32(n: u32) -> Option<$T> { n.$to_ty() }"},
{"lineNum":" 1268","line":"            #[inline] fn from_u64(n: u64) -> Option<$T> { n.$to_ty() }"},
{"lineNum":" 1269","line":""},
{"lineNum":" 1270","line":"            #[inline] fn from_f32(n: f32) -> Option<$T> { n.$to_ty() }"},
{"lineNum":" 1271","line":"            #[inline] fn from_f64(n: f64) -> Option<$T> { n.$to_ty() }"},
{"lineNum":" 1272","line":"        }"},
{"lineNum":" 1273","line":"    )"},
{"lineNum":" 1274","line":"}"},
{"lineNum":" 1275","line":""},
{"lineNum":" 1276","line":"impl_from_primitive! { isize, to_isize }"},
{"lineNum":" 1277","line":"impl_from_primitive! { i8, to_i8 }"},
{"lineNum":" 1278","line":"impl_from_primitive! { i16, to_i16 }"},
{"lineNum":" 1279","line":"impl_from_primitive! { i32, to_i32 }"},
{"lineNum":" 1280","line":"impl_from_primitive! { i64, to_i64 }"},
{"lineNum":" 1281","line":"impl_from_primitive! { usize, to_usize }"},
{"lineNum":" 1282","line":"impl_from_primitive! { u8, to_u8 }"},
{"lineNum":" 1283","line":"impl_from_primitive! { u16, to_u16 }"},
{"lineNum":" 1284","line":"impl_from_primitive! { u32, to_u32 }"},
{"lineNum":" 1285","line":"impl_from_primitive! { u64, to_u64 }"},
{"lineNum":" 1286","line":"impl_from_primitive! { f32, to_f32 }"},
{"lineNum":" 1287","line":"impl_from_primitive! { f64, to_f64 }"},
{"lineNum":" 1288","line":""},
{"lineNum":" 1289","line":"/// Cast from one machine scalar to another."},
{"lineNum":" 1290","line":"///"},
{"lineNum":" 1291","line":"/// # Examples"},
{"lineNum":" 1292","line":"///"},
{"lineNum":" 1293","line":"/// ```"},
{"lineNum":" 1294","line":"/// use num;"},
{"lineNum":" 1295","line":"///"},
{"lineNum":" 1296","line":"/// let twenty: f32 = num::cast(0x14).unwrap();"},
{"lineNum":" 1297","line":"/// assert_eq!(twenty, 20f32);"},
{"lineNum":" 1298","line":"/// ```"},
{"lineNum":" 1299","line":"///"},
{"lineNum":" 1300","line":"#[inline]"},
{"lineNum":" 1301","line":"pub fn cast<T: NumCast,U: NumCast>(n: T) -> Option<U> {"},
{"lineNum":" 1302","line":"    NumCast::from(n)"},
{"lineNum":" 1303","line":"}"},
{"lineNum":" 1304","line":""},
{"lineNum":" 1305","line":"/// An interface for casting between machine scalars."},
{"lineNum":" 1306","line":"pub trait NumCast: Sized + ToPrimitive {"},
{"lineNum":" 1307","line":"    /// Creates a number from another value that can be converted into"},
{"lineNum":" 1308","line":"    /// a primitive via the `ToPrimitive` trait."},
{"lineNum":" 1309","line":"    fn from<T: ToPrimitive>(n: T) -> Option<Self>;"},
{"lineNum":" 1310","line":"}"},
{"lineNum":" 1311","line":""},
{"lineNum":" 1312","line":"macro_rules! impl_num_cast {"},
{"lineNum":" 1313","line":"    ($T:ty, $conv:ident) => ("},
{"lineNum":" 1314","line":"        impl NumCast for $T {"},
{"lineNum":" 1315","line":"            #[inline]"},
{"lineNum":" 1316","line":"            #[allow(deprecated)]"},
{"lineNum":" 1317","line":"            fn from<N: ToPrimitive>(n: N) -> Option<$T> {"},
{"lineNum":" 1318","line":"                // `$conv` could be generated using `concat_idents!`, but that"},
{"lineNum":" 1319","line":"                // macro seems to be broken at the moment"},
{"lineNum":" 1320","line":"                n.$conv()"},
{"lineNum":" 1321","line":"            }"},
{"lineNum":" 1322","line":"        }"},
{"lineNum":" 1323","line":"    )"},
{"lineNum":" 1324","line":"}"},
{"lineNum":" 1325","line":""},
{"lineNum":" 1326","line":"impl_num_cast! { u8,    to_u8 }"},
{"lineNum":" 1327","line":"impl_num_cast! { u16,   to_u16 }"},
{"lineNum":" 1328","line":"impl_num_cast! { u32,   to_u32 }"},
{"lineNum":" 1329","line":"impl_num_cast! { u64,   to_u64 }"},
{"lineNum":" 1330","line":"impl_num_cast! { usize,  to_usize }"},
{"lineNum":" 1331","line":"impl_num_cast! { i8,    to_i8 }"},
{"lineNum":" 1332","line":"impl_num_cast! { i16,   to_i16 }"},
{"lineNum":" 1333","line":"impl_num_cast! { i32,   to_i32 }"},
{"lineNum":" 1334","line":"impl_num_cast! { i64,   to_i64 }"},
{"lineNum":" 1335","line":"impl_num_cast! { isize,   to_isize }"},
{"lineNum":" 1336","line":"impl_num_cast! { f32,   to_f32 }"},
{"lineNum":" 1337","line":"impl_num_cast! { f64,   to_f64 }"},
{"lineNum":" 1338","line":""},
{"lineNum":" 1339","line":"pub trait Float"},
{"lineNum":" 1340","line":"    : Num"},
{"lineNum":" 1341","line":"    + Copy"},
{"lineNum":" 1342","line":"    + NumCast"},
{"lineNum":" 1343","line":"    + PartialOrd"},
{"lineNum":" 1344","line":"    + Neg<Output = Self>"},
{"lineNum":" 1345","line":"{"},
{"lineNum":" 1346","line":"    /// Returns the `NaN` value."},
{"lineNum":" 1347","line":"    ///"},
{"lineNum":" 1348","line":"    /// ```"},
{"lineNum":" 1349","line":"    /// use num::traits::Float;"},
{"lineNum":" 1350","line":"    ///"},
{"lineNum":" 1351","line":"    /// let nan: f32 = Float::nan();"},
{"lineNum":" 1352","line":"    ///"},
{"lineNum":" 1353","line":"    /// assert!(nan.is_nan());"},
{"lineNum":" 1354","line":"    /// ```"},
{"lineNum":" 1355","line":"    fn nan() -> Self;"},
{"lineNum":" 1356","line":"    /// Returns the infinite value."},
{"lineNum":" 1357","line":"    ///"},
{"lineNum":" 1358","line":"    /// ```"},
{"lineNum":" 1359","line":"    /// use num::traits::Float;"},
{"lineNum":" 1360","line":"    /// use std::f32;"},
{"lineNum":" 1361","line":"    ///"},
{"lineNum":" 1362","line":"    /// let infinity: f32 = Float::infinity();"},
{"lineNum":" 1363","line":"    ///"},
{"lineNum":" 1364","line":"    /// assert!(infinity.is_infinite());"},
{"lineNum":" 1365","line":"    /// assert!(!infinity.is_finite());"},
{"lineNum":" 1366","line":"    /// assert!(infinity > f32::MAX);"},
{"lineNum":" 1367","line":"    /// ```"},
{"lineNum":" 1368","line":"    fn infinity() -> Self;"},
{"lineNum":" 1369","line":"    /// Returns the negative infinite value."},
{"lineNum":" 1370","line":"    ///"},
{"lineNum":" 1371","line":"    /// ```"},
{"lineNum":" 1372","line":"    /// use num::traits::Float;"},
{"lineNum":" 1373","line":"    /// use std::f32;"},
{"lineNum":" 1374","line":"    ///"},
{"lineNum":" 1375","line":"    /// let neg_infinity: f32 = Float::neg_infinity();"},
{"lineNum":" 1376","line":"    ///"},
{"lineNum":" 1377","line":"    /// assert!(neg_infinity.is_infinite());"},
{"lineNum":" 1378","line":"    /// assert!(!neg_infinity.is_finite());"},
{"lineNum":" 1379","line":"    /// assert!(neg_infinity < f32::MIN);"},
{"lineNum":" 1380","line":"    /// ```"},
{"lineNum":" 1381","line":"    fn neg_infinity() -> Self;"},
{"lineNum":" 1382","line":"    /// Returns `-0.0`."},
{"lineNum":" 1383","line":"    ///"},
{"lineNum":" 1384","line":"    /// ```"},
{"lineNum":" 1385","line":"    /// use num::traits::{Zero, Float};"},
{"lineNum":" 1386","line":"    ///"},
{"lineNum":" 1387","line":"    /// let inf: f32 = Float::infinity();"},
{"lineNum":" 1388","line":"    /// let zero: f32 = Zero::zero();"},
{"lineNum":" 1389","line":"    /// let neg_zero: f32 = Float::neg_zero();"},
{"lineNum":" 1390","line":"    ///"},
{"lineNum":" 1391","line":"    /// assert_eq!(zero, neg_zero);"},
{"lineNum":" 1392","line":"    /// assert_eq!(7.0f32/inf, zero);"},
{"lineNum":" 1393","line":"    /// assert_eq!(zero * 10.0, zero);"},
{"lineNum":" 1394","line":"    /// ```"},
{"lineNum":" 1395","line":"    fn neg_zero() -> Self;"},
{"lineNum":" 1396","line":""},
{"lineNum":" 1397","line":"    /// Returns the smallest finite value that this type can represent."},
{"lineNum":" 1398","line":"    ///"},
{"lineNum":" 1399","line":"    /// ```"},
{"lineNum":" 1400","line":"    /// use num::traits::Float;"},
{"lineNum":" 1401","line":"    /// use std::f64;"},
{"lineNum":" 1402","line":"    ///"},
{"lineNum":" 1403","line":"    /// let x: f64 = Float::min_value();"},
{"lineNum":" 1404","line":"    ///"},
{"lineNum":" 1405","line":"    /// assert_eq!(x, f64::MIN);"},
{"lineNum":" 1406","line":"    /// ```"},
{"lineNum":" 1407","line":"    fn min_value() -> Self;"},
{"lineNum":" 1408","line":""},
{"lineNum":" 1409","line":"    /// Returns the smallest positive, normalized value that this type can represent."},
{"lineNum":" 1410","line":"    ///"},
{"lineNum":" 1411","line":"    /// ```"},
{"lineNum":" 1412","line":"    /// use num::traits::Float;"},
{"lineNum":" 1413","line":"    /// use std::f64;"},
{"lineNum":" 1414","line":"    ///"},
{"lineNum":" 1415","line":"    /// let x: f64 = Float::min_positive_value();"},
{"lineNum":" 1416","line":"    ///"},
{"lineNum":" 1417","line":"    /// assert_eq!(x, f64::MIN_POSITIVE);"},
{"lineNum":" 1418","line":"    /// ```"},
{"lineNum":" 1419","line":"    fn min_positive_value() -> Self;"},
{"lineNum":" 1420","line":""},
{"lineNum":" 1421","line":"    /// Returns the largest finite value that this type can represent."},
{"lineNum":" 1422","line":"    ///"},
{"lineNum":" 1423","line":"    /// ```"},
{"lineNum":" 1424","line":"    /// use num::traits::Float;"},
{"lineNum":" 1425","line":"    /// use std::f64;"},
{"lineNum":" 1426","line":"    ///"},
{"lineNum":" 1427","line":"    /// let x: f64 = Float::max_value();"},
{"lineNum":" 1428","line":"    /// assert_eq!(x, f64::MAX);"},
{"lineNum":" 1429","line":"    /// ```"},
{"lineNum":" 1430","line":"    fn max_value() -> Self;"},
{"lineNum":" 1431","line":""},
{"lineNum":" 1432","line":"    /// Returns `true` if this value is `NaN` and false otherwise."},
{"lineNum":" 1433","line":"    ///"},
{"lineNum":" 1434","line":"    /// ```"},
{"lineNum":" 1435","line":"    /// use num::traits::Float;"},
{"lineNum":" 1436","line":"    /// use std::f64;"},
{"lineNum":" 1437","line":"    ///"},
{"lineNum":" 1438","line":"    /// let nan = f64::NAN;"},
{"lineNum":" 1439","line":"    /// let f = 7.0;"},
{"lineNum":" 1440","line":"    ///"},
{"lineNum":" 1441","line":"    /// assert!(nan.is_nan());"},
{"lineNum":" 1442","line":"    /// assert!(!f.is_nan());"},
{"lineNum":" 1443","line":"    /// ```"},
{"lineNum":" 1444","line":"    fn is_nan(self) -> bool;"},
{"lineNum":" 1445","line":""},
{"lineNum":" 1446","line":"    /// Returns `true` if this value is positive infinity or negative infinity and"},
{"lineNum":" 1447","line":"    /// false otherwise."},
{"lineNum":" 1448","line":"    ///"},
{"lineNum":" 1449","line":"    /// ```"},
{"lineNum":" 1450","line":"    /// use num::traits::Float;"},
{"lineNum":" 1451","line":"    /// use std::f32;"},
{"lineNum":" 1452","line":"    ///"},
{"lineNum":" 1453","line":"    /// let f = 7.0f32;"},
{"lineNum":" 1454","line":"    /// let inf: f32 = Float::infinity();"},
{"lineNum":" 1455","line":"    /// let neg_inf: f32 = Float::neg_infinity();"},
{"lineNum":" 1456","line":"    /// let nan: f32 = f32::NAN;"},
{"lineNum":" 1457","line":"    ///"},
{"lineNum":" 1458","line":"    /// assert!(!f.is_infinite());"},
{"lineNum":" 1459","line":"    /// assert!(!nan.is_infinite());"},
{"lineNum":" 1460","line":"    ///"},
{"lineNum":" 1461","line":"    /// assert!(inf.is_infinite());"},
{"lineNum":" 1462","line":"    /// assert!(neg_inf.is_infinite());"},
{"lineNum":" 1463","line":"    /// ```"},
{"lineNum":" 1464","line":"    fn is_infinite(self) -> bool;"},
{"lineNum":" 1465","line":""},
{"lineNum":" 1466","line":"    /// Returns `true` if this number is neither infinite nor `NaN`."},
{"lineNum":" 1467","line":"    ///"},
{"lineNum":" 1468","line":"    /// ```"},
{"lineNum":" 1469","line":"    /// use num::traits::Float;"},
{"lineNum":" 1470","line":"    /// use std::f32;"},
{"lineNum":" 1471","line":"    ///"},
{"lineNum":" 1472","line":"    /// let f = 7.0f32;"},
{"lineNum":" 1473","line":"    /// let inf: f32 = Float::infinity();"},
{"lineNum":" 1474","line":"    /// let neg_inf: f32 = Float::neg_infinity();"},
{"lineNum":" 1475","line":"    /// let nan: f32 = f32::NAN;"},
{"lineNum":" 1476","line":"    ///"},
{"lineNum":" 1477","line":"    /// assert!(f.is_finite());"},
{"lineNum":" 1478","line":"    ///"},
{"lineNum":" 1479","line":"    /// assert!(!nan.is_finite());"},
{"lineNum":" 1480","line":"    /// assert!(!inf.is_finite());"},
{"lineNum":" 1481","line":"    /// assert!(!neg_inf.is_finite());"},
{"lineNum":" 1482","line":"    /// ```"},
{"lineNum":" 1483","line":"    fn is_finite(self) -> bool;"},
{"lineNum":" 1484","line":""},
{"lineNum":" 1485","line":"    /// Returns `true` if the number is neither zero, infinite,"},
{"lineNum":" 1486","line":"    /// [subnormal][subnormal], or `NaN`."},
{"lineNum":" 1487","line":"    ///"},
{"lineNum":" 1488","line":"    /// ```"},
{"lineNum":" 1489","line":"    /// use num::traits::Float;"},
{"lineNum":" 1490","line":"    /// use std::f32;"},
{"lineNum":" 1491","line":"    ///"},
{"lineNum":" 1492","line":"    /// let min = f32::MIN_POSITIVE; // 1.17549435e-38f32"},
{"lineNum":" 1493","line":"    /// let max = f32::MAX;"},
{"lineNum":" 1494","line":"    /// let lower_than_min = 1.0e-40_f32;"},
{"lineNum":" 1495","line":"    /// let zero = 0.0f32;"},
{"lineNum":" 1496","line":"    ///"},
{"lineNum":" 1497","line":"    /// assert!(min.is_normal());"},
{"lineNum":" 1498","line":"    /// assert!(max.is_normal());"},
{"lineNum":" 1499","line":"    ///"},
{"lineNum":" 1500","line":"    /// assert!(!zero.is_normal());"},
{"lineNum":" 1501","line":"    /// assert!(!f32::NAN.is_normal());"},
{"lineNum":" 1502","line":"    /// assert!(!f32::INFINITY.is_normal());"},
{"lineNum":" 1503","line":"    /// // Values between `0` and `min` are Subnormal."},
{"lineNum":" 1504","line":"    /// assert!(!lower_than_min.is_normal());"},
{"lineNum":" 1505","line":"    /// ```"},
{"lineNum":" 1506","line":"    /// [subnormal]: http://en.wikipedia.org/wiki/Denormal_number"},
{"lineNum":" 1507","line":"    fn is_normal(self) -> bool;"},
{"lineNum":" 1508","line":""},
{"lineNum":" 1509","line":"    /// Returns the floating point category of the number. If only one property"},
{"lineNum":" 1510","line":"    /// is going to be tested, it is generally faster to use the specific"},
{"lineNum":" 1511","line":"    /// predicate instead."},
{"lineNum":" 1512","line":"    ///"},
{"lineNum":" 1513","line":"    /// ```"},
{"lineNum":" 1514","line":"    /// use num::traits::Float;"},
{"lineNum":" 1515","line":"    /// use std::num::FpCategory;"},
{"lineNum":" 1516","line":"    /// use std::f32;"},
{"lineNum":" 1517","line":"    ///"},
{"lineNum":" 1518","line":"    /// let num = 12.4f32;"},
{"lineNum":" 1519","line":"    /// let inf = f32::INFINITY;"},
{"lineNum":" 1520","line":"    ///"},
{"lineNum":" 1521","line":"    /// assert_eq!(num.classify(), FpCategory::Normal);"},
{"lineNum":" 1522","line":"    /// assert_eq!(inf.classify(), FpCategory::Infinite);"},
{"lineNum":" 1523","line":"    /// ```"},
{"lineNum":" 1524","line":"    fn classify(self) -> FpCategory;"},
{"lineNum":" 1525","line":""},
{"lineNum":" 1526","line":"    /// Returns the largest integer less than or equal to a number."},
{"lineNum":" 1527","line":"    ///"},
{"lineNum":" 1528","line":"    /// ```"},
{"lineNum":" 1529","line":"    /// use num::traits::Float;"},
{"lineNum":" 1530","line":"    ///"},
{"lineNum":" 1531","line":"    /// let f = 3.99;"},
{"lineNum":" 1532","line":"    /// let g = 3.0;"},
{"lineNum":" 1533","line":"    ///"},
{"lineNum":" 1534","line":"    /// assert_eq!(f.floor(), 3.0);"},
{"lineNum":" 1535","line":"    /// assert_eq!(g.floor(), 3.0);"},
{"lineNum":" 1536","line":"    /// ```"},
{"lineNum":" 1537","line":"    fn floor(self) -> Self;"},
{"lineNum":" 1538","line":""},
{"lineNum":" 1539","line":"    /// Returns the smallest integer greater than or equal to a number."},
{"lineNum":" 1540","line":"    ///"},
{"lineNum":" 1541","line":"    /// ```"},
{"lineNum":" 1542","line":"    /// use num::traits::Float;"},
{"lineNum":" 1543","line":"    ///"},
{"lineNum":" 1544","line":"    /// let f = 3.01;"},
{"lineNum":" 1545","line":"    /// let g = 4.0;"},
{"lineNum":" 1546","line":"    ///"},
{"lineNum":" 1547","line":"    /// assert_eq!(f.ceil(), 4.0);"},
{"lineNum":" 1548","line":"    /// assert_eq!(g.ceil(), 4.0);"},
{"lineNum":" 1549","line":"    /// ```"},
{"lineNum":" 1550","line":"    fn ceil(self) -> Self;"},
{"lineNum":" 1551","line":""},
{"lineNum":" 1552","line":"    /// Returns the nearest integer to a number. Round half-way cases away from"},
{"lineNum":" 1553","line":"    /// `0.0`."},
{"lineNum":" 1554","line":"    ///"},
{"lineNum":" 1555","line":"    /// ```"},
{"lineNum":" 1556","line":"    /// use num::traits::Float;"},
{"lineNum":" 1557","line":"    ///"},
{"lineNum":" 1558","line":"    /// let f = 3.3;"},
{"lineNum":" 1559","line":"    /// let g = -3.3;"},
{"lineNum":" 1560","line":"    ///"},
{"lineNum":" 1561","line":"    /// assert_eq!(f.round(), 3.0);"},
{"lineNum":" 1562","line":"    /// assert_eq!(g.round(), -3.0);"},
{"lineNum":" 1563","line":"    /// ```"},
{"lineNum":" 1564","line":"    fn round(self) -> Self;"},
{"lineNum":" 1565","line":""},
{"lineNum":" 1566","line":"    /// Return the integer part of a number."},
{"lineNum":" 1567","line":"    ///"},
{"lineNum":" 1568","line":"    /// ```"},
{"lineNum":" 1569","line":"    /// use num::traits::Float;"},
{"lineNum":" 1570","line":"    ///"},
{"lineNum":" 1571","line":"    /// let f = 3.3;"},
{"lineNum":" 1572","line":"    /// let g = -3.7;"},
{"lineNum":" 1573","line":"    ///"},
{"lineNum":" 1574","line":"    /// assert_eq!(f.trunc(), 3.0);"},
{"lineNum":" 1575","line":"    /// assert_eq!(g.trunc(), -3.0);"},
{"lineNum":" 1576","line":"    /// ```"},
{"lineNum":" 1577","line":"    fn trunc(self) -> Self;"},
{"lineNum":" 1578","line":""},
{"lineNum":" 1579","line":"    /// Returns the fractional part of a number."},
{"lineNum":" 1580","line":"    ///"},
{"lineNum":" 1581","line":"    /// ```"},
{"lineNum":" 1582","line":"    /// use num::traits::Float;"},
{"lineNum":" 1583","line":"    ///"},
{"lineNum":" 1584","line":"    /// let x = 3.5;"},
{"lineNum":" 1585","line":"    /// let y = -3.5;"},
{"lineNum":" 1586","line":"    /// let abs_difference_x = (x.fract() - 0.5).abs();"},
{"lineNum":" 1587","line":"    /// let abs_difference_y = (y.fract() - (-0.5)).abs();"},
{"lineNum":" 1588","line":"    ///"},
{"lineNum":" 1589","line":"    /// assert!(abs_difference_x < 1e-10);"},
{"lineNum":" 1590","line":"    /// assert!(abs_difference_y < 1e-10);"},
{"lineNum":" 1591","line":"    /// ```"},
{"lineNum":" 1592","line":"    fn fract(self) -> Self;"},
{"lineNum":" 1593","line":""},
{"lineNum":" 1594","line":"    /// Computes the absolute value of `self`. Returns `Float::nan()` if the"},
{"lineNum":" 1595","line":"    /// number is `Float::nan()`."},
{"lineNum":" 1596","line":"    ///"},
{"lineNum":" 1597","line":"    /// ```"},
{"lineNum":" 1598","line":"    /// use num::traits::Float;"},
{"lineNum":" 1599","line":"    /// use std::f64;"},
{"lineNum":" 1600","line":"    ///"},
{"lineNum":" 1601","line":"    /// let x = 3.5;"},
{"lineNum":" 1602","line":"    /// let y = -3.5;"},
{"lineNum":" 1603","line":"    ///"},
{"lineNum":" 1604","line":"    /// let abs_difference_x = (x.abs() - x).abs();"},
{"lineNum":" 1605","line":"    /// let abs_difference_y = (y.abs() - (-y)).abs();"},
{"lineNum":" 1606","line":"    ///"},
{"lineNum":" 1607","line":"    /// assert!(abs_difference_x < 1e-10);"},
{"lineNum":" 1608","line":"    /// assert!(abs_difference_y < 1e-10);"},
{"lineNum":" 1609","line":"    ///"},
{"lineNum":" 1610","line":"    /// assert!(f64::NAN.abs().is_nan());"},
{"lineNum":" 1611","line":"    /// ```"},
{"lineNum":" 1612","line":"    fn abs(self) -> Self;"},
{"lineNum":" 1613","line":""},
{"lineNum":" 1614","line":"    /// Returns a number that represents the sign of `self`."},
{"lineNum":" 1615","line":"    ///"},
{"lineNum":" 1616","line":"    /// - `1.0` if the number is positive, `+0.0` or `Float::infinity()`"},
{"lineNum":" 1617","line":"    /// - `-1.0` if the number is negative, `-0.0` or `Float::neg_infinity()`"},
{"lineNum":" 1618","line":"    /// - `Float::nan()` if the number is `Float::nan()`"},
{"lineNum":" 1619","line":"    ///"},
{"lineNum":" 1620","line":"    /// ```"},
{"lineNum":" 1621","line":"    /// use num::traits::Float;"},
{"lineNum":" 1622","line":"    /// use std::f64;"},
{"lineNum":" 1623","line":"    ///"},
{"lineNum":" 1624","line":"    /// let f = 3.5;"},
{"lineNum":" 1625","line":"    ///"},
{"lineNum":" 1626","line":"    /// assert_eq!(f.signum(), 1.0);"},
{"lineNum":" 1627","line":"    /// assert_eq!(f64::NEG_INFINITY.signum(), -1.0);"},
{"lineNum":" 1628","line":"    ///"},
{"lineNum":" 1629","line":"    /// assert!(f64::NAN.signum().is_nan());"},
{"lineNum":" 1630","line":"    /// ```"},
{"lineNum":" 1631","line":"    fn signum(self) -> Self;"},
{"lineNum":" 1632","line":""},
{"lineNum":" 1633","line":"    /// Returns `true` if `self` is positive, including `+0.0` and"},
{"lineNum":" 1634","line":"    /// `Float::infinity()`."},
{"lineNum":" 1635","line":"    ///"},
{"lineNum":" 1636","line":"    /// ```"},
{"lineNum":" 1637","line":"    /// use num::traits::Float;"},
{"lineNum":" 1638","line":"    /// use std::f64;"},
{"lineNum":" 1639","line":"    ///"},
{"lineNum":" 1640","line":"    /// let nan: f64 = f64::NAN;"},
{"lineNum":" 1641","line":"    ///"},
{"lineNum":" 1642","line":"    /// let f = 7.0;"},
{"lineNum":" 1643","line":"    /// let g = -7.0;"},
{"lineNum":" 1644","line":"    ///"},
{"lineNum":" 1645","line":"    /// assert!(f.is_sign_positive());"},
{"lineNum":" 1646","line":"    /// assert!(!g.is_sign_positive());"},
{"lineNum":" 1647","line":"    /// // Requires both tests to determine if is `NaN`"},
{"lineNum":" 1648","line":"    /// assert!(!nan.is_sign_positive() && !nan.is_sign_negative());"},
{"lineNum":" 1649","line":"    /// ```"},
{"lineNum":" 1650","line":"    fn is_sign_positive(self) -> bool;"},
{"lineNum":" 1651","line":""},
{"lineNum":" 1652","line":"    /// Returns `true` if `self` is negative, including `-0.0` and"},
{"lineNum":" 1653","line":"    /// `Float::neg_infinity()`."},
{"lineNum":" 1654","line":"    ///"},
{"lineNum":" 1655","line":"    /// ```"},
{"lineNum":" 1656","line":"    /// use num::traits::Float;"},
{"lineNum":" 1657","line":"    /// use std::f64;"},
{"lineNum":" 1658","line":"    ///"},
{"lineNum":" 1659","line":"    /// let nan = f64::NAN;"},
{"lineNum":" 1660","line":"    ///"},
{"lineNum":" 1661","line":"    /// let f = 7.0;"},
{"lineNum":" 1662","line":"    /// let g = -7.0;"},
{"lineNum":" 1663","line":"    ///"},
{"lineNum":" 1664","line":"    /// assert!(!f.is_sign_negative());"},
{"lineNum":" 1665","line":"    /// assert!(g.is_sign_negative());"},
{"lineNum":" 1666","line":"    /// // Requires both tests to determine if is `NaN`."},
{"lineNum":" 1667","line":"    /// assert!(!nan.is_sign_positive() && !nan.is_sign_negative());"},
{"lineNum":" 1668","line":"    /// ```"},
{"lineNum":" 1669","line":"    fn is_sign_negative(self) -> bool;"},
{"lineNum":" 1670","line":""},
{"lineNum":" 1671","line":"    /// Fused multiply-add. Computes `(self * a) + b` with only one rounding"},
{"lineNum":" 1672","line":"    /// error. This produces a more accurate result with better performance than"},
{"lineNum":" 1673","line":"    /// a separate multiplication operation followed by an add."},
{"lineNum":" 1674","line":"    ///"},
{"lineNum":" 1675","line":"    /// ```"},
{"lineNum":" 1676","line":"    /// use num::traits::Float;"},
{"lineNum":" 1677","line":"    ///"},
{"lineNum":" 1678","line":"    /// let m = 10.0;"},
{"lineNum":" 1679","line":"    /// let x = 4.0;"},
{"lineNum":" 1680","line":"    /// let b = 60.0;"},
{"lineNum":" 1681","line":"    ///"},
{"lineNum":" 1682","line":"    /// // 100.0"},
{"lineNum":" 1683","line":"    /// let abs_difference = (m.mul_add(x, b) - (m*x + b)).abs();"},
{"lineNum":" 1684","line":"    ///"},
{"lineNum":" 1685","line":"    /// assert!(abs_difference < 1e-10);"},
{"lineNum":" 1686","line":"    /// ```"},
{"lineNum":" 1687","line":"    fn mul_add(self, a: Self, b: Self) -> Self;"},
{"lineNum":" 1688","line":"    /// Take the reciprocal (inverse) of a number, `1/x`."},
{"lineNum":" 1689","line":"    ///"},
{"lineNum":" 1690","line":"    /// ```"},
{"lineNum":" 1691","line":"    /// use num::traits::Float;"},
{"lineNum":" 1692","line":"    ///"},
{"lineNum":" 1693","line":"    /// let x = 2.0;"},
{"lineNum":" 1694","line":"    /// let abs_difference = (x.recip() - (1.0/x)).abs();"},
{"lineNum":" 1695","line":"    ///"},
{"lineNum":" 1696","line":"    /// assert!(abs_difference < 1e-10);"},
{"lineNum":" 1697","line":"    /// ```"},
{"lineNum":" 1698","line":"    fn recip(self) -> Self;"},
{"lineNum":" 1699","line":""},
{"lineNum":" 1700","line":"    /// Raise a number to an integer power."},
{"lineNum":" 1701","line":"    ///"},
{"lineNum":" 1702","line":"    /// Using this function is generally faster than using `powf`"},
{"lineNum":" 1703","line":"    ///"},
{"lineNum":" 1704","line":"    /// ```"},
{"lineNum":" 1705","line":"    /// use num::traits::Float;"},
{"lineNum":" 1706","line":"    ///"},
{"lineNum":" 1707","line":"    /// let x = 2.0;"},
{"lineNum":" 1708","line":"    /// let abs_difference = (x.powi(2) - x*x).abs();"},
{"lineNum":" 1709","line":"    ///"},
{"lineNum":" 1710","line":"    /// assert!(abs_difference < 1e-10);"},
{"lineNum":" 1711","line":"    /// ```"},
{"lineNum":" 1712","line":"    fn powi(self, n: i32) -> Self;"},
{"lineNum":" 1713","line":""},
{"lineNum":" 1714","line":"    /// Raise a number to a floating point power."},
{"lineNum":" 1715","line":"    ///"},
{"lineNum":" 1716","line":"    /// ```"},
{"lineNum":" 1717","line":"    /// use num::traits::Float;"},
{"lineNum":" 1718","line":"    ///"},
{"lineNum":" 1719","line":"    /// let x = 2.0;"},
{"lineNum":" 1720","line":"    /// let abs_difference = (x.powf(2.0) - x*x).abs();"},
{"lineNum":" 1721","line":"    ///"},
{"lineNum":" 1722","line":"    /// assert!(abs_difference < 1e-10);"},
{"lineNum":" 1723","line":"    /// ```"},
{"lineNum":" 1724","line":"    fn powf(self, n: Self) -> Self;"},
{"lineNum":" 1725","line":""},
{"lineNum":" 1726","line":"    /// Take the square root of a number."},
{"lineNum":" 1727","line":"    ///"},
{"lineNum":" 1728","line":"    /// Returns NaN if `self` is a negative number."},
{"lineNum":" 1729","line":"    ///"},
{"lineNum":" 1730","line":"    /// ```"},
{"lineNum":" 1731","line":"    /// use num::traits::Float;"},
{"lineNum":" 1732","line":"    ///"},
{"lineNum":" 1733","line":"    /// let positive = 4.0;"},
{"lineNum":" 1734","line":"    /// let negative = -4.0;"},
{"lineNum":" 1735","line":"    ///"},
{"lineNum":" 1736","line":"    /// let abs_difference = (positive.sqrt() - 2.0).abs();"},
{"lineNum":" 1737","line":"    ///"},
{"lineNum":" 1738","line":"    /// assert!(abs_difference < 1e-10);"},
{"lineNum":" 1739","line":"    /// assert!(negative.sqrt().is_nan());"},
{"lineNum":" 1740","line":"    /// ```"},
{"lineNum":" 1741","line":"    fn sqrt(self) -> Self;"},
{"lineNum":" 1742","line":""},
{"lineNum":" 1743","line":"    /// Returns `e^(self)`, (the exponential function)."},
{"lineNum":" 1744","line":"    ///"},
{"lineNum":" 1745","line":"    /// ```"},
{"lineNum":" 1746","line":"    /// use num::traits::Float;"},
{"lineNum":" 1747","line":"    ///"},
{"lineNum":" 1748","line":"    /// let one = 1.0;"},
{"lineNum":" 1749","line":"    /// // e^1"},
{"lineNum":" 1750","line":"    /// let e = one.exp();"},
{"lineNum":" 1751","line":"    ///"},
{"lineNum":" 1752","line":"    /// // ln(e) - 1 == 0"},
{"lineNum":" 1753","line":"    /// let abs_difference = (e.ln() - 1.0).abs();"},
{"lineNum":" 1754","line":"    ///"},
{"lineNum":" 1755","line":"    /// assert!(abs_difference < 1e-10);"},
{"lineNum":" 1756","line":"    /// ```"},
{"lineNum":" 1757","line":"    fn exp(self) -> Self;"},
{"lineNum":" 1758","line":""},
{"lineNum":" 1759","line":"    /// Returns `2^(self)`."},
{"lineNum":" 1760","line":"    ///"},
{"lineNum":" 1761","line":"    /// ```"},
{"lineNum":" 1762","line":"    /// use num::traits::Float;"},
{"lineNum":" 1763","line":"    ///"},
{"lineNum":" 1764","line":"    /// let f = 2.0;"},
{"lineNum":" 1765","line":"    ///"},
{"lineNum":" 1766","line":"    /// // 2^2 - 4 == 0"},
{"lineNum":" 1767","line":"    /// let abs_difference = (f.exp2() - 4.0).abs();"},
{"lineNum":" 1768","line":"    ///"},
{"lineNum":" 1769","line":"    /// assert!(abs_difference < 1e-10);"},
{"lineNum":" 1770","line":"    /// ```"},
{"lineNum":" 1771","line":"    fn exp2(self) -> Self;"},
{"lineNum":" 1772","line":""},
{"lineNum":" 1773","line":"    /// Returns the natural logarithm of the number."},
{"lineNum":" 1774","line":"    ///"},
{"lineNum":" 1775","line":"    /// ```"},
{"lineNum":" 1776","line":"    /// use num::traits::Float;"},
{"lineNum":" 1777","line":"    ///"},
{"lineNum":" 1778","line":"    /// let one = 1.0;"},
{"lineNum":" 1779","line":"    /// // e^1"},
{"lineNum":" 1780","line":"    /// let e = one.exp();"},
{"lineNum":" 1781","line":"    ///"},
{"lineNum":" 1782","line":"    /// // ln(e) - 1 == 0"},
{"lineNum":" 1783","line":"    /// let abs_difference = (e.ln() - 1.0).abs();"},
{"lineNum":" 1784","line":"    ///"},
{"lineNum":" 1785","line":"    /// assert!(abs_difference < 1e-10);"},
{"lineNum":" 1786","line":"    /// ```"},
{"lineNum":" 1787","line":"    fn ln(self) -> Self;"},
{"lineNum":" 1788","line":""},
{"lineNum":" 1789","line":"    /// Returns the logarithm of the number with respect to an arbitrary base."},
{"lineNum":" 1790","line":"    ///"},
{"lineNum":" 1791","line":"    /// ```"},
{"lineNum":" 1792","line":"    /// use num::traits::Float;"},
{"lineNum":" 1793","line":"    ///"},
{"lineNum":" 1794","line":"    /// let ten = 10.0;"},
{"lineNum":" 1795","line":"    /// let two = 2.0;"},
{"lineNum":" 1796","line":"    ///"},
{"lineNum":" 1797","line":"    /// // log10(10) - 1 == 0"},
{"lineNum":" 1798","line":"    /// let abs_difference_10 = (ten.log(10.0) - 1.0).abs();"},
{"lineNum":" 1799","line":"    ///"},
{"lineNum":" 1800","line":"    /// // log2(2) - 1 == 0"},
{"lineNum":" 1801","line":"    /// let abs_difference_2 = (two.log(2.0) - 1.0).abs();"},
{"lineNum":" 1802","line":"    ///"},
{"lineNum":" 1803","line":"    /// assert!(abs_difference_10 < 1e-10);"},
{"lineNum":" 1804","line":"    /// assert!(abs_difference_2 < 1e-10);"},
{"lineNum":" 1805","line":"    /// ```"},
{"lineNum":" 1806","line":"    fn log(self, base: Self) -> Self;"},
{"lineNum":" 1807","line":""},
{"lineNum":" 1808","line":"    /// Returns the base 2 logarithm of the number."},
{"lineNum":" 1809","line":"    ///"},
{"lineNum":" 1810","line":"    /// ```"},
{"lineNum":" 1811","line":"    /// use num::traits::Float;"},
{"lineNum":" 1812","line":"    ///"},
{"lineNum":" 1813","line":"    /// let two = 2.0;"},
{"lineNum":" 1814","line":"    ///"},
{"lineNum":" 1815","line":"    /// // log2(2) - 1 == 0"},
{"lineNum":" 1816","line":"    /// let abs_difference = (two.log2() - 1.0).abs();"},
{"lineNum":" 1817","line":"    ///"},
{"lineNum":" 1818","line":"    /// assert!(abs_difference < 1e-10);"},
{"lineNum":" 1819","line":"    /// ```"},
{"lineNum":" 1820","line":"    fn log2(self) -> Self;"},
{"lineNum":" 1821","line":""},
{"lineNum":" 1822","line":"    /// Returns the base 10 logarithm of the number."},
{"lineNum":" 1823","line":"    ///"},
{"lineNum":" 1824","line":"    /// ```"},
{"lineNum":" 1825","line":"    /// use num::traits::Float;"},
{"lineNum":" 1826","line":"    ///"},
{"lineNum":" 1827","line":"    /// let ten = 10.0;"},
{"lineNum":" 1828","line":"    ///"},
{"lineNum":" 1829","line":"    /// // log10(10) - 1 == 0"},
{"lineNum":" 1830","line":"    /// let abs_difference = (ten.log10() - 1.0).abs();"},
{"lineNum":" 1831","line":"    ///"},
{"lineNum":" 1832","line":"    /// assert!(abs_difference < 1e-10);"},
{"lineNum":" 1833","line":"    /// ```"},
{"lineNum":" 1834","line":"    fn log10(self) -> Self;"},
{"lineNum":" 1835","line":""},
{"lineNum":" 1836","line":"    /// Returns the maximum of the two numbers."},
{"lineNum":" 1837","line":"    ///"},
{"lineNum":" 1838","line":"    /// ```"},
{"lineNum":" 1839","line":"    /// use num::traits::Float;"},
{"lineNum":" 1840","line":"    ///"},
{"lineNum":" 1841","line":"    /// let x = 1.0;"},
{"lineNum":" 1842","line":"    /// let y = 2.0;"},
{"lineNum":" 1843","line":"    ///"},
{"lineNum":" 1844","line":"    /// assert_eq!(x.max(y), y);"},
{"lineNum":" 1845","line":"    /// ```"},
{"lineNum":" 1846","line":"    fn max(self, other: Self) -> Self;"},
{"lineNum":" 1847","line":""},
{"lineNum":" 1848","line":"    /// Returns the minimum of the two numbers."},
{"lineNum":" 1849","line":"    ///"},
{"lineNum":" 1850","line":"    /// ```"},
{"lineNum":" 1851","line":"    /// use num::traits::Float;"},
{"lineNum":" 1852","line":"    ///"},
{"lineNum":" 1853","line":"    /// let x = 1.0;"},
{"lineNum":" 1854","line":"    /// let y = 2.0;"},
{"lineNum":" 1855","line":"    ///"},
{"lineNum":" 1856","line":"    /// assert_eq!(x.min(y), x);"},
{"lineNum":" 1857","line":"    /// ```"},
{"lineNum":" 1858","line":"    fn min(self, other: Self) -> Self;"},
{"lineNum":" 1859","line":""},
{"lineNum":" 1860","line":"    /// The positive difference of two numbers."},
{"lineNum":" 1861","line":"    ///"},
{"lineNum":" 1862","line":"    /// * If `self <= other`: `0:0`"},
{"lineNum":" 1863","line":"    /// * Else: `self - other`"},
{"lineNum":" 1864","line":"    ///"},
{"lineNum":" 1865","line":"    /// ```"},
{"lineNum":" 1866","line":"    /// use num::traits::Float;"},
{"lineNum":" 1867","line":"    ///"},
{"lineNum":" 1868","line":"    /// let x = 3.0;"},
{"lineNum":" 1869","line":"    /// let y = -3.0;"},
{"lineNum":" 1870","line":"    ///"},
{"lineNum":" 1871","line":"    /// let abs_difference_x = (x.abs_sub(1.0) - 2.0).abs();"},
{"lineNum":" 1872","line":"    /// let abs_difference_y = (y.abs_sub(1.0) - 0.0).abs();"},
{"lineNum":" 1873","line":"    ///"},
{"lineNum":" 1874","line":"    /// assert!(abs_difference_x < 1e-10);"},
{"lineNum":" 1875","line":"    /// assert!(abs_difference_y < 1e-10);"},
{"lineNum":" 1876","line":"    /// ```"},
{"lineNum":" 1877","line":"    fn abs_sub(self, other: Self) -> Self;"},
{"lineNum":" 1878","line":""},
{"lineNum":" 1879","line":"    /// Take the cubic root of a number."},
{"lineNum":" 1880","line":"    ///"},
{"lineNum":" 1881","line":"    /// ```"},
{"lineNum":" 1882","line":"    /// use num::traits::Float;"},
{"lineNum":" 1883","line":"    ///"},
{"lineNum":" 1884","line":"    /// let x = 8.0;"},
{"lineNum":" 1885","line":"    ///"},
{"lineNum":" 1886","line":"    /// // x^(1/3) - 2 == 0"},
{"lineNum":" 1887","line":"    /// let abs_difference = (x.cbrt() - 2.0).abs();"},
{"lineNum":" 1888","line":"    ///"},
{"lineNum":" 1889","line":"    /// assert!(abs_difference < 1e-10);"},
{"lineNum":" 1890","line":"    /// ```"},
{"lineNum":" 1891","line":"    fn cbrt(self) -> Self;"},
{"lineNum":" 1892","line":""},
{"lineNum":" 1893","line":"    /// Calculate the length of the hypotenuse of a right-angle triangle given"},
{"lineNum":" 1894","line":"    /// legs of length `x` and `y`."},
{"lineNum":" 1895","line":"    ///"},
{"lineNum":" 1896","line":"    /// ```"},
{"lineNum":" 1897","line":"    /// use num::traits::Float;"},
{"lineNum":" 1898","line":"    ///"},
{"lineNum":" 1899","line":"    /// let x = 2.0;"},
{"lineNum":" 1900","line":"    /// let y = 3.0;"},
{"lineNum":" 1901","line":"    ///"},
{"lineNum":" 1902","line":"    /// // sqrt(x^2 + y^2)"},
{"lineNum":" 1903","line":"    /// let abs_difference = (x.hypot(y) - (x.powi(2) + y.powi(2)).sqrt()).abs();"},
{"lineNum":" 1904","line":"    ///"},
{"lineNum":" 1905","line":"    /// assert!(abs_difference < 1e-10);"},
{"lineNum":" 1906","line":"    /// ```"},
{"lineNum":" 1907","line":"    fn hypot(self, other: Self) -> Self;"},
{"lineNum":" 1908","line":""},
{"lineNum":" 1909","line":"    /// Computes the sine of a number (in radians)."},
{"lineNum":" 1910","line":"    ///"},
{"lineNum":" 1911","line":"    /// ```"},
{"lineNum":" 1912","line":"    /// use num::traits::Float;"},
{"lineNum":" 1913","line":"    /// use std::f64;"},
{"lineNum":" 1914","line":"    ///"},
{"lineNum":" 1915","line":"    /// let x = f64::consts::PI/2.0;"},
{"lineNum":" 1916","line":"    ///"},
{"lineNum":" 1917","line":"    /// let abs_difference = (x.sin() - 1.0).abs();"},
{"lineNum":" 1918","line":"    ///"},
{"lineNum":" 1919","line":"    /// assert!(abs_difference < 1e-10);"},
{"lineNum":" 1920","line":"    /// ```"},
{"lineNum":" 1921","line":"    fn sin(self) -> Self;"},
{"lineNum":" 1922","line":""},
{"lineNum":" 1923","line":"    /// Computes the cosine of a number (in radians)."},
{"lineNum":" 1924","line":"    ///"},
{"lineNum":" 1925","line":"    /// ```"},
{"lineNum":" 1926","line":"    /// use num::traits::Float;"},
{"lineNum":" 1927","line":"    /// use std::f64;"},
{"lineNum":" 1928","line":"    ///"},
{"lineNum":" 1929","line":"    /// let x = 2.0*f64::consts::PI;"},
{"lineNum":" 1930","line":"    ///"},
{"lineNum":" 1931","line":"    /// let abs_difference = (x.cos() - 1.0).abs();"},
{"lineNum":" 1932","line":"    ///"},
{"lineNum":" 1933","line":"    /// assert!(abs_difference < 1e-10);"},
{"lineNum":" 1934","line":"    /// ```"},
{"lineNum":" 1935","line":"    fn cos(self) -> Self;"},
{"lineNum":" 1936","line":""},
{"lineNum":" 1937","line":"    /// Computes the tangent of a number (in radians)."},
{"lineNum":" 1938","line":"    ///"},
{"lineNum":" 1939","line":"    /// ```"},
{"lineNum":" 1940","line":"    /// use num::traits::Float;"},
{"lineNum":" 1941","line":"    /// use std::f64;"},
{"lineNum":" 1942","line":"    ///"},
{"lineNum":" 1943","line":"    /// let x = f64::consts::PI/4.0;"},
{"lineNum":" 1944","line":"    /// let abs_difference = (x.tan() - 1.0).abs();"},
{"lineNum":" 1945","line":"    ///"},
{"lineNum":" 1946","line":"    /// assert!(abs_difference < 1e-14);"},
{"lineNum":" 1947","line":"    /// ```"},
{"lineNum":" 1948","line":"    fn tan(self) -> Self;"},
{"lineNum":" 1949","line":""},
{"lineNum":" 1950","line":"    /// Computes the arcsine of a number. Return value is in radians in"},
{"lineNum":" 1951","line":"    /// the range [-pi/2, pi/2] or NaN if the number is outside the range"},
{"lineNum":" 1952","line":"    /// [-1, 1]."},
{"lineNum":" 1953","line":"    ///"},
{"lineNum":" 1954","line":"    /// ```"},
{"lineNum":" 1955","line":"    /// use num::traits::Float;"},
{"lineNum":" 1956","line":"    /// use std::f64;"},
{"lineNum":" 1957","line":"    ///"},
{"lineNum":" 1958","line":"    /// let f = f64::consts::PI / 2.0;"},
{"lineNum":" 1959","line":"    ///"},
{"lineNum":" 1960","line":"    /// // asin(sin(pi/2))"},
{"lineNum":" 1961","line":"    /// let abs_difference = (f.sin().asin() - f64::consts::PI / 2.0).abs();"},
{"lineNum":" 1962","line":"    ///"},
{"lineNum":" 1963","line":"    /// assert!(abs_difference < 1e-10);"},
{"lineNum":" 1964","line":"    /// ```"},
{"lineNum":" 1965","line":"    fn asin(self) -> Self;"},
{"lineNum":" 1966","line":""},
{"lineNum":" 1967","line":"    /// Computes the arccosine of a number. Return value is in radians in"},
{"lineNum":" 1968","line":"    /// the range [0, pi] or NaN if the number is outside the range"},
{"lineNum":" 1969","line":"    /// [-1, 1]."},
{"lineNum":" 1970","line":"    ///"},
{"lineNum":" 1971","line":"    /// ```"},
{"lineNum":" 1972","line":"    /// use num::traits::Float;"},
{"lineNum":" 1973","line":"    /// use std::f64;"},
{"lineNum":" 1974","line":"    ///"},
{"lineNum":" 1975","line":"    /// let f = f64::consts::PI / 4.0;"},
{"lineNum":" 1976","line":"    ///"},
{"lineNum":" 1977","line":"    /// // acos(cos(pi/4))"},
{"lineNum":" 1978","line":"    /// let abs_difference = (f.cos().acos() - f64::consts::PI / 4.0).abs();"},
{"lineNum":" 1979","line":"    ///"},
{"lineNum":" 1980","line":"    /// assert!(abs_difference < 1e-10);"},
{"lineNum":" 1981","line":"    /// ```"},
{"lineNum":" 1982","line":"    fn acos(self) -> Self;"},
{"lineNum":" 1983","line":""},
{"lineNum":" 1984","line":"    /// Computes the arctangent of a number. Return value is in radians in the"},
{"lineNum":" 1985","line":"    /// range [-pi/2, pi/2];"},
{"lineNum":" 1986","line":"    ///"},
{"lineNum":" 1987","line":"    /// ```"},
{"lineNum":" 1988","line":"    /// use num::traits::Float;"},
{"lineNum":" 1989","line":"    ///"},
{"lineNum":" 1990","line":"    /// let f = 1.0;"},
{"lineNum":" 1991","line":"    ///"},
{"lineNum":" 1992","line":"    /// // atan(tan(1))"},
{"lineNum":" 1993","line":"    /// let abs_difference = (f.tan().atan() - 1.0).abs();"},
{"lineNum":" 1994","line":"    ///"},
{"lineNum":" 1995","line":"    /// assert!(abs_difference < 1e-10);"},
{"lineNum":" 1996","line":"    /// ```"},
{"lineNum":" 1997","line":"    fn atan(self) -> Self;"},
{"lineNum":" 1998","line":""},
{"lineNum":" 1999","line":"    /// Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`)."},
{"lineNum":" 2000","line":"    ///"},
{"lineNum":" 2001","line":"    /// * `x = 0`, `y = 0`: `0`"},
{"lineNum":" 2002","line":"    /// * `x >= 0`: `arctan(y/x)` -> `[-pi/2, pi/2]`"},
{"lineNum":" 2003","line":"    /// * `y >= 0`: `arctan(y/x) + pi` -> `(pi/2, pi]`"},
{"lineNum":" 2004","line":"    /// * `y < 0`: `arctan(y/x) - pi` -> `(-pi, -pi/2)`"},
{"lineNum":" 2005","line":"    ///"},
{"lineNum":" 2006","line":"    /// ```"},
{"lineNum":" 2007","line":"    /// use num::traits::Float;"},
{"lineNum":" 2008","line":"    /// use std::f64;"},
{"lineNum":" 2009","line":"    ///"},
{"lineNum":" 2010","line":"    /// let pi = f64::consts::PI;"},
{"lineNum":" 2011","line":"    /// // All angles from horizontal right (+x)"},
{"lineNum":" 2012","line":"    /// // 45 deg counter-clockwise"},
{"lineNum":" 2013","line":"    /// let x1 = 3.0;"},
{"lineNum":" 2014","line":"    /// let y1 = -3.0;"},
{"lineNum":" 2015","line":"    ///"},
{"lineNum":" 2016","line":"    /// // 135 deg clockwise"},
{"lineNum":" 2017","line":"    /// let x2 = -3.0;"},
{"lineNum":" 2018","line":"    /// let y2 = 3.0;"},
{"lineNum":" 2019","line":"    ///"},
{"lineNum":" 2020","line":"    /// let abs_difference_1 = (y1.atan2(x1) - (-pi/4.0)).abs();"},
{"lineNum":" 2021","line":"    /// let abs_difference_2 = (y2.atan2(x2) - 3.0*pi/4.0).abs();"},
{"lineNum":" 2022","line":"    ///"},
{"lineNum":" 2023","line":"    /// assert!(abs_difference_1 < 1e-10);"},
{"lineNum":" 2024","line":"    /// assert!(abs_difference_2 < 1e-10);"},
{"lineNum":" 2025","line":"    /// ```"},
{"lineNum":" 2026","line":"    fn atan2(self, other: Self) -> Self;"},
{"lineNum":" 2027","line":""},
{"lineNum":" 2028","line":"    /// Simultaneously computes the sine and cosine of the number, `x`. Returns"},
{"lineNum":" 2029","line":"    /// `(sin(x), cos(x))`."},
{"lineNum":" 2030","line":"    ///"},
{"lineNum":" 2031","line":"    /// ```"},
{"lineNum":" 2032","line":"    /// use num::traits::Float;"},
{"lineNum":" 2033","line":"    /// use std::f64;"},
{"lineNum":" 2034","line":"    ///"},
{"lineNum":" 2035","line":"    /// let x = f64::consts::PI/4.0;"},
{"lineNum":" 2036","line":"    /// let f = x.sin_cos();"},
{"lineNum":" 2037","line":"    ///"},
{"lineNum":" 2038","line":"    /// let abs_difference_0 = (f.0 - x.sin()).abs();"},
{"lineNum":" 2039","line":"    /// let abs_difference_1 = (f.1 - x.cos()).abs();"},
{"lineNum":" 2040","line":"    ///"},
{"lineNum":" 2041","line":"    /// assert!(abs_difference_0 < 1e-10);"},
{"lineNum":" 2042","line":"    /// assert!(abs_difference_0 < 1e-10);"},
{"lineNum":" 2043","line":"    /// ```"},
{"lineNum":" 2044","line":"    fn sin_cos(self) -> (Self, Self);"},
{"lineNum":" 2045","line":""},
{"lineNum":" 2046","line":"    /// Returns `e^(self) - 1` in a way that is accurate even if the"},
{"lineNum":" 2047","line":"    /// number is close to zero."},
{"lineNum":" 2048","line":"    ///"},
{"lineNum":" 2049","line":"    /// ```"},
{"lineNum":" 2050","line":"    /// use num::traits::Float;"},
{"lineNum":" 2051","line":"    ///"},
{"lineNum":" 2052","line":"    /// let x = 7.0;"},
{"lineNum":" 2053","line":"    ///"},
{"lineNum":" 2054","line":"    /// // e^(ln(7)) - 1"},
{"lineNum":" 2055","line":"    /// let abs_difference = (x.ln().exp_m1() - 6.0).abs();"},
{"lineNum":" 2056","line":"    ///"},
{"lineNum":" 2057","line":"    /// assert!(abs_difference < 1e-10);"},
{"lineNum":" 2058","line":"    /// ```"},
{"lineNum":" 2059","line":"    fn exp_m1(self) -> Self;"},
{"lineNum":" 2060","line":""},
{"lineNum":" 2061","line":"    /// Returns `ln(1+n)` (natural logarithm) more accurately than if"},
{"lineNum":" 2062","line":"    /// the operations were performed separately."},
{"lineNum":" 2063","line":"    ///"},
{"lineNum":" 2064","line":"    /// ```"},
{"lineNum":" 2065","line":"    /// use num::traits::Float;"},
{"lineNum":" 2066","line":"    /// use std::f64;"},
{"lineNum":" 2067","line":"    ///"},
{"lineNum":" 2068","line":"    /// let x = f64::consts::E - 1.0;"},
{"lineNum":" 2069","line":"    ///"},
{"lineNum":" 2070","line":"    /// // ln(1 + (e - 1)) == ln(e) == 1"},
{"lineNum":" 2071","line":"    /// let abs_difference = (x.ln_1p() - 1.0).abs();"},
{"lineNum":" 2072","line":"    ///"},
{"lineNum":" 2073","line":"    /// assert!(abs_difference < 1e-10);"},
{"lineNum":" 2074","line":"    /// ```"},
{"lineNum":" 2075","line":"    fn ln_1p(self) -> Self;"},
{"lineNum":" 2076","line":""},
{"lineNum":" 2077","line":"    /// Hyperbolic sine function."},
{"lineNum":" 2078","line":"    ///"},
{"lineNum":" 2079","line":"    /// ```"},
{"lineNum":" 2080","line":"    /// use num::traits::Float;"},
{"lineNum":" 2081","line":"    /// use std::f64;"},
{"lineNum":" 2082","line":"    ///"},
{"lineNum":" 2083","line":"    /// let e = f64::consts::E;"},
{"lineNum":" 2084","line":"    /// let x = 1.0;"},
{"lineNum":" 2085","line":"    ///"},
{"lineNum":" 2086","line":"    /// let f = x.sinh();"},
{"lineNum":" 2087","line":"    /// // Solving sinh() at 1 gives `(e^2-1)/(2e)`"},
{"lineNum":" 2088","line":"    /// let g = (e*e - 1.0)/(2.0*e);"},
{"lineNum":" 2089","line":"    /// let abs_difference = (f - g).abs();"},
{"lineNum":" 2090","line":"    ///"},
{"lineNum":" 2091","line":"    /// assert!(abs_difference < 1e-10);"},
{"lineNum":" 2092","line":"    /// ```"},
{"lineNum":" 2093","line":"    fn sinh(self) -> Self;"},
{"lineNum":" 2094","line":""},
{"lineNum":" 2095","line":"    /// Hyperbolic cosine function."},
{"lineNum":" 2096","line":"    ///"},
{"lineNum":" 2097","line":"    /// ```"},
{"lineNum":" 2098","line":"    /// use num::traits::Float;"},
{"lineNum":" 2099","line":"    /// use std::f64;"},
{"lineNum":" 2100","line":"    ///"},
{"lineNum":" 2101","line":"    /// let e = f64::consts::E;"},
{"lineNum":" 2102","line":"    /// let x = 1.0;"},
{"lineNum":" 2103","line":"    /// let f = x.cosh();"},
{"lineNum":" 2104","line":"    /// // Solving cosh() at 1 gives this result"},
{"lineNum":" 2105","line":"    /// let g = (e*e + 1.0)/(2.0*e);"},
{"lineNum":" 2106","line":"    /// let abs_difference = (f - g).abs();"},
{"lineNum":" 2107","line":"    ///"},
{"lineNum":" 2108","line":"    /// // Same result"},
{"lineNum":" 2109","line":"    /// assert!(abs_difference < 1.0e-10);"},
{"lineNum":" 2110","line":"    /// ```"},
{"lineNum":" 2111","line":"    fn cosh(self) -> Self;"},
{"lineNum":" 2112","line":""},
{"lineNum":" 2113","line":"    /// Hyperbolic tangent function."},
{"lineNum":" 2114","line":"    ///"},
{"lineNum":" 2115","line":"    /// ```"},
{"lineNum":" 2116","line":"    /// use num::traits::Float;"},
{"lineNum":" 2117","line":"    /// use std::f64;"},
{"lineNum":" 2118","line":"    ///"},
{"lineNum":" 2119","line":"    /// let e = f64::consts::E;"},
{"lineNum":" 2120","line":"    /// let x = 1.0;"},
{"lineNum":" 2121","line":"    ///"},
{"lineNum":" 2122","line":"    /// let f = x.tanh();"},
{"lineNum":" 2123","line":"    /// // Solving tanh() at 1 gives `(1 - e^(-2))/(1 + e^(-2))`"},
{"lineNum":" 2124","line":"    /// let g = (1.0 - e.powi(-2))/(1.0 + e.powi(-2));"},
{"lineNum":" 2125","line":"    /// let abs_difference = (f - g).abs();"},
{"lineNum":" 2126","line":"    ///"},
{"lineNum":" 2127","line":"    /// assert!(abs_difference < 1.0e-10);"},
{"lineNum":" 2128","line":"    /// ```"},
{"lineNum":" 2129","line":"    fn tanh(self) -> Self;"},
{"lineNum":" 2130","line":""},
{"lineNum":" 2131","line":"    /// Inverse hyperbolic sine function."},
{"lineNum":" 2132","line":"    ///"},
{"lineNum":" 2133","line":"    /// ```"},
{"lineNum":" 2134","line":"    /// use num::traits::Float;"},
{"lineNum":" 2135","line":"    ///"},
{"lineNum":" 2136","line":"    /// let x = 1.0;"},
{"lineNum":" 2137","line":"    /// let f = x.sinh().asinh();"},
{"lineNum":" 2138","line":"    ///"},
{"lineNum":" 2139","line":"    /// let abs_difference = (f - x).abs();"},
{"lineNum":" 2140","line":"    ///"},
{"lineNum":" 2141","line":"    /// assert!(abs_difference < 1.0e-10);"},
{"lineNum":" 2142","line":"    /// ```"},
{"lineNum":" 2143","line":"    fn asinh(self) -> Self;"},
{"lineNum":" 2144","line":""},
{"lineNum":" 2145","line":"    /// Inverse hyperbolic cosine function."},
{"lineNum":" 2146","line":"    ///"},
{"lineNum":" 2147","line":"    /// ```"},
{"lineNum":" 2148","line":"    /// use num::traits::Float;"},
{"lineNum":" 2149","line":"    ///"},
{"lineNum":" 2150","line":"    /// let x = 1.0;"},
{"lineNum":" 2151","line":"    /// let f = x.cosh().acosh();"},
{"lineNum":" 2152","line":"    ///"},
{"lineNum":" 2153","line":"    /// let abs_difference = (f - x).abs();"},
{"lineNum":" 2154","line":"    ///"},
{"lineNum":" 2155","line":"    /// assert!(abs_difference < 1.0e-10);"},
{"lineNum":" 2156","line":"    /// ```"},
{"lineNum":" 2157","line":"    fn acosh(self) -> Self;"},
{"lineNum":" 2158","line":""},
{"lineNum":" 2159","line":"    /// Inverse hyperbolic tangent function."},
{"lineNum":" 2160","line":"    ///"},
{"lineNum":" 2161","line":"    /// ```"},
{"lineNum":" 2162","line":"    /// use num::traits::Float;"},
{"lineNum":" 2163","line":"    /// use std::f64;"},
{"lineNum":" 2164","line":"    ///"},
{"lineNum":" 2165","line":"    /// let e = f64::consts::E;"},
{"lineNum":" 2166","line":"    /// let f = e.tanh().atanh();"},
{"lineNum":" 2167","line":"    ///"},
{"lineNum":" 2168","line":"    /// let abs_difference = (f - e).abs();"},
{"lineNum":" 2169","line":"    ///"},
{"lineNum":" 2170","line":"    /// assert!(abs_difference < 1.0e-10);"},
{"lineNum":" 2171","line":"    /// ```"},
{"lineNum":" 2172","line":"    fn atanh(self) -> Self;"},
{"lineNum":" 2173","line":""},
{"lineNum":" 2174","line":""},
{"lineNum":" 2175","line":"    /// Returns the mantissa, base 2 exponent, and sign as integers, respectively."},
{"lineNum":" 2176","line":"    /// The original number can be recovered by `sign * mantissa * 2 ^ exponent`."},
{"lineNum":" 2177","line":"    /// The floating point encoding is documented in the [Reference][floating-point]."},
{"lineNum":" 2178","line":"    ///"},
{"lineNum":" 2179","line":"    /// ```"},
{"lineNum":" 2180","line":"    /// use num::traits::Float;"},
{"lineNum":" 2181","line":"    ///"},
{"lineNum":" 2182","line":"    /// let num = 2.0f32;"},
{"lineNum":" 2183","line":"    ///"},
{"lineNum":" 2184","line":"    /// // (8388608, -22, 1)"},
{"lineNum":" 2185","line":"    /// let (mantissa, exponent, sign) = Float::integer_decode(num);"},
{"lineNum":" 2186","line":"    /// let sign_f = sign as f32;"},
{"lineNum":" 2187","line":"    /// let mantissa_f = mantissa as f32;"},
{"lineNum":" 2188","line":"    /// let exponent_f = num.powf(exponent as f32);"},
{"lineNum":" 2189","line":"    ///"},
{"lineNum":" 2190","line":"    /// // 1 * 8388608 * 2^(-22) == 2"},
{"lineNum":" 2191","line":"    /// let abs_difference = (sign_f * mantissa_f * exponent_f - num).abs();"},
{"lineNum":" 2192","line":"    ///"},
{"lineNum":" 2193","line":"    /// assert!(abs_difference < 1e-10);"},
{"lineNum":" 2194","line":"    /// ```"},
{"lineNum":" 2195","line":"    /// [floating-point]: ../../../../../reference.html#machine-types"},
{"lineNum":" 2196","line":"    fn integer_decode(self) -> (u64, i16, i8);"},
{"lineNum":" 2197","line":"}"},
{"lineNum":" 2198","line":""},
{"lineNum":" 2199","line":"macro_rules! float_impl {"},
{"lineNum":" 2200","line":"    ($T:ident $decode:ident) => ("},
{"lineNum":" 2201","line":"        impl Float for $T {"},
{"lineNum":" 2202","line":"            fn nan() -> Self {"},
{"lineNum":" 2203","line":"                ::std::$T::NAN"},
{"lineNum":" 2204","line":"            }"},
{"lineNum":" 2205","line":""},
{"lineNum":" 2206","line":"            fn infinity() -> Self {"},
{"lineNum":" 2207","line":"                ::std::$T::INFINITY"},
{"lineNum":" 2208","line":"            }"},
{"lineNum":" 2209","line":""},
{"lineNum":" 2210","line":"            fn neg_infinity() -> Self {"},
{"lineNum":" 2211","line":"                ::std::$T::NEG_INFINITY"},
{"lineNum":" 2212","line":"            }"},
{"lineNum":" 2213","line":""},
{"lineNum":" 2214","line":"            fn neg_zero() -> Self {"},
{"lineNum":" 2215","line":"                -0.0"},
{"lineNum":" 2216","line":"            }"},
{"lineNum":" 2217","line":""},
{"lineNum":" 2218","line":"            fn min_value() -> Self {"},
{"lineNum":" 2219","line":"                ::std::$T::MIN"},
{"lineNum":" 2220","line":"            }"},
{"lineNum":" 2221","line":""},
{"lineNum":" 2222","line":"            fn min_positive_value() -> Self {"},
{"lineNum":" 2223","line":"                ::std::$T::MIN_POSITIVE"},
{"lineNum":" 2224","line":"            }"},
{"lineNum":" 2225","line":""},
{"lineNum":" 2226","line":"            fn max_value() -> Self {"},
{"lineNum":" 2227","line":"                ::std::$T::MAX"},
{"lineNum":" 2228","line":"            }"},
{"lineNum":" 2229","line":""},
{"lineNum":" 2230","line":"            fn is_nan(self) -> bool {"},
{"lineNum":" 2231","line":"                <$T>::is_nan(self)"},
{"lineNum":" 2232","line":"            }"},
{"lineNum":" 2233","line":""},
{"lineNum":" 2234","line":"            fn is_infinite(self) -> bool {"},
{"lineNum":" 2235","line":"                <$T>::is_infinite(self)"},
{"lineNum":" 2236","line":"            }"},
{"lineNum":" 2237","line":""},
{"lineNum":" 2238","line":"            fn is_finite(self) -> bool {"},
{"lineNum":" 2239","line":"                <$T>::is_finite(self)"},
{"lineNum":" 2240","line":"            }"},
{"lineNum":" 2241","line":""},
{"lineNum":" 2242","line":"            fn is_normal(self) -> bool {"},
{"lineNum":" 2243","line":"                <$T>::is_normal(self)"},
{"lineNum":" 2244","line":"            }"},
{"lineNum":" 2245","line":""},
{"lineNum":" 2246","line":"            fn classify(self) -> FpCategory {"},
{"lineNum":" 2247","line":"                <$T>::classify(self)"},
{"lineNum":" 2248","line":"            }"},
{"lineNum":" 2249","line":""},
{"lineNum":" 2250","line":"            fn floor(self) -> Self {"},
{"lineNum":" 2251","line":"                <$T>::floor(self)"},
{"lineNum":" 2252","line":"            }"},
{"lineNum":" 2253","line":""},
{"lineNum":" 2254","line":"            fn ceil(self) -> Self {"},
{"lineNum":" 2255","line":"                <$T>::ceil(self)"},
{"lineNum":" 2256","line":"            }"},
{"lineNum":" 2257","line":""},
{"lineNum":" 2258","line":"            fn round(self) -> Self {"},
{"lineNum":" 2259","line":"                <$T>::round(self)"},
{"lineNum":" 2260","line":"            }"},
{"lineNum":" 2261","line":""},
{"lineNum":" 2262","line":"            fn trunc(self) -> Self {"},
{"lineNum":" 2263","line":"                <$T>::trunc(self)"},
{"lineNum":" 2264","line":"            }"},
{"lineNum":" 2265","line":""},
{"lineNum":" 2266","line":"            fn fract(self) -> Self {"},
{"lineNum":" 2267","line":"                <$T>::fract(self)"},
{"lineNum":" 2268","line":"            }"},
{"lineNum":" 2269","line":""},
{"lineNum":" 2270","line":"            fn abs(self) -> Self {"},
{"lineNum":" 2271","line":"                <$T>::abs(self)"},
{"lineNum":" 2272","line":"            }"},
{"lineNum":" 2273","line":""},
{"lineNum":" 2274","line":"            fn signum(self) -> Self {"},
{"lineNum":" 2275","line":"                <$T>::signum(self)"},
{"lineNum":" 2276","line":"            }"},
{"lineNum":" 2277","line":""},
{"lineNum":" 2278","line":"            fn is_sign_positive(self) -> bool {"},
{"lineNum":" 2279","line":"                <$T>::is_sign_positive(self)"},
{"lineNum":" 2280","line":"            }"},
{"lineNum":" 2281","line":""},
{"lineNum":" 2282","line":"            fn is_sign_negative(self) -> bool {"},
{"lineNum":" 2283","line":"                <$T>::is_sign_negative(self)"},
{"lineNum":" 2284","line":"            }"},
{"lineNum":" 2285","line":""},
{"lineNum":" 2286","line":"            fn mul_add(self, a: Self, b: Self) -> Self {"},
{"lineNum":" 2287","line":"                <$T>::mul_add(self, a, b)"},
{"lineNum":" 2288","line":"            }"},
{"lineNum":" 2289","line":""},
{"lineNum":" 2290","line":"            fn recip(self) -> Self {"},
{"lineNum":" 2291","line":"                <$T>::recip(self)"},
{"lineNum":" 2292","line":"            }"},
{"lineNum":" 2293","line":""},
{"lineNum":" 2294","line":"            fn powi(self, n: i32) -> Self {"},
{"lineNum":" 2295","line":"                <$T>::powi(self, n)"},
{"lineNum":" 2296","line":"            }"},
{"lineNum":" 2297","line":""},
{"lineNum":" 2298","line":"            fn powf(self, n: Self) -> Self {"},
{"lineNum":" 2299","line":"                <$T>::powf(self, n)"},
{"lineNum":" 2300","line":"            }"},
{"lineNum":" 2301","line":""},
{"lineNum":" 2302","line":"            fn sqrt(self) -> Self {"},
{"lineNum":" 2303","line":"                <$T>::sqrt(self)"},
{"lineNum":" 2304","line":"            }"},
{"lineNum":" 2305","line":""},
{"lineNum":" 2306","line":"            fn exp(self) -> Self {"},
{"lineNum":" 2307","line":"                <$T>::exp(self)"},
{"lineNum":" 2308","line":"            }"},
{"lineNum":" 2309","line":""},
{"lineNum":" 2310","line":"            fn exp2(self) -> Self {"},
{"lineNum":" 2311","line":"                <$T>::exp2(self)"},
{"lineNum":" 2312","line":"            }"},
{"lineNum":" 2313","line":""},
{"lineNum":" 2314","line":"            fn ln(self) -> Self {"},
{"lineNum":" 2315","line":"                <$T>::ln(self)"},
{"lineNum":" 2316","line":"            }"},
{"lineNum":" 2317","line":""},
{"lineNum":" 2318","line":"            fn log(self, base: Self) -> Self {"},
{"lineNum":" 2319","line":"                <$T>::log(self, base)"},
{"lineNum":" 2320","line":"            }"},
{"lineNum":" 2321","line":""},
{"lineNum":" 2322","line":"            fn log2(self) -> Self {"},
{"lineNum":" 2323","line":"                <$T>::log2(self)"},
{"lineNum":" 2324","line":"            }"},
{"lineNum":" 2325","line":""},
{"lineNum":" 2326","line":"            fn log10(self) -> Self {"},
{"lineNum":" 2327","line":"                <$T>::log10(self)"},
{"lineNum":" 2328","line":"            }"},
{"lineNum":" 2329","line":""},
{"lineNum":" 2330","line":"            fn max(self, other: Self) -> Self {"},
{"lineNum":" 2331","line":"                <$T>::max(self, other)"},
{"lineNum":" 2332","line":"            }"},
{"lineNum":" 2333","line":""},
{"lineNum":" 2334","line":"            fn min(self, other: Self) -> Self {"},
{"lineNum":" 2335","line":"                <$T>::min(self, other)"},
{"lineNum":" 2336","line":"            }"},
{"lineNum":" 2337","line":""},
{"lineNum":" 2338","line":"            fn abs_sub(self, other: Self) -> Self {"},
{"lineNum":" 2339","line":"                <$T>::abs_sub(self, other)"},
{"lineNum":" 2340","line":"            }"},
{"lineNum":" 2341","line":""},
{"lineNum":" 2342","line":"            fn cbrt(self) -> Self {"},
{"lineNum":" 2343","line":"                <$T>::cbrt(self)"},
{"lineNum":" 2344","line":"            }"},
{"lineNum":" 2345","line":""},
{"lineNum":" 2346","line":"            fn hypot(self, other: Self) -> Self {"},
{"lineNum":" 2347","line":"                <$T>::hypot(self, other)"},
{"lineNum":" 2348","line":"            }"},
{"lineNum":" 2349","line":""},
{"lineNum":" 2350","line":"            fn sin(self) -> Self {"},
{"lineNum":" 2351","line":"                <$T>::sin(self)"},
{"lineNum":" 2352","line":"            }"},
{"lineNum":" 2353","line":""},
{"lineNum":" 2354","line":"            fn cos(self) -> Self {"},
{"lineNum":" 2355","line":"                <$T>::cos(self)"},
{"lineNum":" 2356","line":"            }"},
{"lineNum":" 2357","line":""},
{"lineNum":" 2358","line":"            fn tan(self) -> Self {"},
{"lineNum":" 2359","line":"                <$T>::tan(self)"},
{"lineNum":" 2360","line":"            }"},
{"lineNum":" 2361","line":""},
{"lineNum":" 2362","line":"            fn asin(self) -> Self {"},
{"lineNum":" 2363","line":"                <$T>::asin(self)"},
{"lineNum":" 2364","line":"            }"},
{"lineNum":" 2365","line":""},
{"lineNum":" 2366","line":"            fn acos(self) -> Self {"},
{"lineNum":" 2367","line":"                <$T>::acos(self)"},
{"lineNum":" 2368","line":"            }"},
{"lineNum":" 2369","line":""},
{"lineNum":" 2370","line":"            fn atan(self) -> Self {"},
{"lineNum":" 2371","line":"                <$T>::atan(self)"},
{"lineNum":" 2372","line":"            }"},
{"lineNum":" 2373","line":""},
{"lineNum":" 2374","line":"            fn atan2(self, other: Self) -> Self {"},
{"lineNum":" 2375","line":"                <$T>::atan2(self, other)"},
{"lineNum":" 2376","line":"            }"},
{"lineNum":" 2377","line":""},
{"lineNum":" 2378","line":"            fn sin_cos(self) -> (Self, Self) {"},
{"lineNum":" 2379","line":"                <$T>::sin_cos(self)"},
{"lineNum":" 2380","line":"            }"},
{"lineNum":" 2381","line":""},
{"lineNum":" 2382","line":"            fn exp_m1(self) -> Self {"},
{"lineNum":" 2383","line":"                <$T>::exp_m1(self)"},
{"lineNum":" 2384","line":"            }"},
{"lineNum":" 2385","line":""},
{"lineNum":" 2386","line":"            fn ln_1p(self) -> Self {"},
{"lineNum":" 2387","line":"                <$T>::ln_1p(self)"},
{"lineNum":" 2388","line":"            }"},
{"lineNum":" 2389","line":""},
{"lineNum":" 2390","line":"            fn sinh(self) -> Self {"},
{"lineNum":" 2391","line":"                <$T>::sinh(self)"},
{"lineNum":" 2392","line":"            }"},
{"lineNum":" 2393","line":""},
{"lineNum":" 2394","line":"            fn cosh(self) -> Self {"},
{"lineNum":" 2395","line":"                <$T>::cosh(self)"},
{"lineNum":" 2396","line":"            }"},
{"lineNum":" 2397","line":""},
{"lineNum":" 2398","line":"            fn tanh(self) -> Self {"},
{"lineNum":" 2399","line":"                <$T>::tanh(self)"},
{"lineNum":" 2400","line":"            }"},
{"lineNum":" 2401","line":""},
{"lineNum":" 2402","line":"            fn asinh(self) -> Self {"},
{"lineNum":" 2403","line":"                <$T>::asinh(self)"},
{"lineNum":" 2404","line":"            }"},
{"lineNum":" 2405","line":""},
{"lineNum":" 2406","line":"            fn acosh(self) -> Self {"},
{"lineNum":" 2407","line":"                <$T>::acosh(self)"},
{"lineNum":" 2408","line":"            }"},
{"lineNum":" 2409","line":""},
{"lineNum":" 2410","line":"            fn atanh(self) -> Self {"},
{"lineNum":" 2411","line":"                <$T>::atanh(self)"},
{"lineNum":" 2412","line":"            }"},
{"lineNum":" 2413","line":""},
{"lineNum":" 2414","line":"            fn integer_decode(self) -> (u64, i16, i8) {"},
{"lineNum":" 2415","line":"                $decode(self)"},
{"lineNum":" 2416","line":"            }"},
{"lineNum":" 2417","line":"        }"},
{"lineNum":" 2418","line":"    )"},
{"lineNum":" 2419","line":"}"},
{"lineNum":" 2420","line":""},
{"lineNum":" 2421","line":"fn integer_decode_f32(f: f32) -> (u64, i16, i8) {"},
{"lineNum":" 2422","line":"    let bits: u32 = unsafe { mem::transmute(f) };"},
{"lineNum":" 2423","line":"    let sign: i8 = if bits >> 31 == 0 { 1 } else { -1 };"},
{"lineNum":" 2424","line":"    let mut exponent: i16 = ((bits >> 23) & 0xff) as i16;"},
{"lineNum":" 2425","line":"    let mantissa = if exponent == 0 {"},
{"lineNum":" 2426","line":"        (bits & 0x7fffff) << 1"},
{"lineNum":" 2427","line":"    } else {"},
{"lineNum":" 2428","line":"        (bits & 0x7fffff) | 0x800000"},
{"lineNum":" 2429","line":"    };"},
{"lineNum":" 2430","line":"    // Exponent bias + mantissa shift"},
{"lineNum":" 2431","line":"    exponent -= 127 + 23;"},
{"lineNum":" 2432","line":"    (mantissa as u64, exponent, sign)"},
{"lineNum":" 2433","line":"}"},
{"lineNum":" 2434","line":""},
{"lineNum":" 2435","line":"fn integer_decode_f64(f: f64) -> (u64, i16, i8) {"},
{"lineNum":" 2436","line":"    let bits: u64 = unsafe { mem::transmute(f) };"},
{"lineNum":" 2437","line":"    let sign: i8 = if bits >> 63 == 0 { 1 } else { -1 };"},
{"lineNum":" 2438","line":"    let mut exponent: i16 = ((bits >> 52) & 0x7ff) as i16;"},
{"lineNum":" 2439","line":"    let mantissa = if exponent == 0 {"},
{"lineNum":" 2440","line":"        (bits & 0xfffffffffffff) << 1"},
{"lineNum":" 2441","line":"    } else {"},
{"lineNum":" 2442","line":"        (bits & 0xfffffffffffff) | 0x10000000000000"},
{"lineNum":" 2443","line":"    };"},
{"lineNum":" 2444","line":"    // Exponent bias + mantissa shift"},
{"lineNum":" 2445","line":"    exponent -= 1023 + 52;"},
{"lineNum":" 2446","line":"    (mantissa, exponent, sign)"},
{"lineNum":" 2447","line":"}"},
{"lineNum":" 2448","line":""},
{"lineNum":" 2449","line":"float_impl!(f32 integer_decode_f32);"},
{"lineNum":" 2450","line":"float_impl!(f64 integer_decode_f64);"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "telos-75e57523dafdbeb2", "date" : "2016-02-11 00:11:19", "instrumented" : 7, "covered" : 0,};
var merged_data = [];
