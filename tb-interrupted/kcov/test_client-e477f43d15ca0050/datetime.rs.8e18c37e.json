var data = {lines:[
{"lineNum":"    1","line":"// This is a part of rust-chrono."},
{"lineNum":"    2","line":"// Copyright (c) 2014-2015, Kang Seonghoon."},
{"lineNum":"    3","line":"// See README.md and LICENSE.txt for details."},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"/*!"},
{"lineNum":"    6","line":" * ISO 8601 date and time with time zone."},
{"lineNum":"    7","line":" */"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"use std::{str, fmt, hash};"},
{"lineNum":"   10","line":"use std::cmp::Ordering;"},
{"lineNum":"   11","line":"use std::ops::{Add, Sub};"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"use {Weekday, Timelike, Datelike};"},
{"lineNum":"   14","line":"use offset::{TimeZone, Offset};"},
{"lineNum":"   15","line":"use offset::utc::UTC;"},
{"lineNum":"   16","line":"use offset::local::Local;"},
{"lineNum":"   17","line":"use offset::fixed::FixedOffset;"},
{"lineNum":"   18","line":"use duration::Duration;"},
{"lineNum":"   19","line":"use naive::time::NaiveTime;"},
{"lineNum":"   20","line":"use naive::datetime::NaiveDateTime;"},
{"lineNum":"   21","line":"use date::Date;"},
{"lineNum":"   22","line":"use format::{Item, Numeric, Pad, Fixed};"},
{"lineNum":"   23","line":"use format::{parse, Parsed, ParseError, ParseResult, DelayedFormat, StrftimeItems};"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"/// ISO 8601 combined date and time with time zone."},
{"lineNum":"   26","line":"#[derive(Clone)]"},
{"lineNum":"   27","line":"#[cfg_attr(feature = \"rustc-serialize\", derive(RustcEncodable, RustcDecodable))]"},
{"lineNum":"   28","line":"pub struct DateTime<Tz: TimeZone> {"},
{"lineNum":"   29","line":"    datetime: NaiveDateTime,"},
{"lineNum":"   30","line":"    offset: Tz::Offset,"},
{"lineNum":"   31","line":"}"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"impl<Tz: TimeZone> DateTime<Tz> {"},
{"lineNum":"   34","line":"    /// Makes a new `DateTime` with given *UTC* datetime and offset."},
{"lineNum":"   35","line":"    /// The local datetime should be constructed via the `TimeZone` trait."},
{"lineNum":"   36","line":"    //"},
{"lineNum":"   37","line":"    // note: this constructor is purposedly not named to `new` to discourage the direct usage."},
{"lineNum":"   38","line":"    #[inline]"},
{"lineNum":"   39","line":"    pub fn from_utc(datetime: NaiveDateTime, offset: Tz::Offset) -> DateTime<Tz> {","class":"linePartCov","hits":"2","order":"1138","possible_hits":"3",},
{"lineNum":"   40","line":"        DateTime { datetime: datetime, offset: offset }"},
{"lineNum":"   41","line":"    }"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"    /// Retrieves a date component."},
{"lineNum":"   44","line":"    #[inline]"},
{"lineNum":"   45","line":"    pub fn date(&self) -> Date<Tz> {"},
{"lineNum":"   46","line":"        Date::from_utc(self.naive_local().date(), self.offset.clone())"},
{"lineNum":"   47","line":"    }"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"    /// Retrieves a time component."},
{"lineNum":"   50","line":"    /// Unlike `date`, this is not associated to the time zone."},
{"lineNum":"   51","line":"    #[inline]"},
{"lineNum":"   52","line":"    pub fn time(&self) -> NaiveTime {"},
{"lineNum":"   53","line":"        self.datetime.time() + self.offset.local_minus_utc()"},
{"lineNum":"   54","line":"    }"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"    /// Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC"},
{"lineNum":"   57","line":"    /// (aka \"UNIX timestamp\")."},
{"lineNum":"   58","line":"    #[inline]"},
{"lineNum":"   59","line":"    pub fn timestamp(&self) -> i64 {"},
{"lineNum":"   60","line":"        self.datetime.timestamp()"},
{"lineNum":"   61","line":"    }"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"    /// *Deprecated*: Same to `DateTime::timestamp`."},
{"lineNum":"   64","line":"    #[inline]"},
{"lineNum":"   65","line":"    pub fn num_seconds_from_unix_epoch(&self) -> i64 {"},
{"lineNum":"   66","line":"        self.timestamp()"},
{"lineNum":"   67","line":"    }"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"    /// Retrieves an associated offset from UTC."},
{"lineNum":"   70","line":"    #[inline]"},
{"lineNum":"   71","line":"    pub fn offset<\'a>(&\'a self) -> &\'a Tz::Offset {"},
{"lineNum":"   72","line":"        &self.offset"},
{"lineNum":"   73","line":"    }"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"    /// Retrieves an associated time zone."},
{"lineNum":"   76","line":"    #[inline]"},
{"lineNum":"   77","line":"    pub fn timezone(&self) -> Tz {"},
{"lineNum":"   78","line":"        TimeZone::from_offset(&self.offset)"},
{"lineNum":"   79","line":"    }"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"    /// Changes the associated time zone."},
{"lineNum":"   82","line":"    /// This does not change the actual `DateTime` (but will change the string representation)."},
{"lineNum":"   83","line":"    #[inline]"},
{"lineNum":"   84","line":"    pub fn with_timezone<Tz2: TimeZone>(&self, tz: &Tz2) -> DateTime<Tz2> {"},
{"lineNum":"   85","line":"        tz.from_utc_datetime(&self.datetime)"},
{"lineNum":"   86","line":"    }"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"    /// Adds given `Duration` to the current date and time."},
{"lineNum":"   89","line":"    ///"},
{"lineNum":"   90","line":"    /// Returns `None` when it will result in overflow."},
{"lineNum":"   91","line":"    #[inline]"},
{"lineNum":"   92","line":"    pub fn checked_add(self, rhs: Duration) -> Option<DateTime<Tz>> {"},
{"lineNum":"   93","line":"        let datetime = try_opt!(self.datetime.checked_add(rhs));"},
{"lineNum":"   94","line":"        Some(DateTime { datetime: datetime, offset: self.offset })"},
{"lineNum":"   95","line":"    }"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"    /// Subtracts given `Duration` from the current date and time."},
{"lineNum":"   98","line":"    ///"},
{"lineNum":"   99","line":"    /// Returns `None` when it will result in overflow."},
{"lineNum":"  100","line":"    #[inline]"},
{"lineNum":"  101","line":"    pub fn checked_sub(self, rhs: Duration) -> Option<DateTime<Tz>> {"},
{"lineNum":"  102","line":"        let datetime = try_opt!(self.datetime.checked_sub(rhs));"},
{"lineNum":"  103","line":"        Some(DateTime { datetime: datetime, offset: self.offset })"},
{"lineNum":"  104","line":"    }"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"    /// Returns a view to the naive UTC datetime."},
{"lineNum":"  107","line":"    #[inline]"},
{"lineNum":"  108","line":"    pub fn naive_utc(&self) -> NaiveDateTime {"},
{"lineNum":"  109","line":"        self.datetime"},
{"lineNum":"  110","line":"    }"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"    /// Returns a view to the naive local datetime."},
{"lineNum":"  113","line":"    #[inline]"},
{"lineNum":"  114","line":"    pub fn naive_local(&self) -> NaiveDateTime {"},
{"lineNum":"  115","line":"        self.datetime + self.offset.local_minus_utc()"},
{"lineNum":"  116","line":"    }"},
{"lineNum":"  117","line":"}"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"/// Maps the local datetime to other datetime with given conversion function."},
{"lineNum":"  120","line":"fn map_local<Tz: TimeZone, F>(dt: &DateTime<Tz>, mut f: F) -> Option<DateTime<Tz>>"},
{"lineNum":"  121","line":"        where F: FnMut(NaiveDateTime) -> Option<NaiveDateTime> {"},
{"lineNum":"  122","line":"    f(dt.naive_local()).and_then(|datetime| dt.timezone().from_local_datetime(&datetime).single())"},
{"lineNum":"  123","line":"}"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"impl DateTime<FixedOffset> {"},
{"lineNum":"  126","line":"    /// Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,"},
{"lineNum":"  127","line":"    /// then returns a new `DateTime` with a parsed `FixedOffset`."},
{"lineNum":"  128","line":"    pub fn parse_from_rfc2822(s: &str) -> ParseResult<DateTime<FixedOffset>> {"},
{"lineNum":"  129","line":"        const ITEMS: &\'static [Item<\'static>] = &[Item::Fixed(Fixed::RFC2822)];"},
{"lineNum":"  130","line":"        let mut parsed = Parsed::new();"},
{"lineNum":"  131","line":"        try!(parse(&mut parsed, s, ITEMS.iter().cloned()));"},
{"lineNum":"  132","line":"        parsed.to_datetime()"},
{"lineNum":"  133","line":"    }"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"    /// Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,"},
{"lineNum":"  136","line":"    /// then returns a new `DateTime` with a parsed `FixedOffset`."},
{"lineNum":"  137","line":"    ///"},
{"lineNum":"  138","line":"    /// Why isn\'t this named `parse_from_iso8601`? That\'s because ISO 8601 allows some freedom"},
{"lineNum":"  139","line":"    /// over the syntax and RFC 3339 exercises that freedom to rigidly define a fixed format."},
{"lineNum":"  140","line":"    pub fn parse_from_rfc3339(s: &str) -> ParseResult<DateTime<FixedOffset>> {"},
{"lineNum":"  141","line":"        const ITEMS: &\'static [Item<\'static>] = &[Item::Fixed(Fixed::RFC3339)];"},
{"lineNum":"  142","line":"        let mut parsed = Parsed::new();"},
{"lineNum":"  143","line":"        try!(parse(&mut parsed, s, ITEMS.iter().cloned()));"},
{"lineNum":"  144","line":"        parsed.to_datetime()"},
{"lineNum":"  145","line":"    }"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"    /// Parses a string with the specified format string and"},
{"lineNum":"  148","line":"    /// returns a new `DateTime` with a parsed `FixedOffset`."},
{"lineNum":"  149","line":"    /// See the [`format::strftime` module](../format/strftime/index.html)"},
{"lineNum":"  150","line":"    /// on the supported escape sequences."},
{"lineNum":"  151","line":"    ///"},
{"lineNum":"  152","line":"    /// See also `Offset::datetime_from_str` which gives a local `DateTime` on specific time zone."},
{"lineNum":"  153","line":"    pub fn parse_from_str(s: &str, fmt: &str) -> ParseResult<DateTime<FixedOffset>> {"},
{"lineNum":"  154","line":"        let mut parsed = Parsed::new();"},
{"lineNum":"  155","line":"        try!(parse(&mut parsed, s, StrftimeItems::new(fmt)));"},
{"lineNum":"  156","line":"        parsed.to_datetime()"},
{"lineNum":"  157","line":"    }"},
{"lineNum":"  158","line":"}"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"impl<Tz: TimeZone> DateTime<Tz> where Tz::Offset: fmt::Display {"},
{"lineNum":"  161","line":"    /// Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`."},
{"lineNum":"  162","line":"    pub fn to_rfc2822(&self) -> String {"},
{"lineNum":"  163","line":"        const ITEMS: &\'static [Item<\'static>] = &[Item::Fixed(Fixed::RFC2822)];"},
{"lineNum":"  164","line":"        self.format_with_items(ITEMS.iter().cloned()).to_string()"},
{"lineNum":"  165","line":"    }"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"    /// Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`."},
{"lineNum":"  168","line":"    pub fn to_rfc3339(&self) -> String {"},
{"lineNum":"  169","line":"        const ITEMS: &\'static [Item<\'static>] = &[Item::Fixed(Fixed::RFC3339)];"},
{"lineNum":"  170","line":"        self.format_with_items(ITEMS.iter().cloned()).to_string()"},
{"lineNum":"  171","line":"    }"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"    /// Formats the combined date and time with the specified formatting items."},
{"lineNum":"  174","line":"    #[inline]"},
{"lineNum":"  175","line":"    pub fn format_with_items<\'a, I>(&self, items: I) -> DelayedFormat<I>"},
{"lineNum":"  176","line":"            where I: Iterator<Item=Item<\'a>> + Clone {"},
{"lineNum":"  177","line":"        let local = self.naive_local();"},
{"lineNum":"  178","line":"        DelayedFormat::new_with_offset(Some(local.date()), Some(local.time()), &self.offset, items)"},
{"lineNum":"  179","line":"    }"},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"    /// Formats the combined date and time with the specified format string."},
{"lineNum":"  182","line":"    /// See the [`format::strftime` module](../format/strftime/index.html)"},
{"lineNum":"  183","line":"    /// on the supported escape sequences."},
{"lineNum":"  184","line":"    #[inline]"},
{"lineNum":"  185","line":"    pub fn format<\'a>(&self, fmt: &\'a str) -> DelayedFormat<StrftimeItems<\'a>> {"},
{"lineNum":"  186","line":"        self.format_with_items(StrftimeItems::new(fmt))"},
{"lineNum":"  187","line":"    }"},
{"lineNum":"  188","line":"}"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"impl<Tz: TimeZone> Datelike for DateTime<Tz> {"},
{"lineNum":"  191","line":"    #[inline] fn year(&self) -> i32 { self.naive_local().year() }"},
{"lineNum":"  192","line":"    #[inline] fn month(&self) -> u32 { self.naive_local().month() }"},
{"lineNum":"  193","line":"    #[inline] fn month0(&self) -> u32 { self.naive_local().month0() }"},
{"lineNum":"  194","line":"    #[inline] fn day(&self) -> u32 { self.naive_local().day() }"},
{"lineNum":"  195","line":"    #[inline] fn day0(&self) -> u32 { self.naive_local().day0() }"},
{"lineNum":"  196","line":"    #[inline] fn ordinal(&self) -> u32 { self.naive_local().ordinal() }"},
{"lineNum":"  197","line":"    #[inline] fn ordinal0(&self) -> u32 { self.naive_local().ordinal0() }"},
{"lineNum":"  198","line":"    #[inline] fn weekday(&self) -> Weekday { self.naive_local().weekday() }"},
{"lineNum":"  199","line":"    #[inline] fn isoweekdate(&self) -> (i32, u32, Weekday) { self.naive_local().isoweekdate() }"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"    #[inline]"},
{"lineNum":"  202","line":"    fn with_year(&self, year: i32) -> Option<DateTime<Tz>> {"},
{"lineNum":"  203","line":"        map_local(self, |datetime| datetime.with_year(year))"},
{"lineNum":"  204","line":"    }"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"    #[inline]"},
{"lineNum":"  207","line":"    fn with_month(&self, month: u32) -> Option<DateTime<Tz>> {"},
{"lineNum":"  208","line":"        map_local(self, |datetime| datetime.with_month(month))"},
{"lineNum":"  209","line":"    }"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"    #[inline]"},
{"lineNum":"  212","line":"    fn with_month0(&self, month0: u32) -> Option<DateTime<Tz>> {"},
{"lineNum":"  213","line":"        map_local(self, |datetime| datetime.with_month0(month0))"},
{"lineNum":"  214","line":"    }"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"    #[inline]"},
{"lineNum":"  217","line":"    fn with_day(&self, day: u32) -> Option<DateTime<Tz>> {"},
{"lineNum":"  218","line":"        map_local(self, |datetime| datetime.with_day(day))"},
{"lineNum":"  219","line":"    }"},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"    #[inline]"},
{"lineNum":"  222","line":"    fn with_day0(&self, day0: u32) -> Option<DateTime<Tz>> {"},
{"lineNum":"  223","line":"        map_local(self, |datetime| datetime.with_day0(day0))"},
{"lineNum":"  224","line":"    }"},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"    #[inline]"},
{"lineNum":"  227","line":"    fn with_ordinal(&self, ordinal: u32) -> Option<DateTime<Tz>> {"},
{"lineNum":"  228","line":"        map_local(self, |datetime| datetime.with_ordinal(ordinal))"},
{"lineNum":"  229","line":"    }"},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"    #[inline]"},
{"lineNum":"  232","line":"    fn with_ordinal0(&self, ordinal0: u32) -> Option<DateTime<Tz>> {"},
{"lineNum":"  233","line":"        map_local(self, |datetime| datetime.with_ordinal0(ordinal0))"},
{"lineNum":"  234","line":"    }"},
{"lineNum":"  235","line":"}"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"impl<Tz: TimeZone> Timelike for DateTime<Tz> {"},
{"lineNum":"  238","line":"    #[inline] fn hour(&self) -> u32 { self.naive_local().hour() }"},
{"lineNum":"  239","line":"    #[inline] fn minute(&self) -> u32 { self.naive_local().minute() }"},
{"lineNum":"  240","line":"    #[inline] fn second(&self) -> u32 { self.naive_local().second() }"},
{"lineNum":"  241","line":"    #[inline] fn nanosecond(&self) -> u32 { self.naive_local().nanosecond() }"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"    #[inline]"},
{"lineNum":"  244","line":"    fn with_hour(&self, hour: u32) -> Option<DateTime<Tz>> {"},
{"lineNum":"  245","line":"        map_local(self, |datetime| datetime.with_hour(hour))"},
{"lineNum":"  246","line":"    }"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"    #[inline]"},
{"lineNum":"  249","line":"    fn with_minute(&self, min: u32) -> Option<DateTime<Tz>> {"},
{"lineNum":"  250","line":"        map_local(self, |datetime| datetime.with_minute(min))"},
{"lineNum":"  251","line":"    }"},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"    #[inline]"},
{"lineNum":"  254","line":"    fn with_second(&self, sec: u32) -> Option<DateTime<Tz>> {"},
{"lineNum":"  255","line":"        map_local(self, |datetime| datetime.with_second(sec))"},
{"lineNum":"  256","line":"    }"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"    #[inline]"},
{"lineNum":"  259","line":"    fn with_nanosecond(&self, nano: u32) -> Option<DateTime<Tz>> {"},
{"lineNum":"  260","line":"        map_local(self, |datetime| datetime.with_nanosecond(nano))"},
{"lineNum":"  261","line":"    }"},
{"lineNum":"  262","line":"}"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"// we need them as automatic impls cannot handle associated types"},
{"lineNum":"  265","line":"impl<Tz: TimeZone> Copy for DateTime<Tz> where <Tz as TimeZone>::Offset: Copy {}"},
{"lineNum":"  266","line":"unsafe impl<Tz: TimeZone> Send for DateTime<Tz> where <Tz as TimeZone>::Offset: Send {}"},
{"lineNum":"  267","line":""},
{"lineNum":"  268","line":"impl<Tz: TimeZone, Tz2: TimeZone> PartialEq<DateTime<Tz2>> for DateTime<Tz> {"},
{"lineNum":"  269","line":"    fn eq(&self, other: &DateTime<Tz2>) -> bool { self.datetime == other.datetime }"},
{"lineNum":"  270","line":"}"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"impl<Tz: TimeZone> Eq for DateTime<Tz> {"},
{"lineNum":"  273","line":"}"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"impl<Tz: TimeZone> PartialOrd for DateTime<Tz> {"},
{"lineNum":"  276","line":"    fn partial_cmp(&self, other: &DateTime<Tz>) -> Option<Ordering> {","class":"linePartCov","hits":"2","order":"1154","possible_hits":"3",},
{"lineNum":"  277","line":"        self.datetime.partial_cmp(&other.datetime)","class":"lineCov","hits":"1","order":"1155","possible_hits":"1",},
{"lineNum":"  278","line":"    }"},
{"lineNum":"  279","line":"}"},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"impl<Tz: TimeZone> Ord for DateTime<Tz> {"},
{"lineNum":"  282","line":"    fn cmp(&self, other: &DateTime<Tz>) -> Ordering { self.datetime.cmp(&other.datetime) }"},
{"lineNum":"  283","line":"}"},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"impl<Tz: TimeZone> hash::Hash for DateTime<Tz> {"},
{"lineNum":"  286","line":"    fn hash<H: hash::Hasher>(&self, state: &mut H) { self.datetime.hash(state) }"},
{"lineNum":"  287","line":"}"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"impl<Tz: TimeZone> Add<Duration> for DateTime<Tz> {"},
{"lineNum":"  290","line":"    type Output = DateTime<Tz>;"},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"    #[inline]"},
{"lineNum":"  293","line":"    fn add(self, rhs: Duration) -> DateTime<Tz> {"},
{"lineNum":"  294","line":"        self.checked_add(rhs).expect(\"`DateTime + Duration` overflowed\")"},
{"lineNum":"  295","line":"    }"},
{"lineNum":"  296","line":"}"},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"impl<Tz: TimeZone, Tz2: TimeZone> Sub<DateTime<Tz2>> for DateTime<Tz> {"},
{"lineNum":"  299","line":"    type Output = Duration;"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"    #[inline]"},
{"lineNum":"  302","line":"    fn sub(self, rhs: DateTime<Tz2>) -> Duration { self.datetime - rhs.datetime }"},
{"lineNum":"  303","line":"}"},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"impl<Tz: TimeZone> Sub<Duration> for DateTime<Tz> {"},
{"lineNum":"  306","line":"    type Output = DateTime<Tz>;"},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"    #[inline]"},
{"lineNum":"  309","line":"    fn sub(self, rhs: Duration) -> DateTime<Tz> {"},
{"lineNum":"  310","line":"        self.checked_sub(rhs).expect(\"`DateTime - Duration` overflowed\")"},
{"lineNum":"  311","line":"    }"},
{"lineNum":"  312","line":"}"},
{"lineNum":"  313","line":""},
{"lineNum":"  314","line":"impl<Tz: TimeZone> fmt::Debug for DateTime<Tz> {"},
{"lineNum":"  315","line":"    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"},
{"lineNum":"  316","line":"        write!(f, \"{:?}{:?}\", self.naive_local(), self.offset)"},
{"lineNum":"  317","line":"    }"},
{"lineNum":"  318","line":"}"},
{"lineNum":"  319","line":""},
{"lineNum":"  320","line":"impl<Tz: TimeZone> fmt::Display for DateTime<Tz> where Tz::Offset: fmt::Display {"},
{"lineNum":"  321","line":"    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"},
{"lineNum":"  322","line":"        write!(f, \"{} {}\", self.naive_local(), self.offset)"},
{"lineNum":"  323","line":"    }"},
{"lineNum":"  324","line":"}"},
{"lineNum":"  325","line":""},
{"lineNum":"  326","line":"impl str::FromStr for DateTime<FixedOffset> {"},
{"lineNum":"  327","line":"    type Err = ParseError;"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"    fn from_str(s: &str) -> ParseResult<DateTime<FixedOffset>> {"},
{"lineNum":"  330","line":"        const ITEMS: &\'static [Item<\'static>] = &["},
{"lineNum":"  331","line":"            Item::Space(\"\"), Item::Numeric(Numeric::Year, Pad::Zero),"},
{"lineNum":"  332","line":"            Item::Space(\"\"), Item::Literal(\"-\"),"},
{"lineNum":"  333","line":"            Item::Space(\"\"), Item::Numeric(Numeric::Month, Pad::Zero),"},
{"lineNum":"  334","line":"            Item::Space(\"\"), Item::Literal(\"-\"),"},
{"lineNum":"  335","line":"            Item::Space(\"\"), Item::Numeric(Numeric::Day, Pad::Zero),"},
{"lineNum":"  336","line":"            Item::Space(\"\"), Item::Literal(\"T\"), // XXX shouldn\'t this be case-insensitive?"},
{"lineNum":"  337","line":"            Item::Space(\"\"), Item::Numeric(Numeric::Hour, Pad::Zero),"},
{"lineNum":"  338","line":"            Item::Space(\"\"), Item::Literal(\":\"),"},
{"lineNum":"  339","line":"            Item::Space(\"\"), Item::Numeric(Numeric::Minute, Pad::Zero),"},
{"lineNum":"  340","line":"            Item::Space(\"\"), Item::Literal(\":\"),"},
{"lineNum":"  341","line":"            Item::Space(\"\"), Item::Numeric(Numeric::Second, Pad::Zero),"},
{"lineNum":"  342","line":"                             Item::Fixed(Fixed::Nanosecond),"},
{"lineNum":"  343","line":"            Item::Space(\"\"), Item::Fixed(Fixed::TimezoneOffsetZ),"},
{"lineNum":"  344","line":"            Item::Space(\"\"),"},
{"lineNum":"  345","line":"        ];"},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"        let mut parsed = Parsed::new();"},
{"lineNum":"  348","line":"        try!(parse(&mut parsed, s, ITEMS.iter().cloned()));"},
{"lineNum":"  349","line":"        parsed.to_datetime()"},
{"lineNum":"  350","line":"    }"},
{"lineNum":"  351","line":"}"},
{"lineNum":"  352","line":""},
{"lineNum":"  353","line":"impl str::FromStr for DateTime<UTC> {"},
{"lineNum":"  354","line":"    type Err = ParseError;"},
{"lineNum":"  355","line":""},
{"lineNum":"  356","line":"    fn from_str(s: &str) -> ParseResult<DateTime<UTC>> {"},
{"lineNum":"  357","line":"        s.parse::<DateTime<FixedOffset>>().map(|dt| dt.with_timezone(&UTC))"},
{"lineNum":"  358","line":"    }"},
{"lineNum":"  359","line":"}"},
{"lineNum":"  360","line":""},
{"lineNum":"  361","line":"impl str::FromStr for DateTime<Local> {"},
{"lineNum":"  362","line":"    type Err = ParseError;"},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"    fn from_str(s: &str) -> ParseResult<DateTime<Local>> {"},
{"lineNum":"  365","line":"        s.parse::<DateTime<FixedOffset>>().map(|dt| dt.with_timezone(&Local))"},
{"lineNum":"  366","line":"    }"},
{"lineNum":"  367","line":"}"},
{"lineNum":"  368","line":""},
{"lineNum":"  369","line":"#[cfg(feature = \"serde\")]"},
{"lineNum":"  370","line":"mod serde {"},
{"lineNum":"  371","line":"    use super::DateTime;"},
{"lineNum":"  372","line":"    use offset::TimeZone;"},
{"lineNum":"  373","line":"    use offset::utc::UTC;"},
{"lineNum":"  374","line":"    use offset::local::Local;"},
{"lineNum":"  375","line":"    use offset::fixed::FixedOffset;"},
{"lineNum":"  376","line":"    use std::fmt::Display;"},
{"lineNum":"  377","line":"    use serde::{ser, de};"},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"    impl<Tz: TimeZone> ser::Serialize for DateTime<Tz>"},
{"lineNum":"  380","line":"        where Tz::Offset: Display"},
{"lineNum":"  381","line":"    {"},
{"lineNum":"  382","line":"        fn serialize<S>(&self, serializer: &mut S) -> Result<(), S::Error>"},
{"lineNum":"  383","line":"            where S: ser::Serializer"},
{"lineNum":"  384","line":"        {"},
{"lineNum":"  385","line":"            // Debug formatting is correct RFC3339, and it allows Zulu."},
{"lineNum":"  386","line":"            serializer.visit_str(&format!(\"{:?}\", self))"},
{"lineNum":"  387","line":"        }"},
{"lineNum":"  388","line":"    }"},
{"lineNum":"  389","line":""},
{"lineNum":"  390","line":"    struct DateTimeVisitor;"},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":"    impl de::Visitor for DateTimeVisitor {"},
{"lineNum":"  393","line":"        type Value = DateTime<FixedOffset>;"},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"        fn visit_str<E>(&mut self, value: &str) -> Result<DateTime<FixedOffset>, E>"},
{"lineNum":"  396","line":"            where E: de::Error"},
{"lineNum":"  397","line":"        {"},
{"lineNum":"  398","line":"            value.parse().map_err(|err| E::syntax(&format!(\"{}\", err)))"},
{"lineNum":"  399","line":"        }"},
{"lineNum":"  400","line":"    }"},
{"lineNum":"  401","line":""},
{"lineNum":"  402","line":"    impl de::Deserialize for DateTime<FixedOffset> {"},
{"lineNum":"  403","line":"        fn deserialize<D>(deserializer: &mut D) -> Result<Self, D::Error>"},
{"lineNum":"  404","line":"            where D: de::Deserializer"},
{"lineNum":"  405","line":"        {"},
{"lineNum":"  406","line":"            deserializer.visit(DateTimeVisitor)"},
{"lineNum":"  407","line":"        }"},
{"lineNum":"  408","line":"    }"},
{"lineNum":"  409","line":""},
{"lineNum":"  410","line":"    impl de::Deserialize for DateTime<UTC> {"},
{"lineNum":"  411","line":"        fn deserialize<D>(deserializer: &mut D) -> Result<Self, D::Error>"},
{"lineNum":"  412","line":"            where D: de::Deserializer"},
{"lineNum":"  413","line":"        {"},
{"lineNum":"  414","line":"            deserializer.visit(DateTimeVisitor).map(|dt| dt.with_timezone(&UTC))"},
{"lineNum":"  415","line":"        }"},
{"lineNum":"  416","line":"    }"},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":"    impl de::Deserialize for DateTime<Local> {"},
{"lineNum":"  419","line":"        fn deserialize<D>(deserializer: &mut D) -> Result<Self, D::Error>"},
{"lineNum":"  420","line":"            where D: de::Deserializer"},
{"lineNum":"  421","line":"        {"},
{"lineNum":"  422","line":"            deserializer.visit(DateTimeVisitor).map(|dt| dt.with_timezone(&Local))"},
{"lineNum":"  423","line":"        }"},
{"lineNum":"  424","line":"    }"},
{"lineNum":"  425","line":"}"},
{"lineNum":"  426","line":""},
{"lineNum":"  427","line":"#[cfg(test)]"},
{"lineNum":"  428","line":"mod tests {"},
{"lineNum":"  429","line":"    use super::DateTime;"},
{"lineNum":"  430","line":"    use Datelike;"},
{"lineNum":"  431","line":"    use naive::time::NaiveTime;"},
{"lineNum":"  432","line":"    use naive::date::NaiveDate;"},
{"lineNum":"  433","line":"    use duration::Duration;"},
{"lineNum":"  434","line":"    use offset::TimeZone;"},
{"lineNum":"  435","line":"    use offset::utc::UTC;"},
{"lineNum":"  436","line":"    use offset::local::Local;"},
{"lineNum":"  437","line":"    use offset::fixed::FixedOffset;"},
{"lineNum":"  438","line":""},
{"lineNum":"  439","line":"    #[test]"},
{"lineNum":"  440","line":"    #[allow(non_snake_case)]"},
{"lineNum":"  441","line":"    fn test_datetime_offset() {"},
{"lineNum":"  442","line":"        let EST = FixedOffset::west(5*60*60);"},
{"lineNum":"  443","line":"        let EDT = FixedOffset::west(4*60*60);"},
{"lineNum":"  444","line":"        let KST = FixedOffset::east(9*60*60);"},
{"lineNum":"  445","line":""},
{"lineNum":"  446","line":"        assert_eq!(format!(\"{}\", UTC.ymd(2014, 5, 6).and_hms(7, 8, 9)),"},
{"lineNum":"  447","line":"                   \"2014-05-06 07:08:09 UTC\");"},
{"lineNum":"  448","line":"        assert_eq!(format!(\"{}\", EDT.ymd(2014, 5, 6).and_hms(7, 8, 9)),"},
{"lineNum":"  449","line":"                   \"2014-05-06 07:08:09 -04:00\");"},
{"lineNum":"  450","line":"        assert_eq!(format!(\"{}\", KST.ymd(2014, 5, 6).and_hms(7, 8, 9)),"},
{"lineNum":"  451","line":"                   \"2014-05-06 07:08:09 +09:00\");"},
{"lineNum":"  452","line":"        assert_eq!(format!(\"{:?}\", UTC.ymd(2014, 5, 6).and_hms(7, 8, 9)),"},
{"lineNum":"  453","line":"                   \"2014-05-06T07:08:09Z\");"},
{"lineNum":"  454","line":"        assert_eq!(format!(\"{:?}\", EDT.ymd(2014, 5, 6).and_hms(7, 8, 9)),"},
{"lineNum":"  455","line":"                   \"2014-05-06T07:08:09-04:00\");"},
{"lineNum":"  456","line":"        assert_eq!(format!(\"{:?}\", KST.ymd(2014, 5, 6).and_hms(7, 8, 9)),"},
{"lineNum":"  457","line":"                   \"2014-05-06T07:08:09+09:00\");"},
{"lineNum":"  458","line":""},
{"lineNum":"  459","line":"        // edge cases"},
{"lineNum":"  460","line":"        assert_eq!(format!(\"{:?}\", UTC.ymd(2014, 5, 6).and_hms(0, 0, 0)),"},
{"lineNum":"  461","line":"                   \"2014-05-06T00:00:00Z\");"},
{"lineNum":"  462","line":"        assert_eq!(format!(\"{:?}\", EDT.ymd(2014, 5, 6).and_hms(0, 0, 0)),"},
{"lineNum":"  463","line":"                   \"2014-05-06T00:00:00-04:00\");"},
{"lineNum":"  464","line":"        assert_eq!(format!(\"{:?}\", KST.ymd(2014, 5, 6).and_hms(0, 0, 0)),"},
{"lineNum":"  465","line":"                   \"2014-05-06T00:00:00+09:00\");"},
{"lineNum":"  466","line":"        assert_eq!(format!(\"{:?}\", UTC.ymd(2014, 5, 6).and_hms(23, 59, 59)),"},
{"lineNum":"  467","line":"                   \"2014-05-06T23:59:59Z\");"},
{"lineNum":"  468","line":"        assert_eq!(format!(\"{:?}\", EDT.ymd(2014, 5, 6).and_hms(23, 59, 59)),"},
{"lineNum":"  469","line":"                   \"2014-05-06T23:59:59-04:00\");"},
{"lineNum":"  470","line":"        assert_eq!(format!(\"{:?}\", KST.ymd(2014, 5, 6).and_hms(23, 59, 59)),"},
{"lineNum":"  471","line":"                   \"2014-05-06T23:59:59+09:00\");"},
{"lineNum":"  472","line":""},
{"lineNum":"  473","line":"        assert_eq!(UTC.ymd(2014, 5, 6).and_hms(7, 8, 9), EDT.ymd(2014, 5, 6).and_hms(3, 8, 9));"},
{"lineNum":"  474","line":"        assert_eq!(UTC.ymd(2014, 5, 6).and_hms(7, 8, 9) + Duration::seconds(3600 + 60 + 1),"},
{"lineNum":"  475","line":"                   UTC.ymd(2014, 5, 6).and_hms(8, 9, 10));"},
{"lineNum":"  476","line":"        assert_eq!(UTC.ymd(2014, 5, 6).and_hms(7, 8, 9) - EDT.ymd(2014, 5, 6).and_hms(10, 11, 12),"},
{"lineNum":"  477","line":"                   Duration::seconds(-7*3600 - 3*60 - 3));"},
{"lineNum":"  478","line":""},
{"lineNum":"  479","line":"        assert_eq!(*UTC.ymd(2014, 5, 6).and_hms(7, 8, 9).offset(), UTC);"},
{"lineNum":"  480","line":"        assert_eq!(*EDT.ymd(2014, 5, 6).and_hms(7, 8, 9).offset(), EDT);"},
{"lineNum":"  481","line":"        assert!(*EDT.ymd(2014, 5, 6).and_hms(7, 8, 9).offset() != EST);"},
{"lineNum":"  482","line":"    }"},
{"lineNum":"  483","line":""},
{"lineNum":"  484","line":"    #[test]"},
{"lineNum":"  485","line":"    fn test_datetime_date_and_time() {"},
{"lineNum":"  486","line":"        let tz = FixedOffset::east(5*60*60);"},
{"lineNum":"  487","line":"        let d = tz.ymd(2014, 5, 6).and_hms(7, 8, 9);"},
{"lineNum":"  488","line":"        assert_eq!(d.time(), NaiveTime::from_hms(7, 8, 9));"},
{"lineNum":"  489","line":"        assert_eq!(d.date(), tz.ymd(2014, 5, 6));"},
{"lineNum":"  490","line":"        assert_eq!(d.date().naive_local(), NaiveDate::from_ymd(2014, 5, 6));"},
{"lineNum":"  491","line":"        assert_eq!(d.date().and_time(d.time()), Some(d));"},
{"lineNum":"  492","line":""},
{"lineNum":"  493","line":"        let tz = FixedOffset::east(4*60*60);"},
{"lineNum":"  494","line":"        let d = tz.ymd(2016, 5, 4).and_hms(3, 2, 1);"},
{"lineNum":"  495","line":"        assert_eq!(d.time(), NaiveTime::from_hms(3, 2, 1));"},
{"lineNum":"  496","line":"        assert_eq!(d.date(), tz.ymd(2016, 5, 4));"},
{"lineNum":"  497","line":"        assert_eq!(d.date().naive_local(), NaiveDate::from_ymd(2016, 5, 4));"},
{"lineNum":"  498","line":"        assert_eq!(d.date().and_time(d.time()), Some(d));"},
{"lineNum":"  499","line":""},
{"lineNum":"  500","line":"        let tz = FixedOffset::west(13*60*60);"},
{"lineNum":"  501","line":"        let d = tz.ymd(2017, 8, 9).and_hms(12, 34, 56);"},
{"lineNum":"  502","line":"        assert_eq!(d.time(), NaiveTime::from_hms(12, 34, 56));"},
{"lineNum":"  503","line":"        assert_eq!(d.date(), tz.ymd(2017, 8, 9));"},
{"lineNum":"  504","line":"        assert_eq!(d.date().naive_local(), NaiveDate::from_ymd(2017, 8, 9));"},
{"lineNum":"  505","line":"        assert_eq!(d.date().and_time(d.time()), Some(d));"},
{"lineNum":"  506","line":"    }"},
{"lineNum":"  507","line":""},
{"lineNum":"  508","line":"    #[test]"},
{"lineNum":"  509","line":"    fn test_datetime_with_timezone() {"},
{"lineNum":"  510","line":"        let local_now = Local::now();"},
{"lineNum":"  511","line":"        let utc_now = local_now.with_timezone(&UTC);"},
{"lineNum":"  512","line":"        let local_now2 = utc_now.with_timezone(&Local);"},
{"lineNum":"  513","line":"        assert_eq!(local_now, local_now2);"},
{"lineNum":"  514","line":"    }"},
{"lineNum":"  515","line":""},
{"lineNum":"  516","line":"    #[test]"},
{"lineNum":"  517","line":"    #[allow(non_snake_case)]"},
{"lineNum":"  518","line":"    fn test_datetime_rfc2822_and_rfc3339() {"},
{"lineNum":"  519","line":"        let EDT = FixedOffset::east(5*60*60);"},
{"lineNum":"  520","line":"        assert_eq!(UTC.ymd(2015, 2, 18).and_hms(23, 16, 9).to_rfc2822(),"},
{"lineNum":"  521","line":"                   \"Wed, 18 Feb 2015 23:16:09 +0000\");"},
{"lineNum":"  522","line":"        assert_eq!(UTC.ymd(2015, 2, 18).and_hms(23, 16, 9).to_rfc3339(),"},
{"lineNum":"  523","line":"                   \"2015-02-18T23:16:09+00:00\");"},
{"lineNum":"  524","line":"        assert_eq!(EDT.ymd(2015, 2, 18).and_hms_milli(23, 16, 9, 150).to_rfc2822(),"},
{"lineNum":"  525","line":"                   \"Wed, 18 Feb 2015 23:16:09 +0500\");"},
{"lineNum":"  526","line":"        assert_eq!(EDT.ymd(2015, 2, 18).and_hms_milli(23, 16, 9, 150).to_rfc3339(),"},
{"lineNum":"  527","line":"                   \"2015-02-18T23:16:09.150+05:00\");"},
{"lineNum":"  528","line":"        assert_eq!(EDT.ymd(2015, 2, 18).and_hms_micro(23, 59, 59, 1_234_567).to_rfc2822(),"},
{"lineNum":"  529","line":"                   \"Wed, 18 Feb 2015 23:59:60 +0500\");"},
{"lineNum":"  530","line":"        assert_eq!(EDT.ymd(2015, 2, 18).and_hms_micro(23, 59, 59, 1_234_567).to_rfc3339(),"},
{"lineNum":"  531","line":"                   \"2015-02-18T23:59:60.234567+05:00\");"},
{"lineNum":"  532","line":""},
{"lineNum":"  533","line":"        assert_eq!(DateTime::parse_from_rfc2822(\"Wed, 18 Feb 2015 23:16:09 +0000\"),"},
{"lineNum":"  534","line":"                   Ok(FixedOffset::east(0).ymd(2015, 2, 18).and_hms(23, 16, 9)));"},
{"lineNum":"  535","line":"        assert_eq!(DateTime::parse_from_rfc3339(\"2015-02-18T23:16:09Z\"),"},
{"lineNum":"  536","line":"                   Ok(FixedOffset::east(0).ymd(2015, 2, 18).and_hms(23, 16, 9)));"},
{"lineNum":"  537","line":"        assert_eq!(DateTime::parse_from_rfc2822(\"Wed, 18 Feb 2015 23:59:60 +0500\"),"},
{"lineNum":"  538","line":"                   Ok(EDT.ymd(2015, 2, 18).and_hms_milli(23, 59, 59, 1_000)));"},
{"lineNum":"  539","line":"        assert_eq!(DateTime::parse_from_rfc3339(\"2015-02-18T23:59:60.234567+05:00\"),"},
{"lineNum":"  540","line":"                   Ok(EDT.ymd(2015, 2, 18).and_hms_micro(23, 59, 59, 1_234_567)));"},
{"lineNum":"  541","line":"    }"},
{"lineNum":"  542","line":""},
{"lineNum":"  543","line":"    #[test]"},
{"lineNum":"  544","line":"    fn test_datetime_from_str() {"},
{"lineNum":"  545","line":"        assert_eq!(\"2015-2-18T23:16:9.15Z\".parse::<DateTime<FixedOffset>>(),"},
{"lineNum":"  546","line":"                   Ok(FixedOffset::east(0).ymd(2015, 2, 18).and_hms_milli(23, 16, 9, 150)));"},
{"lineNum":"  547","line":"        assert_eq!(\"2015-2-18T13:16:9.15-10:00\".parse::<DateTime<FixedOffset>>(),"},
{"lineNum":"  548","line":"                   Ok(FixedOffset::west(10 * 3600).ymd(2015, 2, 18).and_hms_milli(13, 16, 9, 150)));"},
{"lineNum":"  549","line":"        assert!(\"2015-2-18T23:16:9.15\".parse::<DateTime<FixedOffset>>().is_err());"},
{"lineNum":"  550","line":""},
{"lineNum":"  551","line":"        assert_eq!(\"2015-2-18T23:16:9.15Z\".parse::<DateTime<UTC>>(),"},
{"lineNum":"  552","line":"                   Ok(UTC.ymd(2015, 2, 18).and_hms_milli(23, 16, 9, 150)));"},
{"lineNum":"  553","line":"        assert_eq!(\"2015-2-18T13:16:9.15-10:00\".parse::<DateTime<UTC>>(),"},
{"lineNum":"  554","line":"                   Ok(UTC.ymd(2015, 2, 18).and_hms_milli(23, 16, 9, 150)));"},
{"lineNum":"  555","line":"        assert!(\"2015-2-18T23:16:9.15\".parse::<DateTime<UTC>>().is_err());"},
{"lineNum":"  556","line":""},
{"lineNum":"  557","line":"        // no test for `DateTime<Local>`, we cannot verify that much."},
{"lineNum":"  558","line":"    }"},
{"lineNum":"  559","line":""},
{"lineNum":"  560","line":"    #[test]"},
{"lineNum":"  561","line":"    fn test_datetime_parse_from_str() {"},
{"lineNum":"  562","line":"        let ymdhms = |y,m,d,h,n,s,off| FixedOffset::east(off).ymd(y,m,d).and_hms(h,n,s);"},
{"lineNum":"  563","line":"        assert_eq!(DateTime::parse_from_str(\"2014-5-7T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),"},
{"lineNum":"  564","line":"                   Ok(ymdhms(2014, 5, 7, 12, 34, 56, 570*60))); // ignore offset"},
{"lineNum":"  565","line":"        assert!(DateTime::parse_from_str(\"20140507000000\", \"%Y%m%d%H%M%S\").is_err()); // no offset"},
{"lineNum":"  566","line":"        assert!(DateTime::parse_from_str(\"Fri, 09 Aug 2013 23:54:35 GMT\","},
{"lineNum":"  567","line":"                                         \"%a, %d %b %Y %H:%M:%S GMT\").is_err());"},
{"lineNum":"  568","line":"        assert_eq!(UTC.datetime_from_str(\"Fri, 09 Aug 2013 23:54:35 GMT\","},
{"lineNum":"  569","line":"                                         \"%a, %d %b %Y %H:%M:%S GMT\"),"},
{"lineNum":"  570","line":"                   Ok(UTC.ymd(2013, 8, 9).and_hms(23, 54, 35)));"},
{"lineNum":"  571","line":"    }"},
{"lineNum":"  572","line":""},
{"lineNum":"  573","line":"    #[test]"},
{"lineNum":"  574","line":"    fn test_datetime_format_with_local() {"},
{"lineNum":"  575","line":"        // if we are not around the year boundary, local and UTC date should have the same year"},
{"lineNum":"  576","line":"        let dt = Local::now().with_month(5).unwrap();"},
{"lineNum":"  577","line":"        assert_eq!(dt.format(\"%Y\").to_string(), dt.with_timezone(&UTC).format(\"%Y\").to_string());"},
{"lineNum":"  578","line":"    }"},
{"lineNum":"  579","line":""},
{"lineNum":"  580","line":"    #[test]"},
{"lineNum":"  581","line":"    fn test_datetime_is_copy() {"},
{"lineNum":"  582","line":"        // UTC is known to be `Copy`."},
{"lineNum":"  583","line":"        let a = UTC::now();"},
{"lineNum":"  584","line":"        let b = a;"},
{"lineNum":"  585","line":"        assert_eq!(a, b);"},
{"lineNum":"  586","line":"    }"},
{"lineNum":"  587","line":""},
{"lineNum":"  588","line":"    #[test]"},
{"lineNum":"  589","line":"    fn test_datetime_is_send() {"},
{"lineNum":"  590","line":"        use std::thread;"},
{"lineNum":"  591","line":""},
{"lineNum":"  592","line":"        // UTC is known to be `Send`."},
{"lineNum":"  593","line":"        let a = UTC::now();"},
{"lineNum":"  594","line":"        thread::spawn(move || {"},
{"lineNum":"  595","line":"            let _ = a;"},
{"lineNum":"  596","line":"        }).join().unwrap();"},
{"lineNum":"  597","line":"    }"},
{"lineNum":"  598","line":""},
{"lineNum":"  599","line":"    #[cfg(feature = \"serde\")]"},
{"lineNum":"  600","line":"    extern crate serde_json;"},
{"lineNum":"  601","line":""},
{"lineNum":"  602","line":"    #[cfg(feature = \"serde\")]"},
{"lineNum":"  603","line":"    #[test]"},
{"lineNum":"  604","line":"    fn test_serde_serialize() {"},
{"lineNum":"  605","line":"        use self::serde_json::to_string;"},
{"lineNum":"  606","line":""},
{"lineNum":"  607","line":"        let date = UTC.ymd(2014, 7, 24).and_hms(12, 34, 6);"},
{"lineNum":"  608","line":"        let serialized = to_string(&date).unwrap();"},
{"lineNum":"  609","line":""},
{"lineNum":"  610","line":"        assert_eq!(serialized, \"\\\"2014-07-24T12:34:06Z\\\"\");"},
{"lineNum":"  611","line":"    }"},
{"lineNum":"  612","line":""},
{"lineNum":"  613","line":"    #[cfg(feature = \"serde\")]"},
{"lineNum":"  614","line":"    #[test]"},
{"lineNum":"  615","line":"    fn test_serde_deserialize() {"},
{"lineNum":"  616","line":"        use self::serde_json::from_str;"},
{"lineNum":"  617","line":""},
{"lineNum":"  618","line":"        let date = UTC.ymd(2014, 7, 24).and_hms(12, 34, 6);"},
{"lineNum":"  619","line":"        let deserialized: DateTime<UTC> = from_str(\"\\\"2014-07-24T12:34:06Z\\\"\").unwrap();"},
{"lineNum":"  620","line":""},
{"lineNum":"  621","line":"        assert_eq!(deserialized, date);"},
{"lineNum":"  622","line":"    }"},
{"lineNum":"  623","line":"}"},
{"lineNum":"  624","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test_client-e477f43d15ca0050", "date" : "2016-02-16 22:29:17", "instrumented" : 3, "covered" : 3,};
var merged_data = [];
