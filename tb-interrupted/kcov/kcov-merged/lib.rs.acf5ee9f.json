var data = {lines:[
{"lineNum":"    1","line":"// Copyright 2015 The Rust Project Developers. See the COPYRIGHT"},
{"lineNum":"    2","line":"// file at the top-level directory of this distribution and at"},
{"lineNum":"    3","line":"// http://rust-lang.org/COPYRIGHT."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or"},
{"lineNum":"    6","line":"// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license"},
{"lineNum":"    7","line":"// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your"},
{"lineNum":"    8","line":"// option. This file may not be copied, modified, or distributed"},
{"lineNum":"    9","line":"// except according to those terms."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"//! Extensions to `std::net` networking types."},
{"lineNum":"   12","line":"//!"},
{"lineNum":"   13","line":"//! This crate implements a number of extensions to the standard `std::net`"},
{"lineNum":"   14","line":"//! networking types, hopefully being slated for inclusion into the standard"},
{"lineNum":"   15","line":"//! library in the future. The goal of this crate is to expose all sorts of"},
{"lineNum":"   16","line":"//! cross-platform and platform-specific configuration options of UDP/TCP"},
{"lineNum":"   17","line":"//! sockets. System APIs are wrapped with as thin a layer as possible instead of"},
{"lineNum":"   18","line":"//! bundling multiple actions into one API call."},
{"lineNum":"   19","line":"//!"},
{"lineNum":"   20","line":"//! More information about the design of this crate can be found in the"},
{"lineNum":"   21","line":"//! [associated rfc][rfc]"},
{"lineNum":"   22","line":"//!"},
{"lineNum":"   23","line":"//! [rfc]: https://github.com/rust-lang/rfcs/pull/1158"},
{"lineNum":"   24","line":"//!"},
{"lineNum":"   25","line":"//! # Examples"},
{"lineNum":"   26","line":"//!"},
{"lineNum":"   27","line":"//! ```no_run"},
{"lineNum":"   28","line":"//! use net2::TcpBuilder;"},
{"lineNum":"   29","line":"//!"},
{"lineNum":"   30","line":"//! let tcp = TcpBuilder::new_v4().unwrap();"},
{"lineNum":"   31","line":"//! tcp.reuse_address(true).unwrap()"},
{"lineNum":"   32","line":"//!    .only_v6(false).unwrap();"},
{"lineNum":"   33","line":"//!"},
{"lineNum":"   34","line":"//! let mut stream = tcp.connect(\"127.0.0.1:80\").unwrap();"},
{"lineNum":"   35","line":"//!"},
{"lineNum":"   36","line":"//! // use `stream` as a TcpStream"},
{"lineNum":"   37","line":"//! ```"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","},
{"lineNum":"   40","line":"       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\","},
{"lineNum":"   41","line":"       html_root_url = \"https://doc.rust-lang.org/net2-rs\")]"},
{"lineNum":"   42","line":"#![deny(missing_docs, warnings)]"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"extern crate kernel32;"},
{"lineNum":"   45","line":"extern crate libc;"},
{"lineNum":"   46","line":"extern crate winapi;"},
{"lineNum":"   47","line":"extern crate ws2_32;"},
{"lineNum":"   48","line":"#[macro_use] extern crate cfg_if;"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"use std::io;"},
{"lineNum":"   51","line":"use std::ops::Neg;"},
{"lineNum":"   52","line":"use std::net::{ToSocketAddrs, SocketAddr};"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"use utils::{One, NetInt};"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"mod tcp;"},
{"lineNum":"   57","line":"mod udp;"},
{"lineNum":"   58","line":"mod socket;"},
{"lineNum":"   59","line":"mod ext;"},
{"lineNum":"   60","line":"mod utils;"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"#[cfg(unix)] #[path = \"sys/unix/mod.rs\"] mod sys;"},
{"lineNum":"   63","line":"#[cfg(windows)] #[path = \"sys/windows/mod.rs\"] mod sys;"},
{"lineNum":"   64","line":"// FIXME: should include android here once SO_REUSEPORT has been fixed in"},
{"lineNum":"   65","line":"//        liblibc on android"},
{"lineNum":"   66","line":"#[cfg(all(unix, not(target_os = \"android\")))] pub mod unix;"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"pub use tcp::TcpBuilder;"},
{"lineNum":"   69","line":"pub use udp::UdpBuilder;"},
{"lineNum":"   70","line":"pub use ext::{TcpStreamExt, TcpListenerExt, UdpSocketExt};"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"fn one_addr<T: ToSocketAddrs>(tsa: T) -> io::Result<SocketAddr> {","class":"lineCov","hits":"1","order":"1573",},
{"lineNum":"   73","line":"    let mut addrs = try!(tsa.to_socket_addrs());","class":"lineCov","hits":"1","order":"1574",},
{"lineNum":"   74","line":"    let addr = match addrs.next() {","class":"lineCov","hits":"1","order":"1575",},
{"lineNum":"   75","line":"        Some(addr) => addr,"},
{"lineNum":"   76","line":"        None => return Err(io::Error::new(io::ErrorKind::Other,","class":"lineNoCov","hits":"0",},
{"lineNum":"   77","line":"                                          \"no socket addresses could be resolved\"))"},
{"lineNum":"   78","line":"    };"},
{"lineNum":"   79","line":"    if addrs.next().is_none() {","class":"lineCov","hits":"1","order":"1576",},
{"lineNum":"   80","line":"        Ok(addr)"},
{"lineNum":"   81","line":"    } else {"},
{"lineNum":"   82","line":"        Err(io::Error::new(io::ErrorKind::Other,","class":"lineNoCov","hits":"0",},
{"lineNum":"   83","line":"                           \"more than one address resolved\"))"},
{"lineNum":"   84","line":"    }"},
{"lineNum":"   85","line":"}"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"fn cvt<T: One + PartialEq + Neg<Output=T>>(t: T) -> io::Result<T> {","class":"lineCov","hits":"1","order":"1577",},
{"lineNum":"   88","line":"    let one: T = T::one();","class":"lineCov","hits":"1","order":"1578",},
{"lineNum":"   89","line":"    if t == -one {","class":"lineCov","hits":"1","order":"1579",},
{"lineNum":"   90","line":"        Err(io::Error::last_os_error())","class":"lineNoCov","hits":"0",},
{"lineNum":"   91","line":"    } else {"},
{"lineNum":"   92","line":"        Ok(t)","class":"lineCov","hits":"1","order":"1571",},
{"lineNum":"   93","line":"    }"},
{"lineNum":"   94","line":"}","class":"lineCov","hits":"1","order":"1572",},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"#[cfg(windows)]"},
{"lineNum":"   97","line":"fn cvt_win<T: PartialEq + utils::Zero>(t: T) -> io::Result<T> {"},
{"lineNum":"   98","line":"    if t == T::zero() {"},
{"lineNum":"   99","line":"        Err(io::Error::last_os_error())"},
{"lineNum":"  100","line":"    } else {"},
{"lineNum":"  101","line":"        Ok(t)"},
{"lineNum":"  102","line":"    }"},
{"lineNum":"  103","line":"}"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"fn hton<I: NetInt>(i: I) -> I { i.to_be() }"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"trait AsInner {"},
{"lineNum":"  108","line":"    type Inner;"},
{"lineNum":"  109","line":"    fn as_inner(&self) -> &Self::Inner;"},
{"lineNum":"  110","line":"}"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"trait FromInner {"},
{"lineNum":"  113","line":"    type Inner;"},
{"lineNum":"  114","line":"    fn from_inner(inner: Self::Inner) -> Self;"},
{"lineNum":"  115","line":"}"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"trait IntoInner {"},
{"lineNum":"  118","line":"    type Inner;"},
{"lineNum":"  119","line":"    fn into_inner(self) -> Self::Inner;"},
{"lineNum":"  120","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test_server-9ef2987148640087", "date" : "2016-02-17 13:46:05", "instrumented" : 12, "covered" : 9,};
var merged_data = [];
