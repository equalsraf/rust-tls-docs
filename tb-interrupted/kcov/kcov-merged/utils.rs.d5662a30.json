var data = {lines:[
{"lineNum":"    1","line":"// Copyright 2015 The Rust Project Developers. See the COPYRIGHT"},
{"lineNum":"    2","line":"// file at the top-level directory of this distribution and at"},
{"lineNum":"    3","line":"// http://rust-lang.org/COPYRIGHT."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or"},
{"lineNum":"    6","line":"// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license"},
{"lineNum":"    7","line":"// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your"},
{"lineNum":"    8","line":"// option. This file may not be copied, modified, or distributed"},
{"lineNum":"    9","line":"// except according to those terms."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"#[doc(hidden)]"},
{"lineNum":"   13","line":"pub trait NetInt {"},
{"lineNum":"   14","line":"    fn from_be(i: Self) -> Self;"},
{"lineNum":"   15","line":"    fn to_be(&self) -> Self;"},
{"lineNum":"   16","line":"}"},
{"lineNum":"   17","line":"macro_rules! doit {"},
{"lineNum":"   18","line":"    ($($t:ident)*) => ($(impl NetInt for $t {"},
{"lineNum":"   19","line":"        fn from_be(i: Self) -> Self { <$t>::from_be(i) }"},
{"lineNum":"   20","line":"        fn to_be(&self) -> Self { <$t>::to_be(*self) }"},
{"lineNum":"   21","line":"    })*)"},
{"lineNum":"   22","line":"}"},
{"lineNum":"   23","line":"doit! { i8 i16 i32 i64 isize u8 u16 u32 u64 usize }"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"#[doc(hidden)]"},
{"lineNum":"   26","line":"pub trait One {"},
{"lineNum":"   27","line":"    fn one() -> Self;"},
{"lineNum":"   28","line":"}"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"macro_rules! one {"},
{"lineNum":"   31","line":"    ($($t:ident)*) => ($("},
{"lineNum":"   32","line":"        impl One for $t { fn one() -> $t { 1 } }","class":"lineCov","hits":"1","order":"1309",},
{"lineNum":"   33","line":"    )*)"},
{"lineNum":"   34","line":"}"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"one! { i8 i16 i32 i64 isize u8 u16 u32 u64 usize }"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"#[doc(hidden)]"},
{"lineNum":"   40","line":"pub trait Zero {"},
{"lineNum":"   41","line":"    fn zero() -> Self;"},
{"lineNum":"   42","line":"}"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"macro_rules! zero {"},
{"lineNum":"   45","line":"    ($($t:ident)*) => ($("},
{"lineNum":"   46","line":"        impl Zero for $t { fn zero() -> $t { 0 } }"},
{"lineNum":"   47","line":"    )*)"},
{"lineNum":"   48","line":"}"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"zero! { i8 i16 i32 i64 isize u8 u16 u32 u64 usize }"},
{"lineNum":"   51","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test_server-9ef2987148640087", "date" : "2016-02-17 13:22:50", "instrumented" : 1, "covered" : 1,};
var merged_data = [];
