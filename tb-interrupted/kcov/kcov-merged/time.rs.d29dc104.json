var data = {lines:[
{"lineNum":"    1","line":"// This is a part of rust-chrono."},
{"lineNum":"    2","line":"// Copyright (c) 2014-2015, Kang Seonghoon."},
{"lineNum":"    3","line":"// See README.md and LICENSE.txt for details."},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"/*!"},
{"lineNum":"    6","line":" * ISO 8601 time without timezone."},
{"lineNum":"    7","line":" */"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"use std::{str, fmt, hash};"},
{"lineNum":"   10","line":"use std::ops::{Add, Sub};"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"use Timelike;"},
{"lineNum":"   13","line":"use div::div_mod_floor;"},
{"lineNum":"   14","line":"use duration::Duration;"},
{"lineNum":"   15","line":"use format::{Item, Numeric, Pad, Fixed};"},
{"lineNum":"   16","line":"use format::{parse, Parsed, ParseError, ParseResult, DelayedFormat, StrftimeItems};"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"/// ISO 8601 time without timezone."},
{"lineNum":"   19","line":"/// Allows for the nanosecond precision and optional leap second representation."},
{"lineNum":"   20","line":"///"},
{"lineNum":"   21","line":"/// # Leap second WHAT?"},
{"lineNum":"   22","line":"///"},
{"lineNum":"   23","line":"/// Since 1960s, the manmade atomic clock has been so accurate that"},
{"lineNum":"   24","line":"/// it is much more accurate than Earth\'s own motion."},
{"lineNum":"   25","line":"/// It became desirable to define the civil time in terms of the atomic clock,"},
{"lineNum":"   26","line":"/// but that risks the desynchronization of the civil time from Earth."},
{"lineNum":"   27","line":"/// To account for this, the designers of the Coordinated Universal Time (UTC)"},
{"lineNum":"   28","line":"/// made that the UTC should be kept within 0.9 seconds of the observed Earth-bound time."},
{"lineNum":"   29","line":"/// When the mean solar day is longer than the ideal (86,400 seconds),"},
{"lineNum":"   30","line":"/// the error slowly accumulates and it is necessary to add a **leap second**"},
{"lineNum":"   31","line":"/// to slow the UTC down a bit."},
{"lineNum":"   32","line":"/// (We may also remove a second to speed the UTC up a bit, but it never happened.)"},
{"lineNum":"   33","line":"/// The leap second, if any, follows 23:59:59 of June 30 or December 31 in the UTC."},
{"lineNum":"   34","line":"///"},
{"lineNum":"   35","line":"/// Fast forward to the 21st century,"},
{"lineNum":"   36","line":"/// we have seen 26 leap seconds from January 1972 to December 2015."},
{"lineNum":"   37","line":"/// Yes, 26 seconds. Probably you can read this paragraph within 26 seconds."},
{"lineNum":"   38","line":"/// But those 26 seconds, and possibly more in the future, are never predictable,"},
{"lineNum":"   39","line":"/// and whether to add a leap second or not is known only before 6 months."},
{"lineNum":"   40","line":"/// Internet-based clocks (via NTP) do account for known leap seconds,"},
{"lineNum":"   41","line":"/// but the system API normally doesn\'t (and often can\'t, with no network connection)"},
{"lineNum":"   42","line":"/// and there is no reliable way to retrieve leap second information."},
{"lineNum":"   43","line":"///"},
{"lineNum":"   44","line":"/// Chrono does not try to accurately implement leap seconds; it is impossible."},
{"lineNum":"   45","line":"/// Rather, **it allows for leap seconds but behaves as if there are *no other* leap seconds.**"},
{"lineNum":"   46","line":"/// Various time arithmetics will ignore any possible leap second(s)"},
{"lineNum":"   47","line":"/// except when the operand were actually a leap second."},
{"lineNum":"   48","line":"/// The leap second is indicated via fractional seconds more than 1 second,"},
{"lineNum":"   49","line":"/// so values like `NaiveTime::from_hms_milli(23, 56, 4, 1_005)` are allowed;"},
{"lineNum":"   50","line":"/// that value would mean 5ms after the beginning of a leap second following 23:56:04."},
{"lineNum":"   51","line":"/// Parsing and formatting will correctly handle times that look like leap seconds,"},
{"lineNum":"   52","line":"/// and you can then conveniently ignore leap seconds if you are not prepared for them."},
{"lineNum":"   53","line":"///"},
{"lineNum":"   54","line":"/// If you cannot tolerate this behavior,"},
{"lineNum":"   55","line":"/// you must use a separate `TimeZone` for the International Atomic Time (TAI)."},
{"lineNum":"   56","line":"/// TAI is like UTC but has no leap seconds, and thus slightly differs from UTC."},
{"lineNum":"   57","line":"/// Chrono 0.2 does not provide such implementation, but it is planned for 0.3."},
{"lineNum":"   58","line":"#[derive(PartialEq, Eq, PartialOrd, Ord, Copy, Clone)]","class":"lineNoCov","hits":"0",},
{"lineNum":"   59","line":"#[cfg_attr(feature = \"rustc-serialize\", derive(RustcEncodable, RustcDecodable))]"},
{"lineNum":"   60","line":"pub struct NaiveTime {"},
{"lineNum":"   61","line":"    secs: u32,","class":"lineNoCov","hits":"0",},
{"lineNum":"   62","line":"    frac: u32,","class":"lineNoCov","hits":"0",},
{"lineNum":"   63","line":"}"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"impl NaiveTime {"},
{"lineNum":"   66","line":"    /// Makes a new `NaiveTime` from hour, minute and second."},
{"lineNum":"   67","line":"    ///"},
{"lineNum":"   68","line":"    /// No [leap second](#leap-second-what?) is allowed here;"},
{"lineNum":"   69","line":"    /// use `NaiveTime::from_hms_*` methods with a subsecond parameter instead."},
{"lineNum":"   70","line":"    ///"},
{"lineNum":"   71","line":"    /// Panics on invalid hour, minute and/or second."},
{"lineNum":"   72","line":"    ///"},
{"lineNum":"   73","line":"    /// # Example"},
{"lineNum":"   74","line":"    ///"},
{"lineNum":"   75","line":"    /// ~~~~"},
{"lineNum":"   76","line":"    /// use chrono::{NaiveTime, Timelike};"},
{"lineNum":"   77","line":"    ///"},
{"lineNum":"   78","line":"    /// let t = NaiveTime::from_hms(23, 56, 4);"},
{"lineNum":"   79","line":"    /// assert_eq!(t.hour(), 23);"},
{"lineNum":"   80","line":"    /// assert_eq!(t.minute(), 56);"},
{"lineNum":"   81","line":"    /// assert_eq!(t.second(), 4);"},
{"lineNum":"   82","line":"    /// assert_eq!(t.nanosecond(), 0);"},
{"lineNum":"   83","line":"    /// ~~~~"},
{"lineNum":"   84","line":"    #[inline]"},
{"lineNum":"   85","line":"    pub fn from_hms(hour: u32, min: u32, sec: u32) -> NaiveTime {"},
{"lineNum":"   86","line":"        NaiveTime::from_hms_opt(hour, min, sec).expect(\"invalid time\")"},
{"lineNum":"   87","line":"    }"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"    /// Makes a new `NaiveTime` from hour, minute and second."},
{"lineNum":"   90","line":"    ///"},
{"lineNum":"   91","line":"    /// No [leap second](#leap-second-what?) is allowed here;"},
{"lineNum":"   92","line":"    /// use `NaiveTime::from_hms_*_opt` methods with a subsecond parameter instead."},
{"lineNum":"   93","line":"    ///"},
{"lineNum":"   94","line":"    /// Returns `None` on invalid hour, minute and/or second."},
{"lineNum":"   95","line":"    ///"},
{"lineNum":"   96","line":"    /// # Example"},
{"lineNum":"   97","line":"    ///"},
{"lineNum":"   98","line":"    /// ~~~~"},
{"lineNum":"   99","line":"    /// use chrono::NaiveTime;"},
{"lineNum":"  100","line":"    ///"},
{"lineNum":"  101","line":"    /// let hms = |h,m,s| NaiveTime::from_hms_opt(h, m, s);"},
{"lineNum":"  102","line":"    /// assert!(hms(0, 0, 0).is_some());"},
{"lineNum":"  103","line":"    /// assert!(hms(23, 59, 59).is_some());"},
{"lineNum":"  104","line":"    /// assert!(hms(24, 0, 0).is_none());"},
{"lineNum":"  105","line":"    /// assert!(hms(23, 60, 0).is_none());"},
{"lineNum":"  106","line":"    /// assert!(hms(23, 59, 60).is_none());"},
{"lineNum":"  107","line":"    /// ~~~~"},
{"lineNum":"  108","line":"    #[inline]"},
{"lineNum":"  109","line":"    pub fn from_hms_opt(hour: u32, min: u32, sec: u32) -> Option<NaiveTime> {"},
{"lineNum":"  110","line":"        NaiveTime::from_hms_nano_opt(hour, min, sec, 0)"},
{"lineNum":"  111","line":"    }"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"    /// Makes a new `NaiveTime` from hour, minute, second and millisecond."},
{"lineNum":"  114","line":"    ///"},
{"lineNum":"  115","line":"    /// The millisecond part can exceed 1,000"},
{"lineNum":"  116","line":"    /// in order to represent the [leap second](#leap-second-what?)."},
{"lineNum":"  117","line":"    ///"},
{"lineNum":"  118","line":"    /// Panics on invalid hour, minute, second and/or millisecond."},
{"lineNum":"  119","line":"    ///"},
{"lineNum":"  120","line":"    /// # Example"},
{"lineNum":"  121","line":"    ///"},
{"lineNum":"  122","line":"    /// ~~~~"},
{"lineNum":"  123","line":"    /// use chrono::{NaiveTime, Timelike};"},
{"lineNum":"  124","line":"    ///"},
{"lineNum":"  125","line":"    /// let t = NaiveTime::from_hms_milli(23, 56, 4, 12);"},
{"lineNum":"  126","line":"    /// assert_eq!(t.hour(), 23);"},
{"lineNum":"  127","line":"    /// assert_eq!(t.minute(), 56);"},
{"lineNum":"  128","line":"    /// assert_eq!(t.second(), 4);"},
{"lineNum":"  129","line":"    /// assert_eq!(t.nanosecond(), 12_000_000);"},
{"lineNum":"  130","line":"    /// ~~~~"},
{"lineNum":"  131","line":"    #[inline]"},
{"lineNum":"  132","line":"    pub fn from_hms_milli(hour: u32, min: u32, sec: u32, milli: u32) -> NaiveTime {"},
{"lineNum":"  133","line":"        NaiveTime::from_hms_milli_opt(hour, min, sec, milli).expect(\"invalid time\")"},
{"lineNum":"  134","line":"    }"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"    /// Makes a new `NaiveTime` from hour, minute, second and millisecond."},
{"lineNum":"  137","line":"    ///"},
{"lineNum":"  138","line":"    /// The millisecond part can exceed 1,000"},
{"lineNum":"  139","line":"    /// in order to represent the [leap second](#leap-second-what?)."},
{"lineNum":"  140","line":"    ///"},
{"lineNum":"  141","line":"    /// Returns `None` on invalid hour, minute, second and/or millisecond."},
{"lineNum":"  142","line":"    ///"},
{"lineNum":"  143","line":"    /// # Example"},
{"lineNum":"  144","line":"    ///"},
{"lineNum":"  145","line":"    /// ~~~~"},
{"lineNum":"  146","line":"    /// use chrono::NaiveTime;"},
{"lineNum":"  147","line":"    ///"},
{"lineNum":"  148","line":"    /// let hmsm = |h,m,s,milli| NaiveTime::from_hms_milli_opt(h, m, s, milli);"},
{"lineNum":"  149","line":"    /// assert!(hmsm(0, 0, 0, 0).is_some());"},
{"lineNum":"  150","line":"    /// assert!(hmsm(23, 59, 59, 999).is_some());"},
{"lineNum":"  151","line":"    /// assert!(hmsm(23, 59, 59, 1_999).is_some()); // a leap second following 23:59:59"},
{"lineNum":"  152","line":"    /// assert!(hmsm(24, 0, 0, 0).is_none());"},
{"lineNum":"  153","line":"    /// assert!(hmsm(23, 60, 0, 0).is_none());"},
{"lineNum":"  154","line":"    /// assert!(hmsm(23, 59, 60, 0).is_none());"},
{"lineNum":"  155","line":"    /// assert!(hmsm(23, 59, 59, 2_000).is_none());"},
{"lineNum":"  156","line":"    /// ~~~~"},
{"lineNum":"  157","line":"    #[inline]"},
{"lineNum":"  158","line":"    pub fn from_hms_milli_opt(hour: u32, min: u32, sec: u32, milli: u32) -> Option<NaiveTime> {"},
{"lineNum":"  159","line":"        milli.checked_mul(1_000_000)"},
{"lineNum":"  160","line":"             .and_then(|nano| NaiveTime::from_hms_nano_opt(hour, min, sec, nano))"},
{"lineNum":"  161","line":"    }"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"    /// Makes a new `NaiveTime` from hour, minute, second and microsecond."},
{"lineNum":"  164","line":"    ///"},
{"lineNum":"  165","line":"    /// The microsecond part can exceed 1,000,000"},
{"lineNum":"  166","line":"    /// in order to represent the [leap second](#leap-second-what?)."},
{"lineNum":"  167","line":"    ///"},
{"lineNum":"  168","line":"    /// Panics on invalid hour, minute, second and/or microsecond."},
{"lineNum":"  169","line":"    ///"},
{"lineNum":"  170","line":"    /// # Example"},
{"lineNum":"  171","line":"    ///"},
{"lineNum":"  172","line":"    /// ~~~~"},
{"lineNum":"  173","line":"    /// use chrono::{NaiveTime, Timelike};"},
{"lineNum":"  174","line":"    ///"},
{"lineNum":"  175","line":"    /// let t = NaiveTime::from_hms_micro(23, 56, 4, 12_345);"},
{"lineNum":"  176","line":"    /// assert_eq!(t.hour(), 23);"},
{"lineNum":"  177","line":"    /// assert_eq!(t.minute(), 56);"},
{"lineNum":"  178","line":"    /// assert_eq!(t.second(), 4);"},
{"lineNum":"  179","line":"    /// assert_eq!(t.nanosecond(), 12_345_000);"},
{"lineNum":"  180","line":"    /// ~~~~"},
{"lineNum":"  181","line":"    #[inline]"},
{"lineNum":"  182","line":"    pub fn from_hms_micro(hour: u32, min: u32, sec: u32, micro: u32) -> NaiveTime {"},
{"lineNum":"  183","line":"        NaiveTime::from_hms_micro_opt(hour, min, sec, micro).expect(\"invalid time\")"},
{"lineNum":"  184","line":"    }"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"    /// Makes a new `NaiveTime` from hour, minute, second and microsecond."},
{"lineNum":"  187","line":"    ///"},
{"lineNum":"  188","line":"    /// The microsecond part can exceed 1,000,000"},
{"lineNum":"  189","line":"    /// in order to represent the [leap second](#leap-second-what?)."},
{"lineNum":"  190","line":"    ///"},
{"lineNum":"  191","line":"    /// Returns `None` on invalid hour, minute, second and/or microsecond."},
{"lineNum":"  192","line":"    ///"},
{"lineNum":"  193","line":"    /// # Example"},
{"lineNum":"  194","line":"    ///"},
{"lineNum":"  195","line":"    /// ~~~~"},
{"lineNum":"  196","line":"    /// use chrono::NaiveTime;"},
{"lineNum":"  197","line":"    ///"},
{"lineNum":"  198","line":"    /// let hmsu = |h,m,s,micro| NaiveTime::from_hms_micro_opt(h, m, s, micro);"},
{"lineNum":"  199","line":"    /// assert!(hmsu(0, 0, 0, 0).is_some());"},
{"lineNum":"  200","line":"    /// assert!(hmsu(23, 59, 59, 999_999).is_some());"},
{"lineNum":"  201","line":"    /// assert!(hmsu(23, 59, 59, 1_999_999).is_some()); // a leap second following 23:59:59"},
{"lineNum":"  202","line":"    /// assert!(hmsu(24, 0, 0, 0).is_none());"},
{"lineNum":"  203","line":"    /// assert!(hmsu(23, 60, 0, 0).is_none());"},
{"lineNum":"  204","line":"    /// assert!(hmsu(23, 59, 60, 0).is_none());"},
{"lineNum":"  205","line":"    /// assert!(hmsu(23, 59, 59, 2_000_000).is_none());"},
{"lineNum":"  206","line":"    /// ~~~~"},
{"lineNum":"  207","line":"    #[inline]"},
{"lineNum":"  208","line":"    pub fn from_hms_micro_opt(hour: u32, min: u32, sec: u32, micro: u32) -> Option<NaiveTime> {"},
{"lineNum":"  209","line":"        micro.checked_mul(1_000)"},
{"lineNum":"  210","line":"             .and_then(|nano| NaiveTime::from_hms_nano_opt(hour, min, sec, nano))"},
{"lineNum":"  211","line":"    }"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"    /// Makes a new `NaiveTime` from hour, minute, second and nanosecond."},
{"lineNum":"  214","line":"    ///"},
{"lineNum":"  215","line":"    /// The nanosecond part can exceed 1,000,000,000"},
{"lineNum":"  216","line":"    /// in order to represent the [leap second](#leap-second-what?)."},
{"lineNum":"  217","line":"    ///"},
{"lineNum":"  218","line":"    /// Panics on invalid hour, minute, second and/or nanosecond."},
{"lineNum":"  219","line":"    ///"},
{"lineNum":"  220","line":"    /// # Example"},
{"lineNum":"  221","line":"    ///"},
{"lineNum":"  222","line":"    /// ~~~~"},
{"lineNum":"  223","line":"    /// use chrono::{NaiveTime, Timelike};"},
{"lineNum":"  224","line":"    ///"},
{"lineNum":"  225","line":"    /// let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);"},
{"lineNum":"  226","line":"    /// assert_eq!(t.hour(), 23);"},
{"lineNum":"  227","line":"    /// assert_eq!(t.minute(), 56);"},
{"lineNum":"  228","line":"    /// assert_eq!(t.second(), 4);"},
{"lineNum":"  229","line":"    /// assert_eq!(t.nanosecond(), 12_345_678);"},
{"lineNum":"  230","line":"    /// ~~~~"},
{"lineNum":"  231","line":"    #[inline]"},
{"lineNum":"  232","line":"    pub fn from_hms_nano(hour: u32, min: u32, sec: u32, nano: u32) -> NaiveTime {"},
{"lineNum":"  233","line":"        NaiveTime::from_hms_nano_opt(hour, min, sec, nano).expect(\"invalid time\")"},
{"lineNum":"  234","line":"    }"},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"    /// Makes a new `NaiveTime` from hour, minute, second and nanosecond."},
{"lineNum":"  237","line":"    ///"},
{"lineNum":"  238","line":"    /// The nanosecond part can exceed 1,000,000,000"},
{"lineNum":"  239","line":"    /// in order to represent the [leap second](#leap-second-what?)."},
{"lineNum":"  240","line":"    ///"},
{"lineNum":"  241","line":"    /// Returns `None` on invalid hour, minute, second and/or nanosecond."},
{"lineNum":"  242","line":"    ///"},
{"lineNum":"  243","line":"    /// # Example"},
{"lineNum":"  244","line":"    ///"},
{"lineNum":"  245","line":"    /// ~~~~"},
{"lineNum":"  246","line":"    /// use chrono::NaiveTime;"},
{"lineNum":"  247","line":"    ///"},
{"lineNum":"  248","line":"    /// let hmsn = |h,m,s,nano| NaiveTime::from_hms_nano_opt(h, m, s, nano);"},
{"lineNum":"  249","line":"    /// assert!(hmsn(0, 0, 0, 0).is_some());"},
{"lineNum":"  250","line":"    /// assert!(hmsn(23, 59, 59, 999_999_999).is_some());"},
{"lineNum":"  251","line":"    /// assert!(hmsn(23, 59, 59, 1_999_999_999).is_some()); // a leap second following 23:59:59"},
{"lineNum":"  252","line":"    /// assert!(hmsn(24, 0, 0, 0).is_none());"},
{"lineNum":"  253","line":"    /// assert!(hmsn(23, 60, 0, 0).is_none());"},
{"lineNum":"  254","line":"    /// assert!(hmsn(23, 59, 60, 0).is_none());"},
{"lineNum":"  255","line":"    /// assert!(hmsn(23, 59, 59, 2_000_000_000).is_none());"},
{"lineNum":"  256","line":"    /// ~~~~"},
{"lineNum":"  257","line":"    #[inline]"},
{"lineNum":"  258","line":"    pub fn from_hms_nano_opt(hour: u32, min: u32, sec: u32, nano: u32) -> Option<NaiveTime> {"},
{"lineNum":"  259","line":"        if hour >= 24 || min >= 60 || sec >= 60 || nano >= 2_000_000_000 { return None; }"},
{"lineNum":"  260","line":"        let secs = hour * 3600 + min * 60 + sec;"},
{"lineNum":"  261","line":"        Some(NaiveTime { secs: secs, frac: nano })"},
{"lineNum":"  262","line":"    }"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"    /// Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond."},
{"lineNum":"  265","line":"    ///"},
{"lineNum":"  266","line":"    /// The nanosecond part can exceed 1,000,000,000"},
{"lineNum":"  267","line":"    /// in order to represent the [leap second](#leap-second-what?)."},
{"lineNum":"  268","line":"    ///"},
{"lineNum":"  269","line":"    /// Panics on invalid number of seconds and/or nanosecond."},
{"lineNum":"  270","line":"    ///"},
{"lineNum":"  271","line":"    /// # Example"},
{"lineNum":"  272","line":"    ///"},
{"lineNum":"  273","line":"    /// ~~~~"},
{"lineNum":"  274","line":"    /// use chrono::{NaiveTime, Timelike};"},
{"lineNum":"  275","line":"    ///"},
{"lineNum":"  276","line":"    /// let t = NaiveTime::from_num_seconds_from_midnight(86164, 12_345_678);"},
{"lineNum":"  277","line":"    /// assert_eq!(t.hour(), 23);"},
{"lineNum":"  278","line":"    /// assert_eq!(t.minute(), 56);"},
{"lineNum":"  279","line":"    /// assert_eq!(t.second(), 4);"},
{"lineNum":"  280","line":"    /// assert_eq!(t.nanosecond(), 12_345_678);"},
{"lineNum":"  281","line":"    /// ~~~~"},
{"lineNum":"  282","line":"    #[inline]"},
{"lineNum":"  283","line":"    pub fn from_num_seconds_from_midnight(secs: u32, nano: u32) -> NaiveTime {"},
{"lineNum":"  284","line":"        NaiveTime::from_num_seconds_from_midnight_opt(secs, nano).expect(\"invalid time\")"},
{"lineNum":"  285","line":"    }"},
{"lineNum":"  286","line":""},
{"lineNum":"  287","line":"    /// Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond."},
{"lineNum":"  288","line":"    ///"},
{"lineNum":"  289","line":"    /// The nanosecond part can exceed 1,000,000,000"},
{"lineNum":"  290","line":"    /// in order to represent the [leap second](#leap-second-what?)."},
{"lineNum":"  291","line":"    ///"},
{"lineNum":"  292","line":"    /// Returns `None` on invalid number of seconds and/or nanosecond."},
{"lineNum":"  293","line":"    ///"},
{"lineNum":"  294","line":"    /// # Example"},
{"lineNum":"  295","line":"    ///"},
{"lineNum":"  296","line":"    /// ~~~~"},
{"lineNum":"  297","line":"    /// use chrono::NaiveTime;"},
{"lineNum":"  298","line":"    ///"},
{"lineNum":"  299","line":"    /// let secs = |secs,nano| NaiveTime::from_num_seconds_from_midnight_opt(secs, nano);"},
{"lineNum":"  300","line":"    /// assert!(secs(0, 0).is_some());"},
{"lineNum":"  301","line":"    /// assert!(secs(86399, 999_999_999).is_some());"},
{"lineNum":"  302","line":"    /// assert!(secs(86399, 1_999_999_999).is_some()); // a leap second following 23:59:59"},
{"lineNum":"  303","line":"    /// assert!(secs(86400, 0).is_none());"},
{"lineNum":"  304","line":"    /// assert!(secs(86399, 2_000_000_000).is_none());"},
{"lineNum":"  305","line":"    /// ~~~~"},
{"lineNum":"  306","line":"    #[inline]"},
{"lineNum":"  307","line":"    pub fn from_num_seconds_from_midnight_opt(secs: u32, nano: u32) -> Option<NaiveTime> {","class":"lineCov","hits":"1","order":"1016",},
{"lineNum":"  308","line":"        if secs >= 86400 || nano >= 2_000_000_000 { return None; }","class":"lineCov","hits":"1","order":"1014",},
{"lineNum":"  309","line":"        Some(NaiveTime { secs: secs, frac: nano })","class":"lineCov","hits":"1","order":"1015",},
{"lineNum":"  310","line":"    }"},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"    /// Parses a string with the specified format string and returns a new `NaiveTime`."},
{"lineNum":"  313","line":"    /// See the [`format::strftime` module](../../format/strftime/index.html)"},
{"lineNum":"  314","line":"    /// on the supported escape sequences."},
{"lineNum":"  315","line":"    ///"},
{"lineNum":"  316","line":"    /// # Example"},
{"lineNum":"  317","line":"    ///"},
{"lineNum":"  318","line":"    /// ~~~~"},
{"lineNum":"  319","line":"    /// use chrono::NaiveTime;"},
{"lineNum":"  320","line":"    ///"},
{"lineNum":"  321","line":"    /// assert_eq!(NaiveTime::parse_from_str(\"23:56:04\", \"%H:%M:%S\"),"},
{"lineNum":"  322","line":"    ///            Ok(NaiveTime::from_hms(23, 56, 4)));"},
{"lineNum":"  323","line":"    /// assert_eq!(NaiveTime::parse_from_str(\"pm012345.6789\", \"%p%I%M%S%.f\"),"},
{"lineNum":"  324","line":"    ///            Ok(NaiveTime::from_hms_micro(13, 23, 45, 678_900)));"},
{"lineNum":"  325","line":"    /// ~~~~"},
{"lineNum":"  326","line":"    ///"},
{"lineNum":"  327","line":"    /// Date and offset is ignored for the purpose of parsing."},
{"lineNum":"  328","line":"    ///"},
{"lineNum":"  329","line":"    /// ~~~~"},
{"lineNum":"  330","line":"    /// # use chrono::NaiveTime;"},
{"lineNum":"  331","line":"    /// assert_eq!(NaiveTime::parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),"},
{"lineNum":"  332","line":"    ///            Ok(NaiveTime::from_hms(12, 34, 56)));"},
{"lineNum":"  333","line":"    /// ~~~~"},
{"lineNum":"  334","line":"    ///"},
{"lineNum":"  335","line":"    /// [Leap seconds](#leap-second-what?) are correctly handled by"},
{"lineNum":"  336","line":"    /// treating any time of the form `hh:mm:60` as a leap second."},
{"lineNum":"  337","line":"    /// (This equally applies to the formatting, so the round trip is possible.)"},
{"lineNum":"  338","line":"    ///"},
{"lineNum":"  339","line":"    /// ~~~~"},
{"lineNum":"  340","line":"    /// # use chrono::NaiveTime;"},
{"lineNum":"  341","line":"    /// assert_eq!(NaiveTime::parse_from_str(\"08:59:60.123\", \"%H:%M:%S%.f\"),"},
{"lineNum":"  342","line":"    ///            Ok(NaiveTime::from_hms_milli(8, 59, 59, 1_123)));"},
{"lineNum":"  343","line":"    /// ~~~~"},
{"lineNum":"  344","line":"    ///"},
{"lineNum":"  345","line":"    /// Missing seconds are assumed to be zero,"},
{"lineNum":"  346","line":"    /// but out-of-bound times or insufficient fields are errors otherwise."},
{"lineNum":"  347","line":"    ///"},
{"lineNum":"  348","line":"    /// ~~~~"},
{"lineNum":"  349","line":"    /// # use chrono::NaiveTime;"},
{"lineNum":"  350","line":"    /// assert_eq!(NaiveTime::parse_from_str(\"7:15\", \"%H:%M\"),"},
{"lineNum":"  351","line":"    ///            Ok(NaiveTime::from_hms(7, 15, 0)));"},
{"lineNum":"  352","line":"    ///"},
{"lineNum":"  353","line":"    /// assert!(NaiveTime::parse_from_str(\"04m33s\", \"%Mm%Ss\").is_err());"},
{"lineNum":"  354","line":"    /// assert!(NaiveTime::parse_from_str(\"12\", \"%H\").is_err());"},
{"lineNum":"  355","line":"    /// assert!(NaiveTime::parse_from_str(\"17:60\", \"%H:%M\").is_err());"},
{"lineNum":"  356","line":"    /// assert!(NaiveTime::parse_from_str(\"24:00:00\", \"%H:%M:%S\").is_err());"},
{"lineNum":"  357","line":"    /// ~~~~"},
{"lineNum":"  358","line":"    ///"},
{"lineNum":"  359","line":"    /// All parsed fields should be consistent to each other, otherwise it\'s an error."},
{"lineNum":"  360","line":"    /// Here `%H` is for 24-hour clocks, unlike `%I`,"},
{"lineNum":"  361","line":"    /// and thus can be independently determined without AM/PM."},
{"lineNum":"  362","line":"    ///"},
{"lineNum":"  363","line":"    /// ~~~~"},
{"lineNum":"  364","line":"    /// # use chrono::NaiveTime;"},
{"lineNum":"  365","line":"    /// assert!(NaiveTime::parse_from_str(\"13:07 AM\", \"%H:%M %p\").is_err());"},
{"lineNum":"  366","line":"    /// ~~~~"},
{"lineNum":"  367","line":"    pub fn parse_from_str(s: &str, fmt: &str) -> ParseResult<NaiveTime> {"},
{"lineNum":"  368","line":"        let mut parsed = Parsed::new();"},
{"lineNum":"  369","line":"        try!(parse(&mut parsed, s, StrftimeItems::new(fmt)));"},
{"lineNum":"  370","line":"        parsed.to_naive_time()"},
{"lineNum":"  371","line":"    }"},
{"lineNum":"  372","line":""},
{"lineNum":"  373","line":"    /// Formats the time with the specified formatting items."},
{"lineNum":"  374","line":"    /// Otherwise it is same to the ordinary `format` method."},
{"lineNum":"  375","line":"    ///"},
{"lineNum":"  376","line":"    /// The `Iterator` of items should be `Clone`able,"},
{"lineNum":"  377","line":"    /// since the resulting `DelayedFormat` value may be formatted multiple times."},
{"lineNum":"  378","line":"    ///"},
{"lineNum":"  379","line":"    /// # Example"},
{"lineNum":"  380","line":"    ///"},
{"lineNum":"  381","line":"    /// ~~~~"},
{"lineNum":"  382","line":"    /// use chrono::NaiveTime;"},
{"lineNum":"  383","line":"    /// use chrono::format::strftime::StrftimeItems;"},
{"lineNum":"  384","line":"    ///"},
{"lineNum":"  385","line":"    /// let fmt = StrftimeItems::new(\"%H:%M:%S\");"},
{"lineNum":"  386","line":"    /// let t = NaiveTime::from_hms(23, 56, 4);"},
{"lineNum":"  387","line":"    /// assert_eq!(t.format_with_items(fmt.clone()).to_string(), \"23:56:04\");"},
{"lineNum":"  388","line":"    /// assert_eq!(t.format(\"%H:%M:%S\").to_string(), \"23:56:04\");"},
{"lineNum":"  389","line":"    /// ~~~~"},
{"lineNum":"  390","line":"    #[inline]"},
{"lineNum":"  391","line":"    pub fn format_with_items<\'a, I>(&self, items: I) -> DelayedFormat<I>"},
{"lineNum":"  392","line":"            where I: Iterator<Item=Item<\'a>> + Clone {"},
{"lineNum":"  393","line":"        DelayedFormat::new(None, Some(self.clone()), items)"},
{"lineNum":"  394","line":"    }"},
{"lineNum":"  395","line":""},
{"lineNum":"  396","line":"    /// Formats the time with the specified format string."},
{"lineNum":"  397","line":"    /// See the [`format::strftime` module](../../format/strftime/index.html)"},
{"lineNum":"  398","line":"    /// on the supported escape sequences."},
{"lineNum":"  399","line":"    ///"},
{"lineNum":"  400","line":"    /// This returns a `DelayedFormat`,"},
{"lineNum":"  401","line":"    /// which gets converted to a string only when actual formatting happens."},
{"lineNum":"  402","line":"    /// You may use the `to_string` method to get a `String`,"},
{"lineNum":"  403","line":"    /// or just feed it into `print!` and other formatting macros."},
{"lineNum":"  404","line":"    /// (In this way it avoids the redundant memory allocation.)"},
{"lineNum":"  405","line":"    ///"},
{"lineNum":"  406","line":"    /// A wrong format string does *not* issue an error immediately."},
{"lineNum":"  407","line":"    /// Rather, converting or formatting the `DelayedFormat` fails."},
{"lineNum":"  408","line":"    /// You are recommended to immediately use `DelayedFormat` for this reason."},
{"lineNum":"  409","line":"    ///"},
{"lineNum":"  410","line":"    /// # Example"},
{"lineNum":"  411","line":"    ///"},
{"lineNum":"  412","line":"    /// ~~~~"},
{"lineNum":"  413","line":"    /// use chrono::NaiveTime;"},
{"lineNum":"  414","line":"    ///"},
{"lineNum":"  415","line":"    /// let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);"},
{"lineNum":"  416","line":"    /// assert_eq!(t.format(\"%H:%M:%S\").to_string(), \"23:56:04\");"},
{"lineNum":"  417","line":"    /// assert_eq!(t.format(\"%H:%M:%S%.6f\").to_string(), \"23:56:04.012345\");"},
{"lineNum":"  418","line":"    /// assert_eq!(t.format(\"%-I:%M %p\").to_string(), \"11:56 PM\");"},
{"lineNum":"  419","line":"    /// ~~~~"},
{"lineNum":"  420","line":"    #[inline]"},
{"lineNum":"  421","line":"    pub fn format<\'a>(&self, fmt: &\'a str) -> DelayedFormat<StrftimeItems<\'a>> {"},
{"lineNum":"  422","line":"        self.format_with_items(StrftimeItems::new(fmt))"},
{"lineNum":"  423","line":"    }"},
{"lineNum":"  424","line":""},
{"lineNum":"  425","line":"    /// Returns a triple of the hour, minute and second numbers."},
{"lineNum":"  426","line":"    fn hms(&self) -> (u32, u32, u32) {"},
{"lineNum":"  427","line":"        let (mins, sec) = div_mod_floor(self.secs, 60);"},
{"lineNum":"  428","line":"        let (hour, min) = div_mod_floor(mins, 60);"},
{"lineNum":"  429","line":"        (hour, min, sec)"},
{"lineNum":"  430","line":"    }"},
{"lineNum":"  431","line":"}"},
{"lineNum":"  432","line":""},
{"lineNum":"  433","line":"impl Timelike for NaiveTime {"},
{"lineNum":"  434","line":"    #[inline] fn hour(&self) -> u32 { self.hms().0 }"},
{"lineNum":"  435","line":"    #[inline] fn minute(&self) -> u32 { self.hms().1 }"},
{"lineNum":"  436","line":"    #[inline] fn second(&self) -> u32 { self.hms().2 }"},
{"lineNum":"  437","line":"    #[inline] fn nanosecond(&self) -> u32 { self.frac }"},
{"lineNum":"  438","line":""},
{"lineNum":"  439","line":"    #[inline]"},
{"lineNum":"  440","line":"    fn with_hour(&self, hour: u32) -> Option<NaiveTime> {"},
{"lineNum":"  441","line":"        if hour >= 24 { return None; }"},
{"lineNum":"  442","line":"        let secs = hour * 3600 + self.secs % 3600;"},
{"lineNum":"  443","line":"        Some(NaiveTime { secs: secs, ..*self })"},
{"lineNum":"  444","line":"    }"},
{"lineNum":"  445","line":""},
{"lineNum":"  446","line":"    #[inline]"},
{"lineNum":"  447","line":"    fn with_minute(&self, min: u32) -> Option<NaiveTime> {"},
{"lineNum":"  448","line":"        if min >= 60 { return None; }"},
{"lineNum":"  449","line":"        let secs = self.secs / 3600 * 3600 + min * 60 + self.secs % 60;"},
{"lineNum":"  450","line":"        Some(NaiveTime { secs: secs, ..*self })"},
{"lineNum":"  451","line":"    }"},
{"lineNum":"  452","line":""},
{"lineNum":"  453","line":"    #[inline]"},
{"lineNum":"  454","line":"    fn with_second(&self, sec: u32) -> Option<NaiveTime> {"},
{"lineNum":"  455","line":"        if sec >= 60 { return None; }"},
{"lineNum":"  456","line":"        let secs = self.secs / 60 * 60 + sec;"},
{"lineNum":"  457","line":"        Some(NaiveTime { secs: secs, ..*self })"},
{"lineNum":"  458","line":"    }"},
{"lineNum":"  459","line":""},
{"lineNum":"  460","line":"    #[inline]"},
{"lineNum":"  461","line":"    fn with_nanosecond(&self, nano: u32) -> Option<NaiveTime> {"},
{"lineNum":"  462","line":"        if nano >= 2_000_000_000 { return None; }"},
{"lineNum":"  463","line":"        Some(NaiveTime { frac: nano, ..*self })"},
{"lineNum":"  464","line":"    }"},
{"lineNum":"  465","line":""},
{"lineNum":"  466","line":"    #[inline]"},
{"lineNum":"  467","line":"    fn num_seconds_from_midnight(&self) -> u32 {"},
{"lineNum":"  468","line":"        self.secs // do not repeat the calculation!"},
{"lineNum":"  469","line":"    }"},
{"lineNum":"  470","line":"}"},
{"lineNum":"  471","line":""},
{"lineNum":"  472","line":"impl hash::Hash for NaiveTime {"},
{"lineNum":"  473","line":"    fn hash<H: hash::Hasher>(&self, state: &mut H) {"},
{"lineNum":"  474","line":"        self.secs.hash(state);"},
{"lineNum":"  475","line":"        self.frac.hash(state);"},
{"lineNum":"  476","line":"    }"},
{"lineNum":"  477","line":"}"},
{"lineNum":"  478","line":""},
{"lineNum":"  479","line":"impl Add<Duration> for NaiveTime {"},
{"lineNum":"  480","line":"    type Output = NaiveTime;"},
{"lineNum":"  481","line":""},
{"lineNum":"  482","line":"    fn add(self, rhs: Duration) -> NaiveTime {"},
{"lineNum":"  483","line":"        // there is no direct interface in `Duration` to get only the nanosecond part,"},
{"lineNum":"  484","line":"        // so we need to do the additional calculation here."},
{"lineNum":"  485","line":"        let mut rhssecs = rhs.num_seconds();"},
{"lineNum":"  486","line":"        let mut rhs2 = rhs - Duration::seconds(rhssecs);"},
{"lineNum":"  487","line":"        if rhs2 < Duration::zero() { // possible when rhs < 0"},
{"lineNum":"  488","line":"            rhssecs -= 1;"},
{"lineNum":"  489","line":"            rhs2 = rhs2 + Duration::seconds(1);"},
{"lineNum":"  490","line":"        }"},
{"lineNum":"  491","line":"        debug_assert!(rhs2 >= Duration::zero());"},
{"lineNum":"  492","line":"        let mut secs = self.secs + (rhssecs % 86400 + 86400) as u32;"},
{"lineNum":"  493","line":"        let mut nanos = self.frac + rhs2.num_nanoseconds().unwrap() as u32;"},
{"lineNum":"  494","line":""},
{"lineNum":"  495","line":"        // always ignore leap seconds after the current whole second"},
{"lineNum":"  496","line":"        let maxnanos = if self.frac >= 1_000_000_000 {2_000_000_000} else {1_000_000_000};"},
{"lineNum":"  497","line":""},
{"lineNum":"  498","line":"        if nanos >= maxnanos {"},
{"lineNum":"  499","line":"            nanos -= maxnanos;"},
{"lineNum":"  500","line":"            secs += 1;"},
{"lineNum":"  501","line":"        }"},
{"lineNum":"  502","line":"        NaiveTime { secs: secs % 86400, frac: nanos }"},
{"lineNum":"  503","line":"    }"},
{"lineNum":"  504","line":"}"},
{"lineNum":"  505","line":""},
{"lineNum":"  506","line":"impl Sub<NaiveTime> for NaiveTime {"},
{"lineNum":"  507","line":"    type Output = Duration;"},
{"lineNum":"  508","line":""},
{"lineNum":"  509","line":"    fn sub(self, rhs: NaiveTime) -> Duration {"},
{"lineNum":"  510","line":"        // the number of whole non-leap seconds"},
{"lineNum":"  511","line":"        let secs = self.secs as i64 - rhs.secs as i64 - 1;"},
{"lineNum":"  512","line":""},
{"lineNum":"  513","line":"        // the fractional second from the rhs to the next non-leap second"},
{"lineNum":"  514","line":"        let maxnanos = if rhs.frac >= 1_000_000_000 {2_000_000_000} else {1_000_000_000};"},
{"lineNum":"  515","line":"        let nanos1 = maxnanos - rhs.frac;"},
{"lineNum":"  516","line":""},
{"lineNum":"  517","line":"        // the fractional second from the last leap or non-leap second to the lhs"},
{"lineNum":"  518","line":"        let lastfrac = if self.frac >= 1_000_000_000 {1_000_000_000} else {0};"},
{"lineNum":"  519","line":"        let nanos2 = self.frac - lastfrac;"},
{"lineNum":"  520","line":""},
{"lineNum":"  521","line":"        Duration::seconds(secs) + Duration::nanoseconds(nanos1 as i64 + nanos2 as i64)"},
{"lineNum":"  522","line":"    }"},
{"lineNum":"  523","line":"}"},
{"lineNum":"  524","line":""},
{"lineNum":"  525","line":"impl Sub<Duration> for NaiveTime {"},
{"lineNum":"  526","line":"    type Output = NaiveTime;"},
{"lineNum":"  527","line":""},
{"lineNum":"  528","line":"    #[inline]"},
{"lineNum":"  529","line":"    fn sub(self, rhs: Duration) -> NaiveTime { self.add(-rhs) }"},
{"lineNum":"  530","line":"}"},
{"lineNum":"  531","line":""},
{"lineNum":"  532","line":"impl fmt::Debug for NaiveTime {"},
{"lineNum":"  533","line":"    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"},
{"lineNum":"  534","line":"        let (hour, min, sec) = self.hms();"},
{"lineNum":"  535","line":"        let (sec, nano) = if self.frac >= 1_000_000_000 {"},
{"lineNum":"  536","line":"            (sec + 1, self.frac - 1_000_000_000)"},
{"lineNum":"  537","line":"        } else {"},
{"lineNum":"  538","line":"            (sec, self.frac)"},
{"lineNum":"  539","line":"        };"},
{"lineNum":"  540","line":""},
{"lineNum":"  541","line":"        try!(write!(f, \"{:02}:{:02}:{:02}\", hour, min, sec));"},
{"lineNum":"  542","line":"        if nano == 0 {"},
{"lineNum":"  543","line":"            Ok(())"},
{"lineNum":"  544","line":"        } else if nano % 1_000_000 == 0 {"},
{"lineNum":"  545","line":"            write!(f, \".{:03}\", nano / 1_000_000)"},
{"lineNum":"  546","line":"        } else if nano % 1_000 == 0 {"},
{"lineNum":"  547","line":"            write!(f, \".{:06}\", nano / 1_000)"},
{"lineNum":"  548","line":"        } else {"},
{"lineNum":"  549","line":"            write!(f, \".{:09}\", nano)"},
{"lineNum":"  550","line":"        }"},
{"lineNum":"  551","line":"    }"},
{"lineNum":"  552","line":"}"},
{"lineNum":"  553","line":""},
{"lineNum":"  554","line":"impl fmt::Display for NaiveTime {"},
{"lineNum":"  555","line":"    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result { fmt::Debug::fmt(self, f) }"},
{"lineNum":"  556","line":"}"},
{"lineNum":"  557","line":""},
{"lineNum":"  558","line":"impl str::FromStr for NaiveTime {"},
{"lineNum":"  559","line":"    type Err = ParseError;"},
{"lineNum":"  560","line":""},
{"lineNum":"  561","line":"    fn from_str(s: &str) -> ParseResult<NaiveTime> {"},
{"lineNum":"  562","line":"        const ITEMS: &\'static [Item<\'static>] = &["},
{"lineNum":"  563","line":"            Item::Space(\"\"), Item::Numeric(Numeric::Hour, Pad::Zero),"},
{"lineNum":"  564","line":"            Item::Space(\"\"), Item::Literal(\":\"),"},
{"lineNum":"  565","line":"            Item::Space(\"\"), Item::Numeric(Numeric::Minute, Pad::Zero),"},
{"lineNum":"  566","line":"            Item::Space(\"\"), Item::Literal(\":\"),"},
{"lineNum":"  567","line":"            Item::Space(\"\"), Item::Numeric(Numeric::Second, Pad::Zero),"},
{"lineNum":"  568","line":"            Item::Fixed(Fixed::Nanosecond), Item::Space(\"\"),"},
{"lineNum":"  569","line":"        ];"},
{"lineNum":"  570","line":""},
{"lineNum":"  571","line":"        let mut parsed = Parsed::new();"},
{"lineNum":"  572","line":"        try!(parse(&mut parsed, s, ITEMS.iter().cloned()));"},
{"lineNum":"  573","line":"        parsed.to_naive_time()"},
{"lineNum":"  574","line":"    }"},
{"lineNum":"  575","line":"}"},
{"lineNum":"  576","line":""},
{"lineNum":"  577","line":"#[cfg(feature = \"serde\")]"},
{"lineNum":"  578","line":"mod serde {"},
{"lineNum":"  579","line":"    use super::NaiveTime;"},
{"lineNum":"  580","line":"    use serde::{ser, de};"},
{"lineNum":"  581","line":""},
{"lineNum":"  582","line":"    impl ser::Serialize for NaiveTime {"},
{"lineNum":"  583","line":"        fn serialize<S>(&self, serializer: &mut S) -> Result<(), S::Error>"},
{"lineNum":"  584","line":"            where S: ser::Serializer"},
{"lineNum":"  585","line":"        {"},
{"lineNum":"  586","line":"            serializer.visit_str(&format!(\"{:?}\", self))"},
{"lineNum":"  587","line":"        }"},
{"lineNum":"  588","line":"    }"},
{"lineNum":"  589","line":""},
{"lineNum":"  590","line":"    struct NaiveTimeVisitor;"},
{"lineNum":"  591","line":""},
{"lineNum":"  592","line":"    impl de::Visitor for NaiveTimeVisitor {"},
{"lineNum":"  593","line":"        type Value = NaiveTime;"},
{"lineNum":"  594","line":""},
{"lineNum":"  595","line":"        fn visit_str<E>(&mut self, value: &str) -> Result<NaiveTime, E>"},
{"lineNum":"  596","line":"            where E: de::Error"},
{"lineNum":"  597","line":"        {"},
{"lineNum":"  598","line":"            value.parse().map_err(|err| E::syntax(&format!(\"{}\", err)))"},
{"lineNum":"  599","line":"        }"},
{"lineNum":"  600","line":"    }"},
{"lineNum":"  601","line":""},
{"lineNum":"  602","line":"    impl de::Deserialize for NaiveTime {"},
{"lineNum":"  603","line":"        fn deserialize<D>(deserializer: &mut D) -> Result<Self, D::Error>"},
{"lineNum":"  604","line":"            where D: de::Deserializer"},
{"lineNum":"  605","line":"        {"},
{"lineNum":"  606","line":"            deserializer.visit(NaiveTimeVisitor)"},
{"lineNum":"  607","line":"        }"},
{"lineNum":"  608","line":"    }"},
{"lineNum":"  609","line":"}"},
{"lineNum":"  610","line":""},
{"lineNum":"  611","line":"#[cfg(test)]"},
{"lineNum":"  612","line":"mod tests {"},
{"lineNum":"  613","line":"    use super::NaiveTime;"},
{"lineNum":"  614","line":"    use Timelike;"},
{"lineNum":"  615","line":"    use duration::Duration;"},
{"lineNum":"  616","line":"    use std::u32;"},
{"lineNum":"  617","line":""},
{"lineNum":"  618","line":"    #[test]"},
{"lineNum":"  619","line":"    fn test_time_from_hms_milli() {"},
{"lineNum":"  620","line":"        assert_eq!(NaiveTime::from_hms_milli_opt(3, 5, 7, 0),"},
{"lineNum":"  621","line":"                   Some(NaiveTime::from_hms_nano(3, 5, 7, 0)));"},
{"lineNum":"  622","line":"        assert_eq!(NaiveTime::from_hms_milli_opt(3, 5, 7, 777),"},
{"lineNum":"  623","line":"                   Some(NaiveTime::from_hms_nano(3, 5, 7, 777_000_000)));"},
{"lineNum":"  624","line":"        assert_eq!(NaiveTime::from_hms_milli_opt(3, 5, 7, 1_999),"},
{"lineNum":"  625","line":"                   Some(NaiveTime::from_hms_nano(3, 5, 7, 1_999_000_000)));"},
{"lineNum":"  626","line":"        assert_eq!(NaiveTime::from_hms_milli_opt(3, 5, 7, 2_000), None);"},
{"lineNum":"  627","line":"        assert_eq!(NaiveTime::from_hms_milli_opt(3, 5, 7, 5_000), None); // overflow check"},
{"lineNum":"  628","line":"        assert_eq!(NaiveTime::from_hms_milli_opt(3, 5, 7, u32::MAX), None);"},
{"lineNum":"  629","line":"    }"},
{"lineNum":"  630","line":""},
{"lineNum":"  631","line":"    #[test]"},
{"lineNum":"  632","line":"    fn test_time_from_hms_micro() {"},
{"lineNum":"  633","line":"        assert_eq!(NaiveTime::from_hms_micro_opt(3, 5, 7, 0),"},
{"lineNum":"  634","line":"                   Some(NaiveTime::from_hms_nano(3, 5, 7, 0)));"},
{"lineNum":"  635","line":"        assert_eq!(NaiveTime::from_hms_micro_opt(3, 5, 7, 333),"},
{"lineNum":"  636","line":"                   Some(NaiveTime::from_hms_nano(3, 5, 7, 333_000)));"},
{"lineNum":"  637","line":"        assert_eq!(NaiveTime::from_hms_micro_opt(3, 5, 7, 777_777),"},
{"lineNum":"  638","line":"                   Some(NaiveTime::from_hms_nano(3, 5, 7, 777_777_000)));"},
{"lineNum":"  639","line":"        assert_eq!(NaiveTime::from_hms_micro_opt(3, 5, 7, 1_999_999),"},
{"lineNum":"  640","line":"                   Some(NaiveTime::from_hms_nano(3, 5, 7, 1_999_999_000)));"},
{"lineNum":"  641","line":"        assert_eq!(NaiveTime::from_hms_micro_opt(3, 5, 7, 2_000_000), None);"},
{"lineNum":"  642","line":"        assert_eq!(NaiveTime::from_hms_micro_opt(3, 5, 7, 5_000_000), None); // overflow check"},
{"lineNum":"  643","line":"        assert_eq!(NaiveTime::from_hms_micro_opt(3, 5, 7, u32::MAX), None);"},
{"lineNum":"  644","line":"    }"},
{"lineNum":"  645","line":""},
{"lineNum":"  646","line":"    #[test]"},
{"lineNum":"  647","line":"    fn test_time_hms() {"},
{"lineNum":"  648","line":"        assert_eq!(NaiveTime::from_hms(3, 5, 7).hour(), 3);"},
{"lineNum":"  649","line":"        assert_eq!(NaiveTime::from_hms(3, 5, 7).with_hour(0),"},
{"lineNum":"  650","line":"                   Some(NaiveTime::from_hms(0, 5, 7)));"},
{"lineNum":"  651","line":"        assert_eq!(NaiveTime::from_hms(3, 5, 7).with_hour(23),"},
{"lineNum":"  652","line":"                   Some(NaiveTime::from_hms(23, 5, 7)));"},
{"lineNum":"  653","line":"        assert_eq!(NaiveTime::from_hms(3, 5, 7).with_hour(24), None);"},
{"lineNum":"  654","line":"        assert_eq!(NaiveTime::from_hms(3, 5, 7).with_hour(u32::MAX), None);"},
{"lineNum":"  655","line":""},
{"lineNum":"  656","line":"        assert_eq!(NaiveTime::from_hms(3, 5, 7).minute(), 5);"},
{"lineNum":"  657","line":"        assert_eq!(NaiveTime::from_hms(3, 5, 7).with_minute(0),"},
{"lineNum":"  658","line":"                   Some(NaiveTime::from_hms(3, 0, 7)));"},
{"lineNum":"  659","line":"        assert_eq!(NaiveTime::from_hms(3, 5, 7).with_minute(59),"},
{"lineNum":"  660","line":"                   Some(NaiveTime::from_hms(3, 59, 7)));"},
{"lineNum":"  661","line":"        assert_eq!(NaiveTime::from_hms(3, 5, 7).with_minute(60), None);"},
{"lineNum":"  662","line":"        assert_eq!(NaiveTime::from_hms(3, 5, 7).with_minute(u32::MAX), None);"},
{"lineNum":"  663","line":""},
{"lineNum":"  664","line":"        assert_eq!(NaiveTime::from_hms(3, 5, 7).second(), 7);"},
{"lineNum":"  665","line":"        assert_eq!(NaiveTime::from_hms(3, 5, 7).with_second(0),"},
{"lineNum":"  666","line":"                   Some(NaiveTime::from_hms(3, 5, 0)));"},
{"lineNum":"  667","line":"        assert_eq!(NaiveTime::from_hms(3, 5, 7).with_second(59),"},
{"lineNum":"  668","line":"                   Some(NaiveTime::from_hms(3, 5, 59)));"},
{"lineNum":"  669","line":"        assert_eq!(NaiveTime::from_hms(3, 5, 7).with_second(60), None);"},
{"lineNum":"  670","line":"        assert_eq!(NaiveTime::from_hms(3, 5, 7).with_second(u32::MAX), None);"},
{"lineNum":"  671","line":"    }"},
{"lineNum":"  672","line":""},
{"lineNum":"  673","line":"    #[test]"},
{"lineNum":"  674","line":"    fn test_time_add() {"},
{"lineNum":"  675","line":"        fn check(lhs: NaiveTime, rhs: Duration, sum: NaiveTime) {"},
{"lineNum":"  676","line":"            assert_eq!(lhs + rhs, sum);"},
{"lineNum":"  677","line":"            //assert_eq!(rhs + lhs, sum);"},
{"lineNum":"  678","line":"        }"},
{"lineNum":"  679","line":""},
{"lineNum":"  680","line":"        let hmsm = |h,m,s,mi| NaiveTime::from_hms_milli(h, m, s, mi);"},
{"lineNum":"  681","line":""},
{"lineNum":"  682","line":"        check(hmsm(3, 5, 7, 900), Duration::zero(), hmsm(3, 5, 7, 900));"},
{"lineNum":"  683","line":"        check(hmsm(3, 5, 7, 900), Duration::milliseconds(100), hmsm(3, 5, 8, 0));"},
{"lineNum":"  684","line":"        check(hmsm(3, 5, 7, 1_300), Duration::milliseconds(800), hmsm(3, 5, 8, 100));"},
{"lineNum":"  685","line":"        check(hmsm(3, 5, 7, 900), Duration::seconds(86399), hmsm(3, 5, 6, 900)); // overwrap"},
{"lineNum":"  686","line":"        check(hmsm(3, 5, 7, 900), Duration::seconds(-86399), hmsm(3, 5, 8, 900));"},
{"lineNum":"  687","line":"        check(hmsm(3, 5, 7, 900), Duration::days(12345), hmsm(3, 5, 7, 900));"},
{"lineNum":"  688","line":""},
{"lineNum":"  689","line":"        // regression tests for #37"},
{"lineNum":"  690","line":"        check(hmsm(0, 0, 0, 0), Duration::milliseconds(-990), hmsm(23, 59, 59, 10));"},
{"lineNum":"  691","line":"        check(hmsm(0, 0, 0, 0), Duration::milliseconds(-9990), hmsm(23, 59, 50, 10));"},
{"lineNum":"  692","line":"    }"},
{"lineNum":"  693","line":""},
{"lineNum":"  694","line":"    #[test]"},
{"lineNum":"  695","line":"    fn test_time_sub() {"},
{"lineNum":"  696","line":"        fn check(lhs: NaiveTime, rhs: NaiveTime, diff: Duration) {"},
{"lineNum":"  697","line":"            // `time1 - time2 = duration` is equivalent to `time2 - time1 = -duration`"},
{"lineNum":"  698","line":"            assert_eq!(lhs - rhs, diff);"},
{"lineNum":"  699","line":"            assert_eq!(rhs - lhs, -diff);"},
{"lineNum":"  700","line":"        }"},
{"lineNum":"  701","line":""},
{"lineNum":"  702","line":"        let hmsm = |h,m,s,mi| NaiveTime::from_hms_milli(h, m, s, mi);"},
{"lineNum":"  703","line":""},
{"lineNum":"  704","line":"        check(hmsm(3, 5, 7, 900), hmsm(3, 5, 7, 900), Duration::zero());"},
{"lineNum":"  705","line":"        check(hmsm(3, 5, 7, 900), hmsm(3, 5, 7, 600), Duration::milliseconds(300));"},
{"lineNum":"  706","line":"        check(hmsm(3, 5, 7, 200), hmsm(2, 4, 6, 200), Duration::seconds(3600 + 60 + 1));"},
{"lineNum":"  707","line":"        check(hmsm(3, 5, 7, 200), hmsm(2, 4, 6, 300),"},
{"lineNum":"  708","line":"                   Duration::seconds(3600 + 60) + Duration::milliseconds(900));"},
{"lineNum":"  709","line":""},
{"lineNum":"  710","line":"        // treats the leap second as if it coincides with the prior non-leap second,"},
{"lineNum":"  711","line":"        // as required by `time1 - time2 = duration` and `time2 - time1 = -duration` equivalence."},
{"lineNum":"  712","line":"        check(hmsm(3, 5, 7, 200), hmsm(3, 5, 6, 1_800), Duration::milliseconds(400));"},
{"lineNum":"  713","line":"        check(hmsm(3, 5, 7, 1_200), hmsm(3, 5, 6, 1_800), Duration::milliseconds(400));"},
{"lineNum":"  714","line":"        check(hmsm(3, 5, 7, 1_200), hmsm(3, 5, 6, 800), Duration::milliseconds(400));"},
{"lineNum":"  715","line":""},
{"lineNum":"  716","line":"        // additional equality: `time1 + duration = time2` is equivalent to"},
{"lineNum":"  717","line":"        // `time2 - time1 = duration` IF AND ONLY IF `time2` represents a non-leap second."},
{"lineNum":"  718","line":"        assert_eq!(hmsm(3, 5, 6, 800) + Duration::milliseconds(400), hmsm(3, 5, 7, 200));"},
{"lineNum":"  719","line":"        assert_eq!(hmsm(3, 5, 6, 1_800) + Duration::milliseconds(400), hmsm(3, 5, 7, 200));"},
{"lineNum":"  720","line":"    }"},
{"lineNum":"  721","line":""},
{"lineNum":"  722","line":"    #[test]"},
{"lineNum":"  723","line":"    fn test_time_fmt() {"},
{"lineNum":"  724","line":"        assert_eq!(format!(\"{}\", NaiveTime::from_hms_milli(23, 59, 59, 999)), \"23:59:59.999\");"},
{"lineNum":"  725","line":"        assert_eq!(format!(\"{}\", NaiveTime::from_hms_milli(23, 59, 59, 1_000)), \"23:59:60\");"},
{"lineNum":"  726","line":"        assert_eq!(format!(\"{}\", NaiveTime::from_hms_milli(23, 59, 59, 1_001)), \"23:59:60.001\");"},
{"lineNum":"  727","line":"        assert_eq!(format!(\"{}\", NaiveTime::from_hms_micro(0, 0, 0, 43210)), \"00:00:00.043210\");"},
{"lineNum":"  728","line":"        assert_eq!(format!(\"{}\", NaiveTime::from_hms_nano(0, 0, 0, 6543210)), \"00:00:00.006543210\");"},
{"lineNum":"  729","line":""},
{"lineNum":"  730","line":"        // the format specifier should have no effect on `NaiveTime`"},
{"lineNum":"  731","line":"        assert_eq!(format!(\"{:30}\", NaiveTime::from_hms_milli(3, 5, 7, 9)), \"03:05:07.009\");"},
{"lineNum":"  732","line":"    }"},
{"lineNum":"  733","line":""},
{"lineNum":"  734","line":"    #[test]"},
{"lineNum":"  735","line":"    fn test_date_from_str() {"},
{"lineNum":"  736","line":"        // valid cases"},
{"lineNum":"  737","line":"        let valid = ["},
{"lineNum":"  738","line":"            \"0:0:0\","},
{"lineNum":"  739","line":"            \"0:0:0.0000000\","},
{"lineNum":"  740","line":"            \"0:0:0.0000003\","},
{"lineNum":"  741","line":"            \" 4 : 3 : 2.1 \","},
{"lineNum":"  742","line":"            \" 09:08:07 \","},
{"lineNum":"  743","line":"            \" 9:8:07 \","},
{"lineNum":"  744","line":"            \"23:59:60.373929310237\","},
{"lineNum":"  745","line":"        ];"},
{"lineNum":"  746","line":"        for &s in &valid {"},
{"lineNum":"  747","line":"            let d = match s.parse::<NaiveTime>() {"},
{"lineNum":"  748","line":"                Ok(d) => d,"},
{"lineNum":"  749","line":"                Err(e) => panic!(\"parsing `{}` has failed: {}\", s, e)"},
{"lineNum":"  750","line":"            };"},
{"lineNum":"  751","line":"            let s_ = format!(\"{:?}\", d);"},
{"lineNum":"  752","line":"            // `s` and `s_` may differ, but `s.parse()` and `s_.parse()` must be same"},
{"lineNum":"  753","line":"            let d_ = match s_.parse::<NaiveTime>() {"},
{"lineNum":"  754","line":"                Ok(d) => d,"},
{"lineNum":"  755","line":"                Err(e) => panic!(\"`{}` is parsed into `{:?}`, but reparsing that has failed: {}\","},
{"lineNum":"  756","line":"                                 s, d, e)"},
{"lineNum":"  757","line":"            };"},
{"lineNum":"  758","line":"            assert!(d == d_, \"`{}` is parsed into `{:?}`, but reparsed result \\"},
{"lineNum":"  759","line":"                              `{:?}` does not match\", s, d, d_);"},
{"lineNum":"  760","line":"        }"},
{"lineNum":"  761","line":""},
{"lineNum":"  762","line":"        // some invalid cases"},
{"lineNum":"  763","line":"        // since `ParseErrorKind` is private, all we can do is to check if there was an error"},
{"lineNum":"  764","line":"        assert!(\"\".parse::<NaiveTime>().is_err());"},
{"lineNum":"  765","line":"        assert!(\"x\".parse::<NaiveTime>().is_err());"},
{"lineNum":"  766","line":"        assert!(\"15\".parse::<NaiveTime>().is_err());"},
{"lineNum":"  767","line":"        assert!(\"15:8\".parse::<NaiveTime>().is_err());"},
{"lineNum":"  768","line":"        assert!(\"15:8:x\".parse::<NaiveTime>().is_err());"},
{"lineNum":"  769","line":"        assert!(\"15:8:9x\".parse::<NaiveTime>().is_err());"},
{"lineNum":"  770","line":"        assert!(\"23:59:61\".parse::<NaiveTime>().is_err());"},
{"lineNum":"  771","line":"        assert!(\"12:34:56.x\".parse::<NaiveTime>().is_err());"},
{"lineNum":"  772","line":"        assert!(\"12:34:56. 0\".parse::<NaiveTime>().is_err());"},
{"lineNum":"  773","line":"    }"},
{"lineNum":"  774","line":""},
{"lineNum":"  775","line":"    #[test]"},
{"lineNum":"  776","line":"    fn test_time_parse_from_str() {"},
{"lineNum":"  777","line":"        let hms = |h,m,s| NaiveTime::from_hms(h,m,s);"},
{"lineNum":"  778","line":"        assert_eq!(NaiveTime::parse_from_str(\"2014-5-7T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),"},
{"lineNum":"  779","line":"                   Ok(hms(12, 34, 56))); // ignore date and offset"},
{"lineNum":"  780","line":"        assert_eq!(NaiveTime::parse_from_str(\"PM 12:59\", \"%P %H:%M\"),"},
{"lineNum":"  781","line":"                   Ok(hms(12, 59, 0)));"},
{"lineNum":"  782","line":"        assert!(NaiveTime::parse_from_str(\"12:3456\", \"%H:%M:%S\").is_err());"},
{"lineNum":"  783","line":"    }"},
{"lineNum":"  784","line":""},
{"lineNum":"  785","line":"    #[test]"},
{"lineNum":"  786","line":"    fn test_time_format() {"},
{"lineNum":"  787","line":"        let t = NaiveTime::from_hms_nano(3, 5, 7, 98765432);"},
{"lineNum":"  788","line":"        assert_eq!(t.format(\"%H,%k,%I,%l,%P,%p\").to_string(), \"03, 3,03, 3,am,AM\");"},
{"lineNum":"  789","line":"        assert_eq!(t.format(\"%M\").to_string(), \"05\");"},
{"lineNum":"  790","line":"        assert_eq!(t.format(\"%S,%f\").to_string(), \"07,098765432\");"},
{"lineNum":"  791","line":"        assert_eq!(t.format(\"%R\").to_string(), \"03:05\");"},
{"lineNum":"  792","line":"        assert_eq!(t.format(\"%T,%X\").to_string(), \"03:05:07,03:05:07\");"},
{"lineNum":"  793","line":"        assert_eq!(t.format(\"%r\").to_string(), \"03:05:07 AM\");"},
{"lineNum":"  794","line":"        assert_eq!(t.format(\"%t%n%%%n%t\").to_string(), \"\\t\\n%\\n\\t\");"},
{"lineNum":"  795","line":""},
{"lineNum":"  796","line":"        // corner cases"},
{"lineNum":"  797","line":"        assert_eq!(NaiveTime::from_hms(13, 57, 9).format(\"%r\").to_string(), \"01:57:09 PM\");"},
{"lineNum":"  798","line":"        assert_eq!(NaiveTime::from_hms_milli(23, 59, 59, 1_000).format(\"%X\").to_string(),"},
{"lineNum":"  799","line":"                   \"23:59:60\");"},
{"lineNum":"  800","line":"    }"},
{"lineNum":"  801","line":""},
{"lineNum":"  802","line":"    #[cfg(feature = \"serde\")]"},
{"lineNum":"  803","line":"    extern crate serde_json;"},
{"lineNum":"  804","line":""},
{"lineNum":"  805","line":"    #[cfg(feature = \"serde\")]"},
{"lineNum":"  806","line":"    #[test]"},
{"lineNum":"  807","line":"    fn test_serde_serialize() {"},
{"lineNum":"  808","line":"        use self::serde_json::to_string;"},
{"lineNum":"  809","line":""},
{"lineNum":"  810","line":"        let time = NaiveTime::from_hms_nano(3, 5, 7, 98765432);"},
{"lineNum":"  811","line":"        let serialized = to_string(&time).unwrap();"},
{"lineNum":"  812","line":""},
{"lineNum":"  813","line":"        assert_eq!(serialized, \"\\\"03:05:07.098765432\\\"\");"},
{"lineNum":"  814","line":"    }"},
{"lineNum":"  815","line":""},
{"lineNum":"  816","line":"    #[cfg(feature = \"serde\")]"},
{"lineNum":"  817","line":"    #[test]"},
{"lineNum":"  818","line":"    fn test_serde_deserialize() {"},
{"lineNum":"  819","line":"        use self::serde_json::from_str;"},
{"lineNum":"  820","line":""},
{"lineNum":"  821","line":"        let time = NaiveTime::from_hms_nano(3, 5, 7, 98765432);"},
{"lineNum":"  822","line":"        let deserialized: NaiveTime = from_str(\"\\\"03:05:07.098765432\\\"\").unwrap();"},
{"lineNum":"  823","line":""},
{"lineNum":"  824","line":"        assert_eq!(deserialized, time);"},
{"lineNum":"  825","line":"    }"},
{"lineNum":"  826","line":"}"},
{"lineNum":"  827","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test_server-9ef2987148640087", "date" : "2016-02-16 22:29:22", "instrumented" : 6, "covered" : 3,};
var merged_data = [];
