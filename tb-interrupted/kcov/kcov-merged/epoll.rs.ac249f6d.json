var data = {lines:[
{"lineNum":"    1","line":"use {io, EventSet, PollOpt, Token};"},
{"lineNum":"    2","line":"use event::IoEvent;"},
{"lineNum":"    3","line":"use nix::sys::epoll::*;"},
{"lineNum":"    4","line":"use nix::unistd::close;"},
{"lineNum":"    5","line":"use std::os::unix::io::RawFd;"},
{"lineNum":"    6","line":"use std::sync::atomic::{AtomicUsize, Ordering, ATOMIC_USIZE_INIT};"},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"/// Each Selector has a globally unique(ish) ID associated with it. This ID"},
{"lineNum":"    9","line":"/// gets tracked by `TcpStream`, `TcpListener`, etc... when they are first"},
{"lineNum":"   10","line":"/// registered with the `Selector`. If a type that is previously associatd with"},
{"lineNum":"   11","line":"/// a `Selector` attempts to register itself with a different `Selector`, the"},
{"lineNum":"   12","line":"/// operation will return with an error. This matches windows behavior."},
{"lineNum":"   13","line":"static NEXT_ID: AtomicUsize = ATOMIC_USIZE_INIT;"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"#[derive(Debug)]"},
{"lineNum":"   16","line":"pub struct Selector {"},
{"lineNum":"   17","line":"    id: usize,"},
{"lineNum":"   18","line":"    epfd: RawFd"},
{"lineNum":"   19","line":"}"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"impl Selector {"},
{"lineNum":"   22","line":"    pub fn new() -> io::Result<Selector> {","class":"lineCov","hits":"1","order":"1328",},
{"lineNum":"   23","line":"        let id = NEXT_ID.fetch_add(1, Ordering::Relaxed);","class":"lineCov","hits":"1","order":"1330",},
{"lineNum":"   24","line":"        let epfd = try!(epoll_create().map_err(super::from_nix_error));","class":"lineCov","hits":"1","order":"1331",},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"        Ok(Selector {"},
{"lineNum":"   27","line":"            id: id,","class":"lineCov","hits":"1","order":"1332",},
{"lineNum":"   28","line":"            epfd: epfd,","class":"lineCov","hits":"1","order":"1334",},
{"lineNum":"   29","line":"        })"},
{"lineNum":"   30","line":"    }","class":"lineCov","hits":"1","order":"1335",},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"    pub fn id(&self) -> usize {","class":"lineCov","hits":"1","order":"1338",},
{"lineNum":"   33","line":"        self.id","class":"lineCov","hits":"1","order":"1340",},
{"lineNum":"   34","line":"    }","class":"lineCov","hits":"1","order":"1341",},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"    /// Wait for events from the OS"},
{"lineNum":"   37","line":"    pub fn select(&mut self, evts: &mut Events, timeout_ms: Option<usize>) -> io::Result<()> {","class":"lineCov","hits":"1","order":"1342",},
{"lineNum":"   38","line":"        use std::{cmp, i32, slice};"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"        let timeout_ms = match timeout_ms {"},
{"lineNum":"   41","line":"            None => -1 as i32,","class":"lineCov","hits":"1","order":"1344",},
{"lineNum":"   42","line":"            Some(x) => cmp::min(i32::MAX as usize, x) as i32,","class":"lineNoCov","hits":"0",},
{"lineNum":"   43","line":"        };"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"        let dst = unsafe {"},
{"lineNum":"   46","line":"            slice::from_raw_parts_mut(","class":"lineCov","hits":"1","order":"1347",},
{"lineNum":"   47","line":"                evts.events.as_mut_ptr(),","class":"lineCov","hits":"1","order":"1348",},
{"lineNum":"   48","line":"                evts.events.capacity())","class":"lineCov","hits":"1","order":"1350",},
{"lineNum":"   49","line":"        };"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"        // Wait for epoll events for at most timeout_ms milliseconds"},
{"lineNum":"   52","line":"        let cnt = try!(epoll_wait(self.epfd, dst, timeout_ms as isize)","class":"lineCov","hits":"1","order":"1353",},
{"lineNum":"   53","line":"                           .map_err(super::from_nix_error));"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"        unsafe { evts.events.set_len(cnt); }","class":"lineCov","hits":"1","order":"1357",},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"        Ok(())"},
{"lineNum":"   58","line":"    }","class":"lineCov","hits":"1","order":"1360",},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"    /// Register event interests for the given IO handle with the OS"},
{"lineNum":"   61","line":"    pub fn register(&mut self, fd: RawFd, token: Token, interests: EventSet, opts: PollOpt) -> io::Result<()> {","class":"lineCov","hits":"1","order":"1362",},
{"lineNum":"   62","line":"        let info = EpollEvent {"},
{"lineNum":"   63","line":"            events: ioevent_to_epoll(interests, opts),","class":"lineCov","hits":"1","order":"1363",},
{"lineNum":"   64","line":"            data: token.as_usize() as u64","class":"lineCov","hits":"1","order":"1364",},
{"lineNum":"   65","line":"        };"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"        epoll_ctl(self.epfd, EpollOp::EpollCtlAdd, fd, &info)","class":"lineCov","hits":"1","order":"1366",},
{"lineNum":"   68","line":"            .map_err(super::from_nix_error)"},
{"lineNum":"   69","line":"    }","class":"lineCov","hits":"1","order":"1367",},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"    /// Register event interests for the given IO handle with the OS"},
{"lineNum":"   72","line":"    pub fn reregister(&mut self, fd: RawFd, token: Token, interests: EventSet, opts: PollOpt) -> io::Result<()> {","class":"lineCov","hits":"1","order":"1369",},
{"lineNum":"   73","line":"        let info = EpollEvent {"},
{"lineNum":"   74","line":"            events: ioevent_to_epoll(interests, opts),","class":"lineCov","hits":"1","order":"1370",},
{"lineNum":"   75","line":"            data: token.as_usize() as u64","class":"lineCov","hits":"1","order":"1372",},
{"lineNum":"   76","line":"        };"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"        epoll_ctl(self.epfd, EpollOp::EpollCtlMod, fd, &info)","class":"lineCov","hits":"1","order":"1375",},
{"lineNum":"   79","line":"            .map_err(super::from_nix_error)"},
{"lineNum":"   80","line":"    }","class":"lineCov","hits":"1","order":"1376",},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"    /// Deregister event interests for the given IO handle with the OS"},
{"lineNum":"   83","line":"    pub fn deregister(&mut self, fd: RawFd) -> io::Result<()> {"},
{"lineNum":"   84","line":"        // The &info argument should be ignored by the system,"},
{"lineNum":"   85","line":"        // but linux < 2.6.9 required it to be not null."},
{"lineNum":"   86","line":"        // For compatibility, we provide a dummy EpollEvent."},
{"lineNum":"   87","line":"        let info = EpollEvent {"},
{"lineNum":"   88","line":"            events: EpollEventKind::empty(),"},
{"lineNum":"   89","line":"            data: 0"},
{"lineNum":"   90","line":"        };"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"        epoll_ctl(self.epfd, EpollOp::EpollCtlDel, fd, &info)"},
{"lineNum":"   93","line":"            .map_err(super::from_nix_error)"},
{"lineNum":"   94","line":"    }"},
{"lineNum":"   95","line":"}"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"fn ioevent_to_epoll(interest: EventSet, opts: PollOpt) -> EpollEventKind {","class":"lineCov","hits":"1","order":"1317",},
{"lineNum":"   98","line":"    let mut kind = EpollEventKind::empty();","class":"lineCov","hits":"1","order":"1318",},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"    if interest.is_readable() {","class":"lineCov","hits":"1","order":"1319",},
{"lineNum":"  101","line":"        kind.insert(EPOLLIN);","class":"lineCov","hits":"1","order":"1320",},
{"lineNum":"  102","line":"    }"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"    if interest.is_writable() {","class":"lineCov","hits":"1","order":"1321",},
{"lineNum":"  105","line":"        kind.insert(EPOLLOUT);","class":"lineCov","hits":"1","order":"1322",},
{"lineNum":"  106","line":"    }"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"    if interest.is_hup() {","class":"lineCov","hits":"1","order":"1323",},
{"lineNum":"  109","line":"        kind.insert(EPOLLRDHUP);","class":"lineNoCov","hits":"0",},
{"lineNum":"  110","line":"    }"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"    if opts.is_edge() {","class":"lineCov","hits":"1","order":"1324",},
{"lineNum":"  113","line":"        kind.insert(EPOLLET);","class":"lineCov","hits":"1","order":"1325",},
{"lineNum":"  114","line":"    }"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"    if opts.is_oneshot() {","class":"lineCov","hits":"1","order":"1326",},
{"lineNum":"  117","line":"        kind.insert(EPOLLONESHOT);","class":"lineCov","hits":"1","order":"1327",},
{"lineNum":"  118","line":"    }"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"    if opts.is_level() {","class":"lineCov","hits":"1","order":"1329",},
{"lineNum":"  121","line":"        kind.remove(EPOLLET);","class":"lineNoCov","hits":"0",},
{"lineNum":"  122","line":"    }"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"    kind"},
{"lineNum":"  125","line":"}","class":"lineCov","hits":"1","order":"1333",},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"impl Drop for Selector {"},
{"lineNum":"  128","line":"    fn drop(&mut self) {","class":"lineCov","hits":"1","order":"1336",},
{"lineNum":"  129","line":"        let _ = close(self.epfd);","class":"lineCov","hits":"1","order":"1337",},
{"lineNum":"  130","line":"    }","class":"lineCov","hits":"1","order":"1339",},
{"lineNum":"  131","line":"}"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"pub struct Events {"},
{"lineNum":"  134","line":"    events: Vec<EpollEvent>,"},
{"lineNum":"  135","line":"}"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"impl Events {"},
{"lineNum":"  138","line":"    pub fn new() -> Events {","class":"lineCov","hits":"1","order":"1343",},
{"lineNum":"  139","line":"        Events {"},
{"lineNum":"  140","line":"            events: Vec::with_capacity(1024),","class":"lineCov","hits":"1","order":"1345",},
{"lineNum":"  141","line":"        }"},
{"lineNum":"  142","line":"    }","class":"lineCov","hits":"1","order":"1346",},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"    #[inline]"},
{"lineNum":"  145","line":"    pub fn len(&self) -> usize {","class":"lineCov","hits":"1","order":"1349",},
{"lineNum":"  146","line":"        self.events.len()","class":"lineCov","hits":"1","order":"1351",},
{"lineNum":"  147","line":"    }","class":"lineCov","hits":"1","order":"1352",},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"    #[inline]"},
{"lineNum":"  150","line":"    pub fn get(&self, idx: usize) -> IoEvent {","class":"lineCov","hits":"1","order":"1354",},
{"lineNum":"  151","line":"        let epoll = self.events[idx].events;","class":"lineCov","hits":"1","order":"1355",},
{"lineNum":"  152","line":"        let mut kind = EventSet::none();","class":"lineCov","hits":"1","order":"1356",},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"        if epoll.contains(EPOLLIN) {","class":"lineCov","hits":"1","order":"1358",},
{"lineNum":"  155","line":"            kind = kind | EventSet::readable();","class":"lineCov","hits":"1","order":"1359",},
{"lineNum":"  156","line":"        }"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"        if epoll.contains(EPOLLOUT) {","class":"lineCov","hits":"1","order":"1361",},
{"lineNum":"  159","line":"            kind = kind | EventSet::writable();","class":"lineNoCov","hits":"0",},
{"lineNum":"  160","line":"        }"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"        // EPOLLHUP - Usually means a socket error happened"},
{"lineNum":"  163","line":"        if epoll.contains(EPOLLERR) {","class":"lineCov","hits":"1","order":"1365",},
{"lineNum":"  164","line":"            kind = kind | EventSet::error();","class":"lineNoCov","hits":"0",},
{"lineNum":"  165","line":"        }"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"        if epoll.contains(EPOLLRDHUP) | epoll.contains(EPOLLHUP) {","class":"lineCov","hits":"1","order":"1368",},
{"lineNum":"  168","line":"            kind = kind | EventSet::hup();","class":"lineNoCov","hits":"0",},
{"lineNum":"  169","line":"        }"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"        let token = self.events[idx].data;","class":"lineCov","hits":"1","order":"1371",},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"        IoEvent::new(kind, Token(token as usize))","class":"lineCov","hits":"1","order":"1373",},
{"lineNum":"  174","line":"    }","class":"lineCov","hits":"1","order":"1374",},
{"lineNum":"  175","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test_server-9ef2987148640087", "date" : "2016-02-17 13:22:50", "instrumented" : 66, "covered" : 60,};
var merged_data = [];
