var data = {lines:[
{"lineNum":"    1","line":"#![allow(bad_style)]"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"pub use self::inner::*;"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"#[cfg(unix)]"},
{"lineNum":"    6","line":"mod inner {"},
{"lineNum":"    7","line":"    use libc::{self, time_t};"},
{"lineNum":"    8","line":"    use std::mem;"},
{"lineNum":"    9","line":"    use std::io;"},
{"lineNum":"   10","line":"    use Tm;"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"    #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]"},
{"lineNum":"   13","line":"    pub use self::mac::*;"},
{"lineNum":"   14","line":"    #[cfg(all(not(target_os = \"macos\"), not(target_os = \"ios\")))]"},
{"lineNum":"   15","line":"    pub use self::unix::*;"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"    fn rust_tm_to_tm(rust_tm: &Tm, tm: &mut libc::tm) {"},
{"lineNum":"   18","line":"        tm.tm_sec = rust_tm.tm_sec;"},
{"lineNum":"   19","line":"        tm.tm_min = rust_tm.tm_min;"},
{"lineNum":"   20","line":"        tm.tm_hour = rust_tm.tm_hour;"},
{"lineNum":"   21","line":"        tm.tm_mday = rust_tm.tm_mday;"},
{"lineNum":"   22","line":"        tm.tm_mon = rust_tm.tm_mon;"},
{"lineNum":"   23","line":"        tm.tm_year = rust_tm.tm_year;"},
{"lineNum":"   24","line":"        tm.tm_wday = rust_tm.tm_wday;"},
{"lineNum":"   25","line":"        tm.tm_yday = rust_tm.tm_yday;"},
{"lineNum":"   26","line":"        tm.tm_isdst = rust_tm.tm_isdst;"},
{"lineNum":"   27","line":"    }"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"    fn tm_to_rust_tm(tm: &libc::tm, utcoff: i32, rust_tm: &mut Tm) {"},
{"lineNum":"   30","line":"        rust_tm.tm_sec = tm.tm_sec;"},
{"lineNum":"   31","line":"        rust_tm.tm_min = tm.tm_min;"},
{"lineNum":"   32","line":"        rust_tm.tm_hour = tm.tm_hour;"},
{"lineNum":"   33","line":"        rust_tm.tm_mday = tm.tm_mday;"},
{"lineNum":"   34","line":"        rust_tm.tm_mon = tm.tm_mon;"},
{"lineNum":"   35","line":"        rust_tm.tm_year = tm.tm_year;"},
{"lineNum":"   36","line":"        rust_tm.tm_wday = tm.tm_wday;"},
{"lineNum":"   37","line":"        rust_tm.tm_yday = tm.tm_yday;"},
{"lineNum":"   38","line":"        rust_tm.tm_isdst = tm.tm_isdst;"},
{"lineNum":"   39","line":"        rust_tm.tm_utcoff = utcoff;"},
{"lineNum":"   40","line":"    }"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"    type time64_t = i64;"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"    #[cfg(target_os = \"nacl\")]"},
{"lineNum":"   45","line":"    unsafe fn timegm(tm: *const libc::tm) -> time_t {"},
{"lineNum":"   46","line":"        use std::env::{set_var, var_os, remove_var};"},
{"lineNum":"   47","line":"        extern {"},
{"lineNum":"   48","line":"            fn tzset();"},
{"lineNum":"   49","line":"        }"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"        let ret;"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"        let current_tz = var_os(\"TZ\");"},
{"lineNum":"   54","line":"        set_var(\"TZ\", \"UTC\");"},
{"lineNum":"   55","line":"        tzset();"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"        ret = libc::mktime(tm);"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"        if let Some(tz) = current_tz {"},
{"lineNum":"   60","line":"            set_var(\"TZ\", tz);"},
{"lineNum":"   61","line":"        } else {"},
{"lineNum":"   62","line":"            remove_var(\"TZ\");"},
{"lineNum":"   63","line":"        }"},
{"lineNum":"   64","line":"        tzset();"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"        ret"},
{"lineNum":"   67","line":"    }"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"    pub fn time_to_utc_tm(sec: i64, tm: &mut Tm) {"},
{"lineNum":"   70","line":"        unsafe {"},
{"lineNum":"   71","line":"            let sec = sec as time_t;"},
{"lineNum":"   72","line":"            let mut out = mem::zeroed();"},
{"lineNum":"   73","line":"            if libc::gmtime_r(&sec, &mut out).is_null() {"},
{"lineNum":"   74","line":"                panic!(\"gmtime_r failed: {}\", io::Error::last_os_error());"},
{"lineNum":"   75","line":"            }"},
{"lineNum":"   76","line":"            tm_to_rust_tm(&out, 0, tm);"},
{"lineNum":"   77","line":"        }"},
{"lineNum":"   78","line":"    }"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"    pub fn time_to_local_tm(sec: i64, tm: &mut Tm) {"},
{"lineNum":"   81","line":"        unsafe {"},
{"lineNum":"   82","line":"            let sec = sec as time_t;"},
{"lineNum":"   83","line":"            let mut out = mem::zeroed();"},
{"lineNum":"   84","line":"            if libc::localtime_r(&sec, &mut out).is_null() {"},
{"lineNum":"   85","line":"                panic!(\"localtime_r failed: {}\", io::Error::last_os_error());"},
{"lineNum":"   86","line":"            }"},
{"lineNum":"   87","line":"            tm_to_rust_tm(&out, out.tm_gmtoff as i32, tm);"},
{"lineNum":"   88","line":"        }"},
{"lineNum":"   89","line":"    }"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"    pub fn utc_tm_to_time(rust_tm: &Tm) -> i64 {"},
{"lineNum":"   92","line":"        #[cfg(all(target_os = \"android\", not(target_arch = \"aarch64\")))]"},
{"lineNum":"   93","line":"        use libc::timegm64 as timegm;"},
{"lineNum":"   94","line":"        #[cfg(not(all(target_os = \"android\", not(target_arch = \"aarch64\"))))]"},
{"lineNum":"   95","line":"        use libc::timegm;"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"        let mut tm = unsafe { mem::zeroed() };"},
{"lineNum":"   98","line":"        rust_tm_to_tm(rust_tm, &mut tm);"},
{"lineNum":"   99","line":"        unsafe { timegm(&mut tm) as i64 }"},
{"lineNum":"  100","line":"    }"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"    pub fn local_tm_to_time(rust_tm: &Tm) -> i64 {"},
{"lineNum":"  103","line":"        let mut tm = unsafe { mem::zeroed() };"},
{"lineNum":"  104","line":"        rust_tm_to_tm(rust_tm, &mut tm);"},
{"lineNum":"  105","line":"        unsafe { libc::mktime(&mut tm) as i64 }"},
{"lineNum":"  106","line":"    }"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"    #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]"},
{"lineNum":"  109","line":"    mod mac {"},
{"lineNum":"  110","line":"        use libc::{self, timeval, mach_timebase_info};"},
{"lineNum":"  111","line":"        use std::sync::{Once, ONCE_INIT};"},
{"lineNum":"  112","line":"        use std::ops::{Add, Sub};"},
{"lineNum":"  113","line":"        use Duration;"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"        fn info() -> &\'static mach_timebase_info {"},
{"lineNum":"  116","line":"            static mut INFO: mach_timebase_info = mach_timebase_info {"},
{"lineNum":"  117","line":"                numer: 0,"},
{"lineNum":"  118","line":"                denom: 0,"},
{"lineNum":"  119","line":"            };"},
{"lineNum":"  120","line":"            static ONCE: Once = ONCE_INIT;"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"            unsafe {"},
{"lineNum":"  123","line":"                ONCE.call_once(|| {"},
{"lineNum":"  124","line":"                    mach_timebase_info(&mut INFO);"},
{"lineNum":"  125","line":"                });"},
{"lineNum":"  126","line":"                &INFO"},
{"lineNum":"  127","line":"            }"},
{"lineNum":"  128","line":"        }"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"        pub fn get_time() -> (i64, i32) {"},
{"lineNum":"  131","line":"            use std::ptr;"},
{"lineNum":"  132","line":"            let mut tv = timeval { tv_sec: 0, tv_usec: 0 };"},
{"lineNum":"  133","line":"            unsafe { libc::gettimeofday(&mut tv, ptr::null_mut()); }"},
{"lineNum":"  134","line":"            (tv.tv_sec as i64, tv.tv_usec * 1000)"},
{"lineNum":"  135","line":"        }"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"        pub fn get_precise_ns() -> u64 {"},
{"lineNum":"  138","line":"            unsafe {"},
{"lineNum":"  139","line":"                let time = libc::mach_absolute_time();"},
{"lineNum":"  140","line":"                let info = info();"},
{"lineNum":"  141","line":"                time * info.numer as u64 / info.denom as u64"},
{"lineNum":"  142","line":"            }"},
{"lineNum":"  143","line":"        }"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"        #[derive(Clone, Copy, PartialOrd, Ord, PartialEq, Eq, Debug)]"},
{"lineNum":"  146","line":"        pub struct SteadyTime { t: u64 }"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"        impl SteadyTime {"},
{"lineNum":"  149","line":"            pub fn now() -> SteadyTime {"},
{"lineNum":"  150","line":"                SteadyTime { t: get_precise_ns() }"},
{"lineNum":"  151","line":"            }"},
{"lineNum":"  152","line":"        }"},
{"lineNum":"  153","line":"        impl Sub for SteadyTime {"},
{"lineNum":"  154","line":"            type Output = Duration;"},
{"lineNum":"  155","line":"            fn sub(self, other: SteadyTime) -> Duration {"},
{"lineNum":"  156","line":"                Duration::nanoseconds(self.t as i64 - other.t as i64)"},
{"lineNum":"  157","line":"            }"},
{"lineNum":"  158","line":"        }"},
{"lineNum":"  159","line":"        impl Sub<Duration> for SteadyTime {"},
{"lineNum":"  160","line":"            type Output = SteadyTime;"},
{"lineNum":"  161","line":"            fn sub(self, other: Duration) -> SteadyTime {"},
{"lineNum":"  162","line":"                self + -other"},
{"lineNum":"  163","line":"            }"},
{"lineNum":"  164","line":"        }"},
{"lineNum":"  165","line":"        impl Add<Duration> for SteadyTime {"},
{"lineNum":"  166","line":"            type Output = SteadyTime;"},
{"lineNum":"  167","line":"            fn add(self, other: Duration) -> SteadyTime {"},
{"lineNum":"  168","line":"                let delta = other.num_nanoseconds().unwrap();"},
{"lineNum":"  169","line":"                SteadyTime {"},
{"lineNum":"  170","line":"                    t: (self.t as i64 + delta) as u64"},
{"lineNum":"  171","line":"                }"},
{"lineNum":"  172","line":"            }"},
{"lineNum":"  173","line":"        }"},
{"lineNum":"  174","line":"    }"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"    #[cfg(test)]"},
{"lineNum":"  177","line":"    pub struct TzReset;"},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"    #[cfg(test)]"},
{"lineNum":"  180","line":"    pub fn set_los_angeles_time_zone() -> TzReset {"},
{"lineNum":"  181","line":"        use std::env;"},
{"lineNum":"  182","line":"        env::set_var(\"TZ\", \"America/Los_Angeles\");"},
{"lineNum":"  183","line":"        ::tzset();"},
{"lineNum":"  184","line":"        TzReset"},
{"lineNum":"  185","line":"    }"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"    #[cfg(test)]"},
{"lineNum":"  188","line":"    pub fn set_london_with_dst_time_zone() -> TzReset {"},
{"lineNum":"  189","line":"        use std::env;"},
{"lineNum":"  190","line":"        env::set_var(\"TZ\", \"Europe/London\");"},
{"lineNum":"  191","line":"        ::tzset();"},
{"lineNum":"  192","line":"        TzReset"},
{"lineNum":"  193","line":"    }"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"    #[cfg(all(not(target_os = \"macos\"), not(target_os = \"ios\")))]"},
{"lineNum":"  196","line":"    mod unix {"},
{"lineNum":"  197","line":"        use std::fmt;"},
{"lineNum":"  198","line":"        use std::cmp::Ordering;"},
{"lineNum":"  199","line":"        use std::ops::{Add, Sub};"},
{"lineNum":"  200","line":"        use libc::{self, timespec};"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"        use Duration;"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"        pub fn get_time() -> (i64, i32) {"},
{"lineNum":"  205","line":"            let mut tv = libc::timespec { tv_sec: 0, tv_nsec: 0 };"},
{"lineNum":"  206","line":"            unsafe { libc::clock_gettime(libc::CLOCK_REALTIME, &mut tv); }"},
{"lineNum":"  207","line":"            (tv.tv_sec as i64, tv.tv_nsec as i32)"},
{"lineNum":"  208","line":"        }"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"        pub fn get_precise_ns() -> u64 {","class":"lineCov","hits":"1","order":"1313",},
{"lineNum":"  211","line":"            let mut ts = libc::timespec { tv_sec: 0, tv_nsec: 0 };"},
{"lineNum":"  212","line":"            unsafe {"},
{"lineNum":"  213","line":"                libc::clock_gettime(libc::CLOCK_MONOTONIC, &mut ts);","class":"lineCov","hits":"1","order":"1314",},
{"lineNum":"  214","line":"            }"},
{"lineNum":"  215","line":"            (ts.tv_sec as u64) * 1000000000 + (ts.tv_nsec as u64)","class":"lineCov","hits":"1","order":"1315",},
{"lineNum":"  216","line":"        }","class":"lineCov","hits":"1","order":"1316",},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"        #[derive(Copy)]"},
{"lineNum":"  219","line":"        pub struct SteadyTime {"},
{"lineNum":"  220","line":"            t: libc::timespec,"},
{"lineNum":"  221","line":"        }"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"        impl fmt::Debug for SteadyTime {"},
{"lineNum":"  224","line":"            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {"},
{"lineNum":"  225","line":"                write!(fmt, \"SteadyTime {{ tv_sec: {:?}, tv_nsec: {:?} }}\","},
{"lineNum":"  226","line":"                       self.t.tv_sec, self.t.tv_nsec)"},
{"lineNum":"  227","line":"            }"},
{"lineNum":"  228","line":"        }"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"        impl Clone for SteadyTime {"},
{"lineNum":"  231","line":"            fn clone(&self) -> SteadyTime {"},
{"lineNum":"  232","line":"                SteadyTime { t: self.t }"},
{"lineNum":"  233","line":"            }"},
{"lineNum":"  234","line":"        }"},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"        impl SteadyTime {"},
{"lineNum":"  237","line":"            pub fn now() -> SteadyTime {"},
{"lineNum":"  238","line":"                let mut t = SteadyTime {"},
{"lineNum":"  239","line":"                    t: libc::timespec {"},
{"lineNum":"  240","line":"                        tv_sec: 0,"},
{"lineNum":"  241","line":"                        tv_nsec: 0,"},
{"lineNum":"  242","line":"                    }"},
{"lineNum":"  243","line":"                };"},
{"lineNum":"  244","line":"                unsafe {"},
{"lineNum":"  245","line":"                    assert_eq!(0, libc::clock_gettime(libc::CLOCK_MONOTONIC,"},
{"lineNum":"  246","line":"                                                      &mut t.t));"},
{"lineNum":"  247","line":"                }"},
{"lineNum":"  248","line":"                t"},
{"lineNum":"  249","line":"            }"},
{"lineNum":"  250","line":"        }"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"        impl Sub for SteadyTime {"},
{"lineNum":"  253","line":"            type Output = Duration;"},
{"lineNum":"  254","line":"            fn sub(self, other: SteadyTime) -> Duration {"},
{"lineNum":"  255","line":"                if self.t.tv_nsec >= other.t.tv_nsec {"},
{"lineNum":"  256","line":"                    Duration::seconds(self.t.tv_sec as i64 - other.t.tv_sec as i64) +"},
{"lineNum":"  257","line":"                        Duration::nanoseconds(self.t.tv_nsec as i64 - other.t.tv_nsec as i64)"},
{"lineNum":"  258","line":"                } else {"},
{"lineNum":"  259","line":"                    Duration::seconds(self.t.tv_sec as i64 - 1 - other.t.tv_sec as i64) +"},
{"lineNum":"  260","line":"                        Duration::nanoseconds(self.t.tv_nsec as i64 + ::NSEC_PER_SEC as i64 -"},
{"lineNum":"  261","line":"                                              other.t.tv_nsec as i64)"},
{"lineNum":"  262","line":"                }"},
{"lineNum":"  263","line":"            }"},
{"lineNum":"  264","line":"        }"},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"        impl Sub<Duration> for SteadyTime {"},
{"lineNum":"  267","line":"            type Output = SteadyTime;"},
{"lineNum":"  268","line":"            fn sub(self, other: Duration) -> SteadyTime {"},
{"lineNum":"  269","line":"                self + -other"},
{"lineNum":"  270","line":"            }"},
{"lineNum":"  271","line":"        }"},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"        impl Add<Duration> for SteadyTime {"},
{"lineNum":"  274","line":"            type Output = SteadyTime;"},
{"lineNum":"  275","line":"            fn add(mut self, other: Duration) -> SteadyTime {"},
{"lineNum":"  276","line":"                let seconds = other.num_seconds();"},
{"lineNum":"  277","line":"                let nanoseconds = other - Duration::seconds(seconds);"},
{"lineNum":"  278","line":"                let nanoseconds = nanoseconds.num_nanoseconds().unwrap();"},
{"lineNum":"  279","line":"                self.t.tv_sec += seconds as libc::time_t;"},
{"lineNum":"  280","line":"                self.t.tv_nsec += nanoseconds as libc::c_long;"},
{"lineNum":"  281","line":"                if self.t.tv_nsec >= ::NSEC_PER_SEC as libc::c_long {"},
{"lineNum":"  282","line":"                    self.t.tv_nsec -= ::NSEC_PER_SEC as libc::c_long;"},
{"lineNum":"  283","line":"                    self.t.tv_sec += 1;"},
{"lineNum":"  284","line":"                } else if self.t.tv_nsec < 0 {"},
{"lineNum":"  285","line":"                    self.t.tv_sec -= 1;"},
{"lineNum":"  286","line":"                    self.t.tv_nsec += ::NSEC_PER_SEC as libc::c_long;"},
{"lineNum":"  287","line":"                }"},
{"lineNum":"  288","line":"                self"},
{"lineNum":"  289","line":"            }"},
{"lineNum":"  290","line":"        }"},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"        impl PartialOrd for SteadyTime {"},
{"lineNum":"  293","line":"            fn partial_cmp(&self, other: &SteadyTime) -> Option<Ordering> {"},
{"lineNum":"  294","line":"                Some(self.cmp(other))"},
{"lineNum":"  295","line":"            }"},
{"lineNum":"  296","line":"        }"},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"        impl Ord for SteadyTime {"},
{"lineNum":"  299","line":"            fn cmp(&self, other: &SteadyTime) -> Ordering {"},
{"lineNum":"  300","line":"                match self.t.tv_sec.cmp(&other.t.tv_sec) {"},
{"lineNum":"  301","line":"                    Ordering::Equal => self.t.tv_nsec.cmp(&other.t.tv_nsec),"},
{"lineNum":"  302","line":"                    ord => ord"},
{"lineNum":"  303","line":"                }"},
{"lineNum":"  304","line":"            }"},
{"lineNum":"  305","line":"        }"},
{"lineNum":"  306","line":""},
{"lineNum":"  307","line":"        impl PartialEq for SteadyTime {"},
{"lineNum":"  308","line":"            fn eq(&self, other: &SteadyTime) -> bool {"},
{"lineNum":"  309","line":"                self.t.tv_sec == other.t.tv_sec &&"},
{"lineNum":"  310","line":"                    self.t.tv_nsec == other.t.tv_nsec"},
{"lineNum":"  311","line":"            }"},
{"lineNum":"  312","line":"        }"},
{"lineNum":"  313","line":""},
{"lineNum":"  314","line":"        impl Eq for SteadyTime {}"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"    }"},
{"lineNum":"  317","line":"}"},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"#[cfg(windows)]"},
{"lineNum":"  320","line":"#[allow(non_snake_case)]"},
{"lineNum":"  321","line":"mod inner {"},
{"lineNum":"  322","line":"    use std::io;"},
{"lineNum":"  323","line":"    use std::mem;"},
{"lineNum":"  324","line":"    use std::sync::{Once, ONCE_INIT};"},
{"lineNum":"  325","line":"    use std::ops::{Add, Sub};"},
{"lineNum":"  326","line":"    use {Tm, Duration};"},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"    use kernel32::*;"},
{"lineNum":"  329","line":"    use winapi::*;"},
{"lineNum":"  330","line":""},
{"lineNum":"  331","line":"    fn frequency() -> LARGE_INTEGER {"},
{"lineNum":"  332","line":"        static mut FREQUENCY: LARGE_INTEGER = 0;"},
{"lineNum":"  333","line":"        static ONCE: Once = ONCE_INIT;"},
{"lineNum":"  334","line":""},
{"lineNum":"  335","line":"        unsafe {"},
{"lineNum":"  336","line":"            ONCE.call_once(|| {"},
{"lineNum":"  337","line":"                QueryPerformanceFrequency(&mut FREQUENCY);"},
{"lineNum":"  338","line":"            });"},
{"lineNum":"  339","line":"            FREQUENCY"},
{"lineNum":"  340","line":"        }"},
{"lineNum":"  341","line":"    }"},
{"lineNum":"  342","line":""},
{"lineNum":"  343","line":"    const HECTONANOSECS_IN_SEC: i64 = 10_000_000;"},
{"lineNum":"  344","line":"    const HECTONANOSEC_TO_UNIX_EPOCH: i64 = 11_644_473_600 * HECTONANOSECS_IN_SEC;"},
{"lineNum":"  345","line":""},
{"lineNum":"  346","line":"    fn time_to_file_time(sec: i64) -> FILETIME {"},
{"lineNum":"  347","line":"        let t = (((sec * HECTONANOSECS_IN_SEC) + HECTONANOSEC_TO_UNIX_EPOCH)) as u64;"},
{"lineNum":"  348","line":"        FILETIME {"},
{"lineNum":"  349","line":"            dwLowDateTime: t as DWORD,"},
{"lineNum":"  350","line":"            dwHighDateTime: (t >> 32) as DWORD"},
{"lineNum":"  351","line":"        }"},
{"lineNum":"  352","line":"    }"},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"    fn file_time_as_u64(ft: &FILETIME) -> u64 {"},
{"lineNum":"  355","line":"        ((ft.dwHighDateTime as u64) << 32) | (ft.dwLowDateTime as u64)"},
{"lineNum":"  356","line":"    }"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"    fn file_time_to_nsec(ft: &FILETIME) -> i32 {"},
{"lineNum":"  359","line":"        let t = file_time_as_u64(ft) as i64;"},
{"lineNum":"  360","line":"        ((t % HECTONANOSECS_IN_SEC) * 100) as i32"},
{"lineNum":"  361","line":"    }"},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"    fn file_time_to_unix_seconds(ft: &FILETIME) -> i64 {"},
{"lineNum":"  364","line":"        let t = file_time_as_u64(ft) as i64;"},
{"lineNum":"  365","line":"        ((t - HECTONANOSEC_TO_UNIX_EPOCH) / HECTONANOSECS_IN_SEC) as i64"},
{"lineNum":"  366","line":"    }"},
{"lineNum":"  367","line":""},
{"lineNum":"  368","line":"    fn system_time_to_file_time(sys: &SYSTEMTIME) -> FILETIME {"},
{"lineNum":"  369","line":"        unsafe {"},
{"lineNum":"  370","line":"            let mut ft = mem::zeroed();"},
{"lineNum":"  371","line":"            SystemTimeToFileTime(sys, &mut ft);"},
{"lineNum":"  372","line":"            ft"},
{"lineNum":"  373","line":"        }"},
{"lineNum":"  374","line":"    }"},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"    fn tm_to_system_time(tm: &Tm) -> SYSTEMTIME {"},
{"lineNum":"  377","line":"        let mut sys: SYSTEMTIME = unsafe { mem::zeroed() };"},
{"lineNum":"  378","line":"        sys.wSecond = tm.tm_sec as WORD;"},
{"lineNum":"  379","line":"        sys.wMinute = tm.tm_min as WORD;"},
{"lineNum":"  380","line":"        sys.wHour = tm.tm_hour as WORD;"},
{"lineNum":"  381","line":"        sys.wDay = tm.tm_mday as WORD;"},
{"lineNum":"  382","line":"        sys.wDayOfWeek = tm.tm_wday as WORD;"},
{"lineNum":"  383","line":"        sys.wMonth = (tm.tm_mon + 1) as WORD;"},
{"lineNum":"  384","line":"        sys.wYear = (tm.tm_year + 1900) as WORD;"},
{"lineNum":"  385","line":"        sys"},
{"lineNum":"  386","line":"    }"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"    fn system_time_to_tm(sys: &SYSTEMTIME, tm: &mut Tm) {"},
{"lineNum":"  389","line":"        tm.tm_sec = sys.wSecond as i32;"},
{"lineNum":"  390","line":"        tm.tm_min = sys.wMinute as i32;"},
{"lineNum":"  391","line":"        tm.tm_hour = sys.wHour as i32;"},
{"lineNum":"  392","line":"        tm.tm_mday = sys.wDay as i32;"},
{"lineNum":"  393","line":"        tm.tm_wday = sys.wDayOfWeek as i32;"},
{"lineNum":"  394","line":"        tm.tm_mon = (sys.wMonth - 1) as i32;"},
{"lineNum":"  395","line":"        tm.tm_year = (sys.wYear - 1900) as i32;"},
{"lineNum":"  396","line":"        tm.tm_yday = yday(tm.tm_year, tm.tm_mon + 1, tm.tm_mday);"},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"        fn yday(year: i32, month: i32, day: i32) -> i32 {"},
{"lineNum":"  399","line":"            let leap = if month > 2 {"},
{"lineNum":"  400","line":"                if year % 4 == 0 { 1 } else { 2 }"},
{"lineNum":"  401","line":"            } else {"},
{"lineNum":"  402","line":"                0"},
{"lineNum":"  403","line":"            };"},
{"lineNum":"  404","line":"            let july = if month > 7 { 1 } else { 0 };"},
{"lineNum":"  405","line":""},
{"lineNum":"  406","line":"            (month - 1) * 30 + month / 2 + (day - 1) - leap + july"},
{"lineNum":"  407","line":"        }"},
{"lineNum":"  408","line":"    }"},
{"lineNum":"  409","line":""},
{"lineNum":"  410","line":"    macro_rules! call {"},
{"lineNum":"  411","line":"        ($name:ident($($arg:expr),*)) => {"},
{"lineNum":"  412","line":"            if $name($($arg),*) == 0 {"},
{"lineNum":"  413","line":"                panic!(concat!(stringify!($name), \" failed with: {}\"),"},
{"lineNum":"  414","line":"                       io::Error::last_os_error());"},
{"lineNum":"  415","line":"            }"},
{"lineNum":"  416","line":"        }"},
{"lineNum":"  417","line":"    }"},
{"lineNum":"  418","line":""},
{"lineNum":"  419","line":"    pub fn time_to_utc_tm(sec: i64, tm: &mut Tm) {"},
{"lineNum":"  420","line":"        let mut out = unsafe { mem::zeroed() };"},
{"lineNum":"  421","line":"        let ft = time_to_file_time(sec);"},
{"lineNum":"  422","line":"        unsafe {"},
{"lineNum":"  423","line":"            call!(FileTimeToSystemTime(&ft, &mut out));"},
{"lineNum":"  424","line":"        }"},
{"lineNum":"  425","line":"        system_time_to_tm(&out, tm);"},
{"lineNum":"  426","line":"        tm.tm_utcoff = 0;"},
{"lineNum":"  427","line":"    }"},
{"lineNum":"  428","line":""},
{"lineNum":"  429","line":"    pub fn time_to_local_tm(sec: i64, tm: &mut Tm) {"},
{"lineNum":"  430","line":"        let ft = time_to_file_time(sec);"},
{"lineNum":"  431","line":"        unsafe {"},
{"lineNum":"  432","line":"            let mut utc = mem::zeroed();"},
{"lineNum":"  433","line":"            let mut local = mem::zeroed();"},
{"lineNum":"  434","line":"            call!(FileTimeToSystemTime(&ft, &mut utc));"},
{"lineNum":"  435","line":"            call!(SystemTimeToTzSpecificLocalTime(0 as *const _,"},
{"lineNum":"  436","line":"                                                  &mut utc, &mut local));"},
{"lineNum":"  437","line":"            system_time_to_tm(&local, tm);"},
{"lineNum":"  438","line":""},
{"lineNum":"  439","line":"            let local = system_time_to_file_time(&local);"},
{"lineNum":"  440","line":"            let local_sec = file_time_to_unix_seconds(&local);"},
{"lineNum":"  441","line":""},
{"lineNum":"  442","line":"            let mut tz = mem::zeroed();"},
{"lineNum":"  443","line":"            GetTimeZoneInformation(&mut tz);"},
{"lineNum":"  444","line":""},
{"lineNum":"  445","line":"            // SystemTimeToTzSpecificLocalTime already applied the biases so"},
{"lineNum":"  446","line":"            // check if it non standard"},
{"lineNum":"  447","line":"            tm.tm_utcoff = (local_sec - sec) as i32;"},
{"lineNum":"  448","line":"            tm.tm_isdst = if tm.tm_utcoff == -60 * (tz.Bias + tz.StandardBias) {"},
{"lineNum":"  449","line":"                0"},
{"lineNum":"  450","line":"            } else {"},
{"lineNum":"  451","line":"                1"},
{"lineNum":"  452","line":"            };"},
{"lineNum":"  453","line":"        }"},
{"lineNum":"  454","line":"    }"},
{"lineNum":"  455","line":""},
{"lineNum":"  456","line":"    pub fn utc_tm_to_time(tm: &Tm) -> i64 {"},
{"lineNum":"  457","line":"        unsafe {"},
{"lineNum":"  458","line":"            let mut ft = mem::zeroed();"},
{"lineNum":"  459","line":"            let sys_time = tm_to_system_time(tm);"},
{"lineNum":"  460","line":"            call!(SystemTimeToFileTime(&sys_time, &mut ft));"},
{"lineNum":"  461","line":"            file_time_to_unix_seconds(&ft)"},
{"lineNum":"  462","line":"        }"},
{"lineNum":"  463","line":"    }"},
{"lineNum":"  464","line":""},
{"lineNum":"  465","line":"    pub fn local_tm_to_time(tm: &Tm) -> i64 {"},
{"lineNum":"  466","line":"        unsafe {"},
{"lineNum":"  467","line":"            let mut ft = mem::zeroed();"},
{"lineNum":"  468","line":"            let mut utc = mem::zeroed();"},
{"lineNum":"  469","line":"            let mut sys_time = tm_to_system_time(tm);"},
{"lineNum":"  470","line":"            call!(TzSpecificLocalTimeToSystemTime(0 as *mut _,"},
{"lineNum":"  471","line":"                                                  &mut sys_time, &mut utc));"},
{"lineNum":"  472","line":"            call!(SystemTimeToFileTime(&utc, &mut ft));"},
{"lineNum":"  473","line":"            file_time_to_unix_seconds(&ft)"},
{"lineNum":"  474","line":"        }"},
{"lineNum":"  475","line":"    }"},
{"lineNum":"  476","line":""},
{"lineNum":"  477","line":"    pub fn get_time() -> (i64, i32) {"},
{"lineNum":"  478","line":"        unsafe {"},
{"lineNum":"  479","line":"            let mut ft = mem::zeroed();"},
{"lineNum":"  480","line":"            GetSystemTimeAsFileTime(&mut ft);"},
{"lineNum":"  481","line":"            (file_time_to_unix_seconds(&ft), file_time_to_nsec(&ft))"},
{"lineNum":"  482","line":"        }"},
{"lineNum":"  483","line":"    }"},
{"lineNum":"  484","line":""},
{"lineNum":"  485","line":"    pub fn get_precise_ns() -> u64 {"},
{"lineNum":"  486","line":"        let mut ticks = 0;"},
{"lineNum":"  487","line":"        unsafe {"},
{"lineNum":"  488","line":"            assert!(QueryPerformanceCounter(&mut ticks) == 1);"},
{"lineNum":"  489","line":"        }"},
{"lineNum":"  490","line":"        mul_div_i64(ticks as i64, 1000000000, frequency() as i64) as u64"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"    }"},
{"lineNum":"  493","line":""},
{"lineNum":"  494","line":"    #[derive(Clone, Copy, PartialOrd, Ord, PartialEq, Eq, Debug)]"},
{"lineNum":"  495","line":"    pub struct SteadyTime {"},
{"lineNum":"  496","line":"        t: LARGE_INTEGER,"},
{"lineNum":"  497","line":"    }"},
{"lineNum":"  498","line":""},
{"lineNum":"  499","line":"    impl SteadyTime {"},
{"lineNum":"  500","line":"        pub fn now() -> SteadyTime {"},
{"lineNum":"  501","line":"            let mut t = SteadyTime { t: 0 };"},
{"lineNum":"  502","line":"            unsafe { QueryPerformanceCounter(&mut t.t); }"},
{"lineNum":"  503","line":"            t"},
{"lineNum":"  504","line":"        }"},
{"lineNum":"  505","line":"    }"},
{"lineNum":"  506","line":""},
{"lineNum":"  507","line":"    impl Sub for SteadyTime {"},
{"lineNum":"  508","line":"        type Output = Duration;"},
{"lineNum":"  509","line":"        fn sub(self, other: SteadyTime) -> Duration {"},
{"lineNum":"  510","line":"            let diff = self.t as i64 - other.t as i64;"},
{"lineNum":"  511","line":"            Duration::nanoseconds(mul_div_i64(diff, 1000000000,"},
{"lineNum":"  512","line":"                                              frequency() as i64))"},
{"lineNum":"  513","line":"        }"},
{"lineNum":"  514","line":"    }"},
{"lineNum":"  515","line":""},
{"lineNum":"  516","line":"    impl Sub<Duration> for SteadyTime {"},
{"lineNum":"  517","line":"        type Output = SteadyTime;"},
{"lineNum":"  518","line":"        fn sub(self, other: Duration) -> SteadyTime {"},
{"lineNum":"  519","line":"            self + -other"},
{"lineNum":"  520","line":"        }"},
{"lineNum":"  521","line":"    }"},
{"lineNum":"  522","line":""},
{"lineNum":"  523","line":"    impl Add<Duration> for SteadyTime {"},
{"lineNum":"  524","line":"        type Output = SteadyTime;"},
{"lineNum":"  525","line":"        fn add(mut self, other: Duration) -> SteadyTime {"},
{"lineNum":"  526","line":"            self.t += (other.num_microseconds().unwrap() * frequency() as i64 /"},
{"lineNum":"  527","line":"                       1_000_000) as LARGE_INTEGER;"},
{"lineNum":"  528","line":"            self"},
{"lineNum":"  529","line":"        }"},
{"lineNum":"  530","line":"    }"},
{"lineNum":"  531","line":""},
{"lineNum":"  532","line":"    #[cfg(test)]"},
{"lineNum":"  533","line":"    pub struct TzReset {"},
{"lineNum":"  534","line":"        old: TIME_ZONE_INFORMATION,"},
{"lineNum":"  535","line":"    }"},
{"lineNum":"  536","line":""},
{"lineNum":"  537","line":"    #[cfg(test)]"},
{"lineNum":"  538","line":"    impl Drop for TzReset {"},
{"lineNum":"  539","line":"        fn drop(&mut self) {"},
{"lineNum":"  540","line":"            unsafe {"},
{"lineNum":"  541","line":"                call!(SetTimeZoneInformation(&self.old));"},
{"lineNum":"  542","line":"            }"},
{"lineNum":"  543","line":"        }"},
{"lineNum":"  544","line":"    }"},
{"lineNum":"  545","line":""},
{"lineNum":"  546","line":"    #[cfg(test)]"},
{"lineNum":"  547","line":"    pub fn set_los_angeles_time_zone() -> TzReset {"},
{"lineNum":"  548","line":"        acquire_privileges();"},
{"lineNum":"  549","line":""},
{"lineNum":"  550","line":"        unsafe {"},
{"lineNum":"  551","line":"            let mut tz = mem::zeroed::<TIME_ZONE_INFORMATION>();"},
{"lineNum":"  552","line":"            GetTimeZoneInformation(&mut tz);"},
{"lineNum":"  553","line":"            let ret = TzReset { old: tz };"},
{"lineNum":"  554","line":"            tz.Bias = 60 * 8;"},
{"lineNum":"  555","line":"            call!(SetTimeZoneInformation(&tz));"},
{"lineNum":"  556","line":"            return ret"},
{"lineNum":"  557","line":"        }"},
{"lineNum":"  558","line":"    }"},
{"lineNum":"  559","line":""},
{"lineNum":"  560","line":"    #[cfg(test)]"},
{"lineNum":"  561","line":"    pub fn set_london_with_dst_time_zone() -> TzReset {"},
{"lineNum":"  562","line":"        acquire_privileges();"},
{"lineNum":"  563","line":""},
{"lineNum":"  564","line":"        unsafe {"},
{"lineNum":"  565","line":"            let mut tz = mem::zeroed::<TIME_ZONE_INFORMATION>();"},
{"lineNum":"  566","line":"            GetTimeZoneInformation(&mut tz);"},
{"lineNum":"  567","line":"            let ret = TzReset { old: tz };"},
{"lineNum":"  568","line":"            // Since date set precisely this is 2015\'s dates"},
{"lineNum":"  569","line":"            tz.Bias = 0;"},
{"lineNum":"  570","line":"            tz.DaylightBias = -60;"},
{"lineNum":"  571","line":"            tz.DaylightDate.wYear = 0;"},
{"lineNum":"  572","line":"            tz.DaylightDate.wMonth = 3;"},
{"lineNum":"  573","line":"            tz.DaylightDate.wDayOfWeek = 0;"},
{"lineNum":"  574","line":"            tz.DaylightDate.wDay = 5;"},
{"lineNum":"  575","line":"            tz.DaylightDate.wHour = 2;"},
{"lineNum":"  576","line":"            tz.StandardBias = 0;"},
{"lineNum":"  577","line":"            tz.StandardDate.wYear = 0;"},
{"lineNum":"  578","line":"            tz.StandardDate.wMonth = 10;"},
{"lineNum":"  579","line":"            tz.StandardDate.wDayOfWeek = 0;"},
{"lineNum":"  580","line":"            tz.StandardDate.wDay = 5;"},
{"lineNum":"  581","line":"            tz.StandardDate.wHour = 2;"},
{"lineNum":"  582","line":"            call!(SetTimeZoneInformation(&tz));"},
{"lineNum":"  583","line":"            return ret"},
{"lineNum":"  584","line":"        }"},
{"lineNum":"  585","line":"    }"},
{"lineNum":"  586","line":""},
{"lineNum":"  587","line":"    // Ensures that this process has the necessary privileges to set a new time"},
{"lineNum":"  588","line":"    // zone, and this is all transcribed from:"},
{"lineNum":"  589","line":"    // https://msdn.microsoft.com/en-us/library/windows/desktop/ms724944%28v=vs.85%29.aspx"},
{"lineNum":"  590","line":"    #[cfg(test)]"},
{"lineNum":"  591","line":"    fn acquire_privileges() {"},
{"lineNum":"  592","line":"        use std::sync::{ONCE_INIT, Once};"},
{"lineNum":"  593","line":"        use advapi32::*;"},
{"lineNum":"  594","line":"        const SE_PRIVILEGE_ENABLED: DWORD = 2;"},
{"lineNum":"  595","line":"        static INIT: Once = ONCE_INIT;"},
{"lineNum":"  596","line":""},
{"lineNum":"  597","line":"        #[repr(C)]"},
{"lineNum":"  598","line":"        struct TKP {"},
{"lineNum":"  599","line":"            tkp: TOKEN_PRIVILEGES,"},
{"lineNum":"  600","line":"            laa: LUID_AND_ATTRIBUTES,"},
{"lineNum":"  601","line":"        }"},
{"lineNum":"  602","line":""},
{"lineNum":"  603","line":"        INIT.call_once(|| unsafe {"},
{"lineNum":"  604","line":"            let mut hToken = 0 as *mut _;"},
{"lineNum":"  605","line":"            call!(OpenProcessToken(GetCurrentProcess(),"},
{"lineNum":"  606","line":"                                   TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY,"},
{"lineNum":"  607","line":"                                   &mut hToken));"},
{"lineNum":"  608","line":""},
{"lineNum":"  609","line":"            let mut tkp = mem::zeroed::<TKP>();"},
{"lineNum":"  610","line":"            assert_eq!(tkp.tkp.Privileges.len(), 0);"},
{"lineNum":"  611","line":"            let c = ::std::ffi::CString::new(\"SeTimeZonePrivilege\").unwrap();"},
{"lineNum":"  612","line":"            call!(LookupPrivilegeValueA(0 as *const _, c.as_ptr(),"},
{"lineNum":"  613","line":"                                        &mut tkp.laa.Luid));"},
{"lineNum":"  614","line":"            tkp.tkp.PrivilegeCount = 1;"},
{"lineNum":"  615","line":"            tkp.laa.Attributes = SE_PRIVILEGE_ENABLED;"},
{"lineNum":"  616","line":"            call!(AdjustTokenPrivileges(hToken, FALSE, &mut tkp.tkp, 0,"},
{"lineNum":"  617","line":"                                        0 as *mut _, 0 as *mut _));"},
{"lineNum":"  618","line":"        });"},
{"lineNum":"  619","line":"    }"},
{"lineNum":"  620","line":""},
{"lineNum":"  621","line":""},
{"lineNum":"  622","line":""},
{"lineNum":"  623","line":"    // Computes (value*numer)/denom without overflow, as long as both"},
{"lineNum":"  624","line":"    // (numer*denom) and the overall result fit into i64 (which is the case"},
{"lineNum":"  625","line":"    // for our time conversions)."},
{"lineNum":"  626","line":"    fn mul_div_i64(value: i64, numer: i64, denom: i64) -> i64 {"},
{"lineNum":"  627","line":"        let q = value / denom;"},
{"lineNum":"  628","line":"        let r = value % denom;"},
{"lineNum":"  629","line":"        // Decompose value as (value/denom*denom + value%denom),"},
{"lineNum":"  630","line":"        // substitute into (value*numer)/denom and simplify."},
{"lineNum":"  631","line":"        // r < denom, so (denom*numer) is the upper bound of (r*numer)"},
{"lineNum":"  632","line":"        q * numer + r * numer / denom"},
{"lineNum":"  633","line":"    }"},
{"lineNum":"  634","line":""},
{"lineNum":"  635","line":"    #[test]"},
{"lineNum":"  636","line":"    fn test_muldiv() {"},
{"lineNum":"  637","line":"        assert_eq!(mul_div_i64( 1_000_000_000_001, 1_000_000_000, 1_000_000),"},
{"lineNum":"  638","line":"                   1_000_000_000_001_000);"},
{"lineNum":"  639","line":"        assert_eq!(mul_div_i64(-1_000_000_000_001, 1_000_000_000, 1_000_000),"},
{"lineNum":"  640","line":"                   -1_000_000_000_001_000);"},
{"lineNum":"  641","line":"        assert_eq!(mul_div_i64(-1_000_000_000_001,-1_000_000_000, 1_000_000),"},
{"lineNum":"  642","line":"                   1_000_000_000_001_000);"},
{"lineNum":"  643","line":"        assert_eq!(mul_div_i64( 1_000_000_000_001, 1_000_000_000,-1_000_000),"},
{"lineNum":"  644","line":"                   -1_000_000_000_001_000);"},
{"lineNum":"  645","line":"        assert_eq!(mul_div_i64( 1_000_000_000_001,-1_000_000_000,-1_000_000),"},
{"lineNum":"  646","line":"                   1_000_000_000_001_000);"},
{"lineNum":"  647","line":"    }"},
{"lineNum":"  648","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test_server-9ef2987148640087", "date" : "2016-02-17 13:22:50", "instrumented" : 4, "covered" : 4,};
var merged_data = [];
