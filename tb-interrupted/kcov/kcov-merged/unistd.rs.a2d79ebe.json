var data = {lines:[
{"lineNum":"    1","line":"//! Standard symbolic constants and types"},
{"lineNum":"    2","line":"//!","class":"lineNoCov","hits":"0",},
{"lineNum":"    3","line":"use {Error, Result, NixPath, from_ffi};"},
{"lineNum":"    4","line":"use errno::Errno;"},
{"lineNum":"    5","line":"use fcntl::{fcntl, OFlag, O_NONBLOCK, O_CLOEXEC, FD_CLOEXEC};"},
{"lineNum":"    6","line":"use fcntl::FcntlArg::{F_SETFD, F_SETFL};"},
{"lineNum":"    7","line":"use libc::{c_char, c_void, c_int, size_t, pid_t, off_t};"},
{"lineNum":"    8","line":"use std::mem;"},
{"lineNum":"    9","line":"use std::ffi::CString;"},
{"lineNum":"   10","line":"use std::os::unix::io::RawFd;"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"#[cfg(any(target_os = \"linux\", target_os = \"android\"))]"},
{"lineNum":"   13","line":"pub use self::linux::*;"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"mod ffi {"},
{"lineNum":"   16","line":"    use libc::{c_char, c_int, size_t};"},
{"lineNum":"   17","line":"    pub use libc::{close, read, write, pipe, ftruncate, unlink, setpgid};"},
{"lineNum":"   18","line":"    pub use libc::funcs::posix88::unistd::{fork, getpid, getppid};"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"    extern {"},
{"lineNum":"   21","line":"        // duplicate a file descriptor"},
{"lineNum":"   22","line":"        // doc: http://man7.org/linux/man-pages/man2/dup.2.html"},
{"lineNum":"   23","line":"        pub fn dup(oldfd: c_int) -> c_int;"},
{"lineNum":"   24","line":"        pub fn dup2(oldfd: c_int, newfd: c_int) -> c_int;"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"        // change working directory"},
{"lineNum":"   27","line":"        // doc: http://man7.org/linux/man-pages/man2/chdir.2.html"},
{"lineNum":"   28","line":"        pub fn chdir(path: *const c_char) -> c_int;"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"        // Execute PATH with arguments ARGV and environment from `environ\'."},
{"lineNum":"   31","line":"        // doc: http://man7.org/linux/man-pages/man3/execv.3.html"},
{"lineNum":"   32","line":"        pub fn execv (path: *const c_char, argv: *const *const c_char) -> c_int;"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"        // execute program"},
{"lineNum":"   35","line":"        // doc: http://man7.org/linux/man-pages/man2/execve.2.html"},
{"lineNum":"   36","line":"        pub fn execve(path: *const c_char, argv: *const *const c_char, envp: *const *const c_char) -> c_int;"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"        // Execute FILE, searching in the `PATH\' environment variable if it contains"},
{"lineNum":"   39","line":"        // no slashes, with arguments ARGV and environment from `environ\'."},
{"lineNum":"   40","line":"        // doc: http://man7.org/linux/man-pages/man3/execvp.3.html"},
{"lineNum":"   41","line":"        pub fn execvp(filename: *const c_char, argv: *const *const c_char) -> c_int;"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"        // doc: http://man7.org/linux/man-pages/man3/exec.3.html"},
{"lineNum":"   44","line":"        #[cfg(any(target_os = \"linux\", target_os = \"android\"))]"},
{"lineNum":"   45","line":"        #[cfg(feature = \"execvpe\")]"},
{"lineNum":"   46","line":"        pub fn execvpe(filename: *const c_char, argv: *const *const c_char, envp: *const *const c_char) -> c_int;"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"        // run the current process in the background"},
{"lineNum":"   49","line":"        // doc: http://man7.org/linux/man-pages/man3/daemon.3.html"},
{"lineNum":"   50","line":"        pub fn daemon(nochdir: c_int, noclose: c_int) -> c_int;"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"        // sets the hostname to the value given"},
{"lineNum":"   53","line":"        // doc: http://man7.org/linux/man-pages/man2/gethostname.2.html"},
{"lineNum":"   54","line":"        pub fn gethostname(name: *mut c_char, len: size_t) -> c_int;"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"        // gets the hostname"},
{"lineNum":"   57","line":"        // doc: http://man7.org/linux/man-pages/man2/sethostname.2.html"},
{"lineNum":"   58","line":"        pub fn sethostname(name: *const c_char, len: size_t) -> c_int;"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"        // change root directory"},
{"lineNum":"   61","line":"        // doc: http://man7.org/linux/man-pages/man2/chroot.2.html"},
{"lineNum":"   62","line":"        pub fn chroot(path: *const c_char) -> c_int;"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"        // synchronize a file\'s in-core state with storage device"},
{"lineNum":"   65","line":"        // doc: http://man7.org/linux/man-pages/man2/fsync.2.html"},
{"lineNum":"   66","line":"        pub fn fsync(fd: c_int) -> c_int;"},
{"lineNum":"   67","line":"        pub fn fdatasync(fd: c_int) -> c_int;"},
{"lineNum":"   68","line":"    }"},
{"lineNum":"   69","line":"}"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"#[derive(Clone, Copy)]"},
{"lineNum":"   72","line":"pub enum Fork {"},
{"lineNum":"   73","line":"    Parent(pid_t),"},
{"lineNum":"   74","line":"    Child"},
{"lineNum":"   75","line":"}"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"impl Fork {"},
{"lineNum":"   78","line":"    pub fn is_child(&self) -> bool {"},
{"lineNum":"   79","line":"        match *self {"},
{"lineNum":"   80","line":"            Fork::Child => true,"},
{"lineNum":"   81","line":"            _ => false"},
{"lineNum":"   82","line":"        }"},
{"lineNum":"   83","line":"    }"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"    pub fn is_parent(&self) -> bool {"},
{"lineNum":"   86","line":"        match *self {"},
{"lineNum":"   87","line":"            Fork::Parent(_) => true,"},
{"lineNum":"   88","line":"            _ => false"},
{"lineNum":"   89","line":"        }"},
{"lineNum":"   90","line":"    }"},
{"lineNum":"   91","line":"}"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"pub fn fork() -> Result<Fork> {"},
{"lineNum":"   94","line":"    use self::Fork::*;"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"    let res = unsafe { ffi::fork() };"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"    if res < 0 {"},
{"lineNum":"   99","line":"        return Err(Error::Sys(Errno::last()));"},
{"lineNum":"  100","line":"    } else if res == 0 {"},
{"lineNum":"  101","line":"        Ok(Child)"},
{"lineNum":"  102","line":"    } else {"},
{"lineNum":"  103","line":"        Ok(Parent(res))"},
{"lineNum":"  104","line":"    }"},
{"lineNum":"  105","line":"}"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"#[inline]"},
{"lineNum":"  108","line":"pub fn getpid() -> pid_t {"},
{"lineNum":"  109","line":"    unsafe { ffi::getpid() } // no error handling, according to man page: \"These functions are always successful.\""},
{"lineNum":"  110","line":"}"},
{"lineNum":"  111","line":"#[inline]"},
{"lineNum":"  112","line":"pub fn getppid() -> pid_t {"},
{"lineNum":"  113","line":"    unsafe { ffi::getppid() } // no error handling, according to man page: \"These functions are always successful.\""},
{"lineNum":"  114","line":"}"},
{"lineNum":"  115","line":"#[inline]"},
{"lineNum":"  116","line":"pub fn setpgid(pid: pid_t, pgid: pid_t) -> Result<()> {"},
{"lineNum":"  117","line":"    let res = unsafe { ffi::setpgid(pid, pgid) };"},
{"lineNum":"  118","line":"    if res < 0 {"},
{"lineNum":"  119","line":"        return Err(Error::Sys(Errno::last()));"},
{"lineNum":"  120","line":"    }"},
{"lineNum":"  121","line":"    Ok(())"},
{"lineNum":"  122","line":"}"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"#[inline]"},
{"lineNum":"  125","line":"pub fn dup(oldfd: RawFd) -> Result<RawFd> {"},
{"lineNum":"  126","line":"    let res = unsafe { ffi::dup(oldfd) };"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"    if res < 0 {"},
{"lineNum":"  129","line":"        return Err(Error::Sys(Errno::last()));"},
{"lineNum":"  130","line":"    }"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"    Ok(res)"},
{"lineNum":"  133","line":"}"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"#[inline]"},
{"lineNum":"  136","line":"pub fn dup2(oldfd: RawFd, newfd: RawFd) -> Result<RawFd> {"},
{"lineNum":"  137","line":"    let res = unsafe { ffi::dup2(oldfd, newfd) };"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"    if res < 0 {"},
{"lineNum":"  140","line":"        return Err(Error::Sys(Errno::last()));"},
{"lineNum":"  141","line":"    }"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"    Ok(res)"},
{"lineNum":"  144","line":"}"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"pub fn dup3(oldfd: RawFd, newfd: RawFd, flags: OFlag) -> Result<RawFd> {"},
{"lineNum":"  147","line":"    dup3_polyfill(oldfd, newfd, flags)"},
{"lineNum":"  148","line":"}"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"#[inline]"},
{"lineNum":"  151","line":"fn dup3_polyfill(oldfd: RawFd, newfd: RawFd, flags: OFlag) -> Result<RawFd> {"},
{"lineNum":"  152","line":"    use errno::EINVAL;"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"    if oldfd == newfd {"},
{"lineNum":"  155","line":"        return Err(Error::Sys(Errno::EINVAL));"},
{"lineNum":"  156","line":"    }"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"    let fd = try!(dup2(oldfd, newfd));"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"    if flags.contains(O_CLOEXEC) {"},
{"lineNum":"  161","line":"        if let Err(e) = fcntl(fd, F_SETFD(FD_CLOEXEC)) {"},
{"lineNum":"  162","line":"            let _ = close(fd);"},
{"lineNum":"  163","line":"            return Err(e);"},
{"lineNum":"  164","line":"        }"},
{"lineNum":"  165","line":"    }"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"    Ok(fd)"},
{"lineNum":"  168","line":"}"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"#[inline]"},
{"lineNum":"  171","line":"pub fn chdir<P: ?Sized + NixPath>(path: &P) -> Result<()> {"},
{"lineNum":"  172","line":"    let res = try!(path.with_nix_path(|cstr| {"},
{"lineNum":"  173","line":"        unsafe { ffi::chdir(cstr.as_ptr()) }"},
{"lineNum":"  174","line":"    }));"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"    if res != 0 {"},
{"lineNum":"  177","line":"        return Err(Error::Sys(Errno::last()));"},
{"lineNum":"  178","line":"    }"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"    return Ok(())"},
{"lineNum":"  181","line":"}"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"fn to_exec_array(args: &[CString]) -> Vec<*const c_char> {"},
{"lineNum":"  184","line":"    use std::ptr;"},
{"lineNum":"  185","line":"    use libc::c_char;"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"    let mut args_p: Vec<*const c_char> = args.iter().map(|s| s.as_ptr()).collect();"},
{"lineNum":"  188","line":"    args_p.push(ptr::null());"},
{"lineNum":"  189","line":"    args_p"},
{"lineNum":"  190","line":"}"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"#[inline]"},
{"lineNum":"  193","line":"pub fn execv(path: &CString, argv: &[CString]) -> Result<()> {"},
{"lineNum":"  194","line":"    let args_p = to_exec_array(argv);"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"    unsafe {"},
{"lineNum":"  197","line":"        ffi::execv(path.as_ptr(), args_p.as_ptr())"},
{"lineNum":"  198","line":"    };"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"    Err(Error::Sys(Errno::last()))"},
{"lineNum":"  201","line":"}"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"#[inline]"},
{"lineNum":"  204","line":"pub fn execve(path: &CString, args: &[CString], env: &[CString]) -> Result<()> {"},
{"lineNum":"  205","line":"    let args_p = to_exec_array(args);"},
{"lineNum":"  206","line":"    let env_p = to_exec_array(env);"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"    unsafe {"},
{"lineNum":"  209","line":"        ffi::execve(path.as_ptr(), args_p.as_ptr(), env_p.as_ptr())"},
{"lineNum":"  210","line":"    };"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"    Err(Error::Sys(Errno::last()))"},
{"lineNum":"  213","line":"}"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"#[inline]"},
{"lineNum":"  216","line":"pub fn execvp(filename: &CString, args: &[CString]) -> Result<()> {"},
{"lineNum":"  217","line":"    let args_p = to_exec_array(args);"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"    unsafe {"},
{"lineNum":"  220","line":"        ffi::execvp(filename.as_ptr(), args_p.as_ptr())"},
{"lineNum":"  221","line":"    };"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"    Err(Error::Sys(Errno::last()))"},
{"lineNum":"  224","line":"}"},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"pub fn daemon(nochdir: bool, noclose: bool) -> Result<()> {"},
{"lineNum":"  227","line":"    let res = unsafe { ffi::daemon(nochdir as c_int, noclose as c_int) };"},
{"lineNum":"  228","line":"    from_ffi(res)"},
{"lineNum":"  229","line":"}"},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"pub fn sethostname(name: &[u8]) -> Result<()> {"},
{"lineNum":"  232","line":"    let ptr = name.as_ptr() as *const c_char;"},
{"lineNum":"  233","line":"    let len = name.len() as size_t;"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"    let res = unsafe { ffi::sethostname(ptr, len) };"},
{"lineNum":"  236","line":"    from_ffi(res)"},
{"lineNum":"  237","line":"}"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"pub fn gethostname(name: &mut [u8]) -> Result<()> {"},
{"lineNum":"  240","line":"    let ptr = name.as_mut_ptr() as *mut c_char;"},
{"lineNum":"  241","line":"    let len = name.len() as size_t;"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"    let res = unsafe { ffi::gethostname(ptr, len) };"},
{"lineNum":"  244","line":"    from_ffi(res)"},
{"lineNum":"  245","line":"}"},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"pub fn close(fd: RawFd) -> Result<()> {","class":"lineCov","hits":"1","order":"1432",},
{"lineNum":"  248","line":"    let res = unsafe { ffi::close(fd) };","class":"lineCov","hits":"1","order":"1433",},
{"lineNum":"  249","line":"    from_ffi(res)","class":"lineCov","hits":"1","order":"1435",},
{"lineNum":"  250","line":"}","class":"lineCov","hits":"1","order":"1436",},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"pub fn read(fd: RawFd, buf: &mut [u8]) -> Result<usize> {","class":"lineNoCov","hits":"0",},
{"lineNum":"  253","line":"    let res = unsafe { ffi::read(fd, buf.as_mut_ptr() as *mut c_void, buf.len() as size_t) };","class":"lineNoCov","hits":"0",},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"    if res < 0 {","class":"lineNoCov","hits":"0",},
{"lineNum":"  256","line":"        return Err(Error::Sys(Errno::last()));","class":"lineNoCov","hits":"0",},
{"lineNum":"  257","line":"    }"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"    return Ok(res as usize)","class":"lineNoCov","hits":"0",},
{"lineNum":"  260","line":"}","class":"lineNoCov","hits":"0",},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"pub fn write(fd: RawFd, buf: &[u8]) -> Result<usize> {"},
{"lineNum":"  263","line":"    let res = unsafe { ffi::write(fd, buf.as_ptr() as *const c_void, buf.len() as size_t) };"},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"    if res < 0 {"},
{"lineNum":"  266","line":"        return Err(Error::Sys(Errno::last()));"},
{"lineNum":"  267","line":"    }"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"    return Ok(res as usize)"},
{"lineNum":"  270","line":"}"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"pub fn pipe() -> Result<(RawFd, RawFd)> {"},
{"lineNum":"  273","line":"    unsafe {"},
{"lineNum":"  274","line":"        let mut fds: [c_int; 2] = mem::uninitialized();"},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"        let res = ffi::pipe(fds.as_mut_ptr());"},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"        if res < 0 {"},
{"lineNum":"  279","line":"            return Err(Error::Sys(Errno::last()));"},
{"lineNum":"  280","line":"        }"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"        Ok((fds[0], fds[1]))"},
{"lineNum":"  283","line":"    }"},
{"lineNum":"  284","line":"}"},
{"lineNum":"  285","line":""},
{"lineNum":"  286","line":"pub fn pipe2(flags: OFlag) -> Result<(RawFd, RawFd)> {","class":"lineCov","hits":"1","order":"1428",},
{"lineNum":"  287","line":"    unsafe {"},
{"lineNum":"  288","line":"        let mut fds: [c_int; 2] = mem::uninitialized();","class":"lineCov","hits":"1","order":"1429",},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"        let res = ffi::pipe(fds.as_mut_ptr());","class":"lineCov","hits":"1","order":"1430",},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"        if res < 0 {","class":"lineCov","hits":"1","order":"1431",},
{"lineNum":"  293","line":"            return Err(Error::Sys(Errno::last()));","class":"lineNoCov","hits":"0",},
{"lineNum":"  294","line":"        }"},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"        try!(pipe2_setflags(fds[0], fds[1], flags));","class":"lineCov","hits":"1","order":"1434",},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"        Ok((fds[0], fds[1]))","class":"lineCov","hits":"1","order":"1437",},
{"lineNum":"  299","line":"    }","class":"lineCov","hits":"1","order":"1438",},
{"lineNum":"  300","line":"}","class":"lineCov","hits":"1","order":"1439",},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"fn pipe2_setflags(fd1: RawFd, fd2: RawFd, flags: OFlag) -> Result<()> {","class":"lineCov","hits":"1","order":"1440",},
{"lineNum":"  303","line":"    let mut res = Ok(0);"},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"    if flags.contains(O_CLOEXEC) {","class":"lineCov","hits":"1","order":"1441",},
{"lineNum":"  306","line":"        res = res","class":"lineCov","hits":"1","order":"1442",},
{"lineNum":"  307","line":"            .and_then(|_| fcntl(fd1, F_SETFD(FD_CLOEXEC)))","class":"lineCov","hits":"1","order":"1443",},
{"lineNum":"  308","line":"            .and_then(|_| fcntl(fd2, F_SETFD(FD_CLOEXEC)));","class":"lineCov","hits":"1","order":"1444",},
{"lineNum":"  309","line":"    }"},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":"    if flags.contains(O_NONBLOCK) {","class":"lineCov","hits":"1","order":"1445",},
{"lineNum":"  312","line":"        res = res","class":"lineCov","hits":"1","order":"1446",},
{"lineNum":"  313","line":"            .and_then(|_| fcntl(fd1, F_SETFL(O_NONBLOCK)))","class":"lineCov","hits":"1","order":"1447",},
{"lineNum":"  314","line":"            .and_then(|_| fcntl(fd2, F_SETFL(O_NONBLOCK)));","class":"lineCov","hits":"1","order":"1448",},
{"lineNum":"  315","line":"    }"},
{"lineNum":"  316","line":""},
{"lineNum":"  317","line":"    match res {"},
{"lineNum":"  318","line":"        Ok(_) => Ok(()),"},
{"lineNum":"  319","line":"        Err(e) => {"},
{"lineNum":"  320","line":"            let _ = close(fd1);","class":"lineNoCov","hits":"0",},
{"lineNum":"  321","line":"            let _ = close(fd2);","class":"lineNoCov","hits":"0",},
{"lineNum":"  322","line":"            return Err(e);","class":"lineNoCov","hits":"0",},
{"lineNum":"  323","line":"        }"},
{"lineNum":"  324","line":"    }"},
{"lineNum":"  325","line":"}","class":"lineCov","hits":"1","order":"1449",},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"pub fn ftruncate(fd: RawFd, len: off_t) -> Result<()> {"},
{"lineNum":"  328","line":"    if unsafe { ffi::ftruncate(fd, len) } < 0 {"},
{"lineNum":"  329","line":"        Err(Error::Sys(Errno::last()))"},
{"lineNum":"  330","line":"    } else {"},
{"lineNum":"  331","line":"        Ok(())"},
{"lineNum":"  332","line":"    }"},
{"lineNum":"  333","line":"}"},
{"lineNum":"  334","line":""},
{"lineNum":"  335","line":"pub fn isatty(fd: RawFd) -> Result<bool> {"},
{"lineNum":"  336","line":"    use libc;"},
{"lineNum":"  337","line":""},
{"lineNum":"  338","line":"    if unsafe { libc::isatty(fd) } == 1 {"},
{"lineNum":"  339","line":"        Ok(true)"},
{"lineNum":"  340","line":"    } else {"},
{"lineNum":"  341","line":"        match Errno::last() {"},
{"lineNum":"  342","line":"            // ENOTTY means `fd` is a valid file descriptor, but not a TTY, so"},
{"lineNum":"  343","line":"            // we return `Ok(false)`"},
{"lineNum":"  344","line":"            Errno::ENOTTY => Ok(false),"},
{"lineNum":"  345","line":"            err => Err(Error::Sys(err))"},
{"lineNum":"  346","line":"        }"},
{"lineNum":"  347","line":"    }"},
{"lineNum":"  348","line":"}"},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"pub fn unlink<P: ?Sized + NixPath>(path: &P) -> Result<()> {"},
{"lineNum":"  351","line":"    let res = try!(path.with_nix_path(|cstr| {"},
{"lineNum":"  352","line":"    unsafe {"},
{"lineNum":"  353","line":"        ffi::unlink(cstr.as_ptr())"},
{"lineNum":"  354","line":"    }"},
{"lineNum":"  355","line":"    }));"},
{"lineNum":"  356","line":"    from_ffi(res)"},
{"lineNum":"  357","line":"}"},
{"lineNum":"  358","line":""},
{"lineNum":"  359","line":"#[inline]"},
{"lineNum":"  360","line":"pub fn chroot<P: ?Sized + NixPath>(path: &P) -> Result<()> {"},
{"lineNum":"  361","line":"    let res = try!(path.with_nix_path(|cstr| {"},
{"lineNum":"  362","line":"        unsafe { ffi::chroot(cstr.as_ptr()) }"},
{"lineNum":"  363","line":"    }));"},
{"lineNum":"  364","line":""},
{"lineNum":"  365","line":"    if res != 0 {"},
{"lineNum":"  366","line":"        return Err(Error::Sys(Errno::last()));"},
{"lineNum":"  367","line":"    }"},
{"lineNum":"  368","line":""},
{"lineNum":"  369","line":"    Ok(())"},
{"lineNum":"  370","line":"}"},
{"lineNum":"  371","line":""},
{"lineNum":"  372","line":"#[inline]"},
{"lineNum":"  373","line":"pub fn fsync(fd: RawFd) -> Result<()> {"},
{"lineNum":"  374","line":"    let res = unsafe { ffi::fsync(fd) };"},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"    if res < 0 {"},
{"lineNum":"  377","line":"        return Err(Error::Sys(Errno::last()));"},
{"lineNum":"  378","line":"    }"},
{"lineNum":"  379","line":""},
{"lineNum":"  380","line":"    Ok(())"},
{"lineNum":"  381","line":"}"},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"#[inline]"},
{"lineNum":"  384","line":"pub fn fdatasync(fd: RawFd) -> Result<()> {"},
{"lineNum":"  385","line":"    let res = unsafe { ffi::fdatasync(fd) };"},
{"lineNum":"  386","line":""},
{"lineNum":"  387","line":"    if res < 0 {"},
{"lineNum":"  388","line":"        return Err(Error::Sys(Errno::last()));"},
{"lineNum":"  389","line":"    }"},
{"lineNum":"  390","line":""},
{"lineNum":"  391","line":"    Ok(())"},
{"lineNum":"  392","line":"}"},
{"lineNum":"  393","line":""},
{"lineNum":"  394","line":"#[cfg(any(target_os = \"linux\", target_os = \"android\"))]"},
{"lineNum":"  395","line":"mod linux {"},
{"lineNum":"  396","line":"    use sys::syscall::{syscall, SYSPIVOTROOT};"},
{"lineNum":"  397","line":"    use errno::Errno;"},
{"lineNum":"  398","line":"    use {Error, Result, NixPath};"},
{"lineNum":"  399","line":""},
{"lineNum":"  400","line":"    #[cfg(feature = \"execvpe\")]"},
{"lineNum":"  401","line":"    use std::ffi::CString;"},
{"lineNum":"  402","line":""},
{"lineNum":"  403","line":"    pub fn pivot_root<P1: ?Sized + NixPath, P2: ?Sized + NixPath>("},
{"lineNum":"  404","line":"            new_root: &P1, put_old: &P2) -> Result<()> {"},
{"lineNum":"  405","line":"        let res = try!(try!(new_root.with_nix_path(|new_root| {"},
{"lineNum":"  406","line":"            put_old.with_nix_path(|put_old| {"},
{"lineNum":"  407","line":"                unsafe {"},
{"lineNum":"  408","line":"                    syscall(SYSPIVOTROOT, new_root.as_ptr(), put_old.as_ptr())"},
{"lineNum":"  409","line":"                }"},
{"lineNum":"  410","line":"            })"},
{"lineNum":"  411","line":"        })));"},
{"lineNum":"  412","line":""},
{"lineNum":"  413","line":"        if res != 0 {"},
{"lineNum":"  414","line":"            return Err(Error::Sys(Errno::last()));"},
{"lineNum":"  415","line":"        }"},
{"lineNum":"  416","line":""},
{"lineNum":"  417","line":"        Ok(())"},
{"lineNum":"  418","line":"    }"},
{"lineNum":"  419","line":""},
{"lineNum":"  420","line":"    #[inline]"},
{"lineNum":"  421","line":"    #[cfg(feature = \"execvpe\")]"},
{"lineNum":"  422","line":"    pub fn execvpe(filename: &CString, args: &[CString], env: &[CString]) -> Result<()> {"},
{"lineNum":"  423","line":"        use std::ptr;"},
{"lineNum":"  424","line":"        use libc::c_char;"},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"        let mut args_p: Vec<*const c_char> = args.iter().map(|s| s.as_ptr()).collect();"},
{"lineNum":"  427","line":"        args_p.push(ptr::null());"},
{"lineNum":"  428","line":""},
{"lineNum":"  429","line":"        let mut env_p: Vec<*const c_char> = env.iter().map(|s| s.as_ptr()).collect();"},
{"lineNum":"  430","line":"        env_p.push(ptr::null());"},
{"lineNum":"  431","line":""},
{"lineNum":"  432","line":"        unsafe {"},
{"lineNum":"  433","line":"            super::ffi::execvpe(filename.as_ptr(), args_p.as_ptr(), env_p.as_ptr())"},
{"lineNum":"  434","line":"        };"},
{"lineNum":"  435","line":""},
{"lineNum":"  436","line":"        Err(Error::Sys(Errno::last()))"},
{"lineNum":"  437","line":"    }"},
{"lineNum":"  438","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test_server-9ef2987148640087", "date" : "2016-02-17 13:22:50", "instrumented" : 33, "covered" : 22,};
var merged_data = [];
