var data = {lines:[
{"lineNum":"    1","line":"use {sys, Evented, EventSet, PollOpt, Selector, Token};"},
{"lineNum":"    2","line":"use util::BoundedQueue;"},
{"lineNum":"    3","line":"use std::{fmt, cmp, io, error, any};"},
{"lineNum":"    4","line":"use std::sync::Arc;"},
{"lineNum":"    5","line":"use std::sync::atomic::AtomicIsize;","class":"lineCov","hits":"1","order":"1590",},
{"lineNum":"    6","line":"use std::sync::atomic::Ordering::Relaxed;"},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"const SLEEP: isize = -1;"},
{"lineNum":"    9","line":"const CLOSED: isize = -2;"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"/// Send notifications to the event loop, waking it up if necessary. If the"},
{"lineNum":"   12","line":"/// event loop is not currently sleeping, avoid using an OS wake-up strategy"},
{"lineNum":"   13","line":"/// (eventfd, pipe, ...). Backed by a pre-allocated lock free MPMC queue."},
{"lineNum":"   14","line":"///"},
{"lineNum":"   15","line":"/// TODO: Use more efficient wake-up strategy if available"},
{"lineNum":"   16","line":"pub struct Notify<M: Send> {"},
{"lineNum":"   17","line":"    inner: Arc<NotifyInner<M>>"},
{"lineNum":"   18","line":"}"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"impl<M: Send> Notify<M> {"},
{"lineNum":"   21","line":"    #[inline]"},
{"lineNum":"   22","line":"    pub fn with_capacity(capacity: usize) -> io::Result<Notify<M>> {","class":"lineCov","hits":"1","order":"1597",},
{"lineNum":"   23","line":"        Ok(Notify {","class":"lineCov","hits":"1","order":"1598",},
{"lineNum":"   24","line":"            inner: Arc::new(try!(NotifyInner::with_capacity(capacity)))","class":"lineCov","hits":"1","order":"1599",},
{"lineNum":"   25","line":"        })"},
{"lineNum":"   26","line":"    }"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"    #[inline]"},
{"lineNum":"   29","line":"    pub fn check(&self, max: usize, will_sleep: bool) -> usize {","class":"lineCov","hits":"1","order":"1602",},
{"lineNum":"   30","line":"        self.inner.check(max, will_sleep)","class":"lineCov","hits":"1","order":"1604",},
{"lineNum":"   31","line":"    }"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"    #[inline]"},
{"lineNum":"   34","line":"    pub fn notify(&self, value: M) -> Result<(), NotifyError<M>> {"},
{"lineNum":"   35","line":"        self.inner.notify(value)"},
{"lineNum":"   36","line":"    }"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"    #[inline]"},
{"lineNum":"   39","line":"    pub fn poll(&self) -> Option<M> {","class":"lineNoCov","hits":"0",},
{"lineNum":"   40","line":"        self.inner.poll()","class":"lineNoCov","hits":"0",},
{"lineNum":"   41","line":"    }"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"    #[inline]"},
{"lineNum":"   44","line":"    pub fn cleanup(&self) {","class":"lineNoCov","hits":"0",},
{"lineNum":"   45","line":"        self.inner.cleanup();","class":"lineNoCov","hits":"0",},
{"lineNum":"   46","line":"    }"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"    #[inline]"},
{"lineNum":"   49","line":"    pub fn close(&self) {","class":"lineCov","hits":"1","order":"1584",},
{"lineNum":"   50","line":"        self.inner.close();","class":"lineCov","hits":"1","order":"1586",},
{"lineNum":"   51","line":"    }"},
{"lineNum":"   52","line":"}"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"impl<M: Send> Clone for Notify<M> {"},
{"lineNum":"   55","line":"    fn clone(&self) -> Notify<M> {"},
{"lineNum":"   56","line":"        Notify {"},
{"lineNum":"   57","line":"            inner: self.inner.clone()"},
{"lineNum":"   58","line":"        }"},
{"lineNum":"   59","line":"    }"},
{"lineNum":"   60","line":"}"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"impl<M: Send> fmt::Debug for Notify<M> {"},
{"lineNum":"   63","line":"    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {"},
{"lineNum":"   64","line":"        write!(fmt, \"Notify<?>\")"},
{"lineNum":"   65","line":"    }"},
{"lineNum":"   66","line":"}"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"unsafe impl<M: Send> Sync for Notify<M> { }"},
{"lineNum":"   69","line":"unsafe impl<M: Send> Send for Notify<M> { }"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"struct NotifyInner<M> {"},
{"lineNum":"   72","line":"    state: AtomicIsize,"},
{"lineNum":"   73","line":"    queue: BoundedQueue<M>,"},
{"lineNum":"   74","line":"    awaken: sys::Awakener"},
{"lineNum":"   75","line":"}"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"impl<M: Send> NotifyInner<M> {"},
{"lineNum":"   78","line":"    fn with_capacity(capacity: usize) -> io::Result<NotifyInner<M>> {","class":"lineCov","hits":"1","order":"1605",},
{"lineNum":"   79","line":"        Ok(NotifyInner {","class":"lineNoCov","hits":"0",},
{"lineNum":"   80","line":"            state: AtomicIsize::new(0),"},
{"lineNum":"   81","line":"            queue: BoundedQueue::with_capacity(capacity),","class":"lineCov","hits":"1","order":"1606",},
{"lineNum":"   82","line":"            awaken: try!(sys::Awakener::new())","class":"lineCov","hits":"1","order":"1607",},
{"lineNum":"   83","line":"        })"},
{"lineNum":"   84","line":"    }"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"    fn check(&self, max: usize, will_sleep: bool) -> usize {","class":"lineCov","hits":"1","order":"1611",},
{"lineNum":"   87","line":"        let max = max as isize;","class":"lineCov","hits":"1","order":"1612",},
{"lineNum":"   88","line":"        let mut cur = self.state.load(Relaxed);","class":"lineCov","hits":"1","order":"1613",},
{"lineNum":"   89","line":"        let mut nxt;"},
{"lineNum":"   90","line":"        let mut val;"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"        loop {","class":"lineCov","hits":"1","order":"1614",},
{"lineNum":"   93","line":"            // This should be impossible if close() in only called from the event loop destructor"},
{"lineNum":"   94","line":"            debug_assert!(cur != CLOSED);"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"            // If there are pending messages, then whether or not the event loop"},
{"lineNum":"   97","line":"            // was planning to sleep does not matter - it will not sleep."},
{"lineNum":"   98","line":"            if cur > 0 {","class":"lineCov","hits":"1","order":"1587",},
{"lineNum":"   99","line":"                if max >= cur {","class":"lineNoCov","hits":"0",},
{"lineNum":"  100","line":"                    nxt = 0;","class":"lineNoCov","hits":"0",},
{"lineNum":"  101","line":"                } else {"},
{"lineNum":"  102","line":"                    nxt = cur - max;","class":"lineNoCov","hits":"0",},
{"lineNum":"  103","line":"                }"},
{"lineNum":"  104","line":"            } else {"},
{"lineNum":"  105","line":"                if will_sleep {","class":"lineCov","hits":"1","order":"1591",},
{"lineNum":"  106","line":"                    nxt = SLEEP;","class":"lineCov","hits":"1","order":"1592",},
{"lineNum":"  107","line":"                } else {"},
{"lineNum":"  108","line":"                    nxt = 0;","class":"lineCov","hits":"1","order":"1593",},
{"lineNum":"  109","line":"                }"},
{"lineNum":"  110","line":"            }"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"            val = self.state.compare_and_swap(cur, nxt, Relaxed);","class":"lineCov","hits":"1","order":"1594",},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"            if val == cur {","class":"lineCov","hits":"1","order":"1595",},
{"lineNum":"  115","line":"                break;","class":"lineCov","hits":"1","order":"1596",},
{"lineNum":"  116","line":"            }"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"            cur = val;","class":"lineNoCov","hits":"0",},
{"lineNum":"  119","line":"        }"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"        if cur < 0 {","class":"lineCov","hits":"1","order":"1600",},
{"lineNum":"  122","line":"            0","class":"lineCov","hits":"1","order":"1601",},
{"lineNum":"  123","line":"        } else {"},
{"lineNum":"  124","line":"            cmp::min(cur, max) as usize","class":"lineCov","hits":"1","order":"1603",},
{"lineNum":"  125","line":"        }"},
{"lineNum":"  126","line":"    }"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"    fn poll(&self) -> Option<M> {","class":"lineNoCov","hits":"0",},
{"lineNum":"  129","line":"        self.queue.pop()","class":"lineNoCov","hits":"0",},
{"lineNum":"  130","line":"    }"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"    fn notify(&self, value: M) -> Result<(), NotifyError<M>> {"},
{"lineNum":"  133","line":"        let mut cur = self.state.load(Relaxed);"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"        if cur == CLOSED {"},
{"lineNum":"  136","line":"            // The receiving end has already hung up"},
{"lineNum":"  137","line":"            return Err(NotifyError::Closed(Some(value)));"},
{"lineNum":"  138","line":"        }"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"        // First, push the message onto the queue"},
{"lineNum":"  141","line":"        if let Err(value) = self.queue.push(value) {"},
{"lineNum":"  142","line":"            return Err(NotifyError::Full(value));"},
{"lineNum":"  143","line":"        }"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"        let mut nxt;"},
{"lineNum":"  146","line":"        let mut val;"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"        loop {"},
{"lineNum":"  149","line":"            nxt = match cur {"},
{"lineNum":"  150","line":"                CLOSED => {"},
{"lineNum":"  151","line":"                    // The receiving end has hung up, and we cannot reliably get our message back"},
{"lineNum":"  152","line":"                    // We poll 1 message from the queue to make sure that no message is stuck"},
{"lineNum":"  153","line":"                    let _ = self.queue.pop();"},
{"lineNum":"  154","line":"                    return Err(NotifyError::Closed(None));"},
{"lineNum":"  155","line":"                }"},
{"lineNum":"  156","line":"                SLEEP => { 1 }"},
{"lineNum":"  157","line":"                _ => { cur + 1 }"},
{"lineNum":"  158","line":"            };"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"            val = self.state.compare_and_swap(cur, nxt, Relaxed);"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"            if val == cur {"},
{"lineNum":"  163","line":"                break;"},
{"lineNum":"  164","line":"            }"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"            cur = val;"},
{"lineNum":"  167","line":"        }"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"        if cur == SLEEP {"},
{"lineNum":"  170","line":"            if let Err(e) = self.awaken.wakeup() {"},
{"lineNum":"  171","line":"                return Err(NotifyError::Io(e));"},
{"lineNum":"  172","line":"            }"},
{"lineNum":"  173","line":"        }"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"        Ok(())"},
{"lineNum":"  176","line":"    }"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"    fn close(&self) {","class":"lineCov","hits":"1","order":"1608",},
{"lineNum":"  179","line":"        self.state.swap(CLOSED, Relaxed);","class":"lineCov","hits":"1","order":"1609",},
{"lineNum":"  180","line":"        while let Some(m) = self.queue.pop() {","class":"lineCov","hits":"1","order":"1610",},
{"lineNum":"  181","line":"            drop(m);","class":"lineNoCov","hits":"0",},
{"lineNum":"  182","line":"        }"},
{"lineNum":"  183","line":"    }"},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"    fn cleanup(&self) {","class":"lineNoCov","hits":"0",},
{"lineNum":"  186","line":"        self.awaken.cleanup();","class":"lineNoCov","hits":"0",},
{"lineNum":"  187","line":"    }"},
{"lineNum":"  188","line":"}"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"impl<M: Send> Evented for Notify<M> {"},
{"lineNum":"  191","line":"    fn register(&self, selector: &mut Selector, token: Token, interest: EventSet, opts: PollOpt) -> io::Result<()> {","class":"lineCov","hits":"1","order":"1585",},
{"lineNum":"  192","line":"        assert!(opts.is_edge(), \"awakener can only be registered using edge-triggered events\");","class":"lineCov","hits":"1","order":"1588",},
{"lineNum":"  193","line":"        self.inner.awaken.register(selector, token, interest, opts)","class":"lineCov","hits":"1","order":"1589",},
{"lineNum":"  194","line":"    }"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"    fn reregister(&self, _: &mut Selector, _: Token, _: EventSet, _: PollOpt) -> io::Result<()> {"},
{"lineNum":"  197","line":"        panic!(\"awakener is never reregistered\");"},
{"lineNum":"  198","line":"    }"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"    fn deregister(&self, _: &mut Selector) -> io::Result<()> {"},
{"lineNum":"  201","line":"        panic!(\"awakener is never deregistered\");"},
{"lineNum":"  202","line":"    }"},
{"lineNum":"  203","line":"}"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"pub enum NotifyError<T> {"},
{"lineNum":"  206","line":"    Io(io::Error),"},
{"lineNum":"  207","line":"    Full(T),"},
{"lineNum":"  208","line":"    Closed(Option<T>),"},
{"lineNum":"  209","line":"}"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"impl<M> fmt::Debug for NotifyError<M> {"},
{"lineNum":"  212","line":"    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {"},
{"lineNum":"  213","line":"        match *self {"},
{"lineNum":"  214","line":"            NotifyError::Io(ref e) => {"},
{"lineNum":"  215","line":"                write!(fmt, \"NotifyError::Io({:?})\", e)"},
{"lineNum":"  216","line":"            }"},
{"lineNum":"  217","line":"            NotifyError::Full(..) => {"},
{"lineNum":"  218","line":"                write!(fmt, \"NotifyError::Full(..)\")"},
{"lineNum":"  219","line":"            }"},
{"lineNum":"  220","line":"            NotifyError::Closed(..) => {"},
{"lineNum":"  221","line":"                write!(fmt, \"NotifyError::Closed(..)\")"},
{"lineNum":"  222","line":"            }"},
{"lineNum":"  223","line":"        }"},
{"lineNum":"  224","line":"    }"},
{"lineNum":"  225","line":"}"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"impl<M> fmt::Display for NotifyError<M> {"},
{"lineNum":"  228","line":"    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {"},
{"lineNum":"  229","line":"        match *self {"},
{"lineNum":"  230","line":"            NotifyError::Io(ref e) => {"},
{"lineNum":"  231","line":"                write!(fmt, \"IO error: {}\", e)"},
{"lineNum":"  232","line":"            }"},
{"lineNum":"  233","line":"            NotifyError::Full(..) => write!(fmt, \"Full\"),"},
{"lineNum":"  234","line":"            NotifyError::Closed(..) => write!(fmt, \"Closed\")"},
{"lineNum":"  235","line":"        }"},
{"lineNum":"  236","line":"    }"},
{"lineNum":"  237","line":"}"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"impl<M: any::Any> error::Error for NotifyError<M> {"},
{"lineNum":"  240","line":"    fn description(&self) -> &str {"},
{"lineNum":"  241","line":"        match *self {"},
{"lineNum":"  242","line":"            NotifyError::Io(ref err) => err.description(),"},
{"lineNum":"  243","line":"            NotifyError::Closed(..) => \"The receiving end has hung up\","},
{"lineNum":"  244","line":"            NotifyError::Full(..) => \"Queue is full\""},
{"lineNum":"  245","line":"        }"},
{"lineNum":"  246","line":"    }"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"    fn cause(&self) -> Option<&error::Error> {"},
{"lineNum":"  249","line":"        match *self {"},
{"lineNum":"  250","line":"            NotifyError::Io(ref err) => Some(err),"},
{"lineNum":"  251","line":"            _ => None"},
{"lineNum":"  252","line":"        }"},
{"lineNum":"  253","line":"    }"},
{"lineNum":"  254","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test_server-9ef2987148640087", "date" : "2016-02-17 13:22:50", "instrumented" : 45, "covered" : 31,};
var merged_data = [];
