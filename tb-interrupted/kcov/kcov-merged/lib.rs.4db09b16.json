var data = {lines:[
{"lineNum":"    1","line":"//! Rust friendly bindings to the various *nix system functions."},
{"lineNum":"    2","line":"//!"},
{"lineNum":"    3","line":"//! Modules are structured according to the C header file that they would be"},
{"lineNum":"    4","line":"//! defined in."},
{"lineNum":"    5","line":"#![crate_name = \"nix\"]"},
{"lineNum":"    6","line":"#![cfg(unix)]"},
{"lineNum":"    7","line":"#![allow(non_camel_case_types)]"},
{"lineNum":"    8","line":"// latest bitflags triggers a rustc bug with cross-crate macro expansions causing dead_code"},
{"lineNum":"    9","line":"// warnings even though the macro expands into something with allow(dead_code)"},
{"lineNum":"   10","line":"#![allow(dead_code)]"},
{"lineNum":"   11","line":"#![deny(warnings)]"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#[macro_use]"},
{"lineNum":"   14","line":"extern crate bitflags;"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"extern crate libc;"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"#[cfg(test)]"},
{"lineNum":"   19","line":"extern crate nix_test as nixtest;"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"// Re-export some libc constants"},
{"lineNum":"   22","line":"pub use libc::{c_int, c_void};"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"pub mod errno;"},
{"lineNum":"   25","line":"pub mod features;"},
{"lineNum":"   26","line":"pub mod fcntl;"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"#[cfg(any(target_os = \"linux\", target_os = \"android\"))]"},
{"lineNum":"   29","line":"pub mod mount;"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"#[cfg(any(target_os = \"linux\"))]"},
{"lineNum":"   32","line":"pub mod mqueue;"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"#[cfg(any(target_os = \"linux\", target_os = \"android\"))]"},
{"lineNum":"   35","line":"pub mod sched;"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"pub mod sys;"},
{"lineNum":"   38","line":"pub mod unistd;"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"/*"},
{"lineNum":"   41","line":" *"},
{"lineNum":"   42","line":" * ===== Result / Error ====="},
{"lineNum":"   43","line":" *"},
{"lineNum":"   44","line":" */"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"use libc::{c_char, PATH_MAX};"},
{"lineNum":"   47","line":"use std::{ptr, result};"},
{"lineNum":"   48","line":"use std::ffi::CStr;"},
{"lineNum":"   49","line":"use std::path::{Path, PathBuf};"},
{"lineNum":"   50","line":"use std::os::unix::ffi::OsStrExt;"},
{"lineNum":"   51","line":"use std::io;"},
{"lineNum":"   52","line":"use std::fmt;"},
{"lineNum":"   53","line":"use std::error;"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"pub type Result<T> = result::Result<T, Error>;"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"#[derive(Clone, Copy, Debug, PartialEq)]"},
{"lineNum":"   58","line":"pub enum Error {"},
{"lineNum":"   59","line":"    Sys(errno::Errno),"},
{"lineNum":"   60","line":"    InvalidPath,"},
{"lineNum":"   61","line":"}"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"impl Error {"},
{"lineNum":"   64","line":"    pub fn from_errno(errno: errno::Errno) -> Error {"},
{"lineNum":"   65","line":"        Error::Sys(errno)"},
{"lineNum":"   66","line":"    }"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"    pub fn last() -> Error {"},
{"lineNum":"   69","line":"        Error::Sys(errno::Errno::last())"},
{"lineNum":"   70","line":"    }"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"    pub fn invalid_argument() -> Error {"},
{"lineNum":"   73","line":"        Error::Sys(errno::EINVAL)"},
{"lineNum":"   74","line":"    }"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"    pub fn errno(&self) -> errno::Errno {","class":"lineNoCov","hits":"0",},
{"lineNum":"   77","line":"        match *self {","class":"lineNoCov","hits":"0",},
{"lineNum":"   78","line":"            Error::Sys(errno) => errno,"},
{"lineNum":"   79","line":"            Error::InvalidPath => errno::Errno::EINVAL,"},
{"lineNum":"   80","line":"        }"},
{"lineNum":"   81","line":"    }","class":"lineNoCov","hits":"0",},
{"lineNum":"   82","line":"}"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"impl From<errno::Errno> for Error {"},
{"lineNum":"   85","line":"    fn from(errno: errno::Errno) -> Error { Error::from_errno(errno) }"},
{"lineNum":"   86","line":"}"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"impl error::Error for Error {"},
{"lineNum":"   89","line":"    fn description(&self) -> &str {"},
{"lineNum":"   90","line":"        match self {"},
{"lineNum":"   91","line":"            &Error::InvalidPath => \"Invalid path\","},
{"lineNum":"   92","line":"            &Error::Sys(ref errno) => errno.desc(),"},
{"lineNum":"   93","line":"        }"},
{"lineNum":"   94","line":"    }"},
{"lineNum":"   95","line":"}"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"impl fmt::Display for Error {"},
{"lineNum":"   98","line":"    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"},
{"lineNum":"   99","line":"        match self {"},
{"lineNum":"  100","line":"            &Error::InvalidPath => write!(f, \"Invalid path\"),"},
{"lineNum":"  101","line":"            &Error::Sys(errno) => write!(f, \"{:?}: {}\", errno, errno.desc()),"},
{"lineNum":"  102","line":"        }"},
{"lineNum":"  103","line":"    }"},
{"lineNum":"  104","line":"}"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"impl From<Error> for io::Error {"},
{"lineNum":"  107","line":"    fn from(err: Error) -> Self {"},
{"lineNum":"  108","line":"        match err {"},
{"lineNum":"  109","line":"            Error::InvalidPath => io::Error::new(io::ErrorKind::InvalidInput, err),"},
{"lineNum":"  110","line":"            Error::Sys(errno) => io::Error::from_raw_os_error(errno as i32),"},
{"lineNum":"  111","line":"        }"},
{"lineNum":"  112","line":"    }"},
{"lineNum":"  113","line":"}"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"pub trait NixPath {"},
{"lineNum":"  116","line":"    fn len(&self) -> usize;"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"    fn with_nix_path<T, F>(&self, f: F) -> Result<T>"},
{"lineNum":"  119","line":"        where F: FnOnce(&CStr) -> T;"},
{"lineNum":"  120","line":"}"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"impl NixPath for [u8] {"},
{"lineNum":"  123","line":"    fn len(&self) -> usize {"},
{"lineNum":"  124","line":"        self.len()"},
{"lineNum":"  125","line":"    }"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"    fn with_nix_path<T, F>(&self, f: F) -> Result<T>"},
{"lineNum":"  128","line":"            where F: FnOnce(&CStr) -> T {"},
{"lineNum":"  129","line":"        let mut buf = [0u8; PATH_MAX as usize];"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"        if self.len() >= PATH_MAX as usize {"},
{"lineNum":"  132","line":"            return Err(Error::InvalidPath);"},
{"lineNum":"  133","line":"        }"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"        match self.iter().position(|b| *b == 0) {"},
{"lineNum":"  136","line":"            Some(_) => Err(Error::InvalidPath),"},
{"lineNum":"  137","line":"            None => {"},
{"lineNum":"  138","line":"                unsafe {"},
{"lineNum":"  139","line":"                    // TODO: Replace with bytes::copy_memory. rust-lang/rust#24028"},
{"lineNum":"  140","line":"                    ptr::copy_nonoverlapping(self.as_ptr(), buf.as_mut_ptr(), self.len());"},
{"lineNum":"  141","line":"                    Ok(f(CStr::from_ptr(buf.as_ptr() as *const c_char)))"},
{"lineNum":"  142","line":"                }"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"            }"},
{"lineNum":"  145","line":"        }"},
{"lineNum":"  146","line":"    }"},
{"lineNum":"  147","line":"}"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"impl NixPath for Path {"},
{"lineNum":"  150","line":"    fn len(&self) -> usize {"},
{"lineNum":"  151","line":"        self.as_os_str().as_bytes().len()"},
{"lineNum":"  152","line":"    }"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"    fn with_nix_path<T, F>(&self, f: F) -> Result<T> where F: FnOnce(&CStr) -> T {"},
{"lineNum":"  155","line":"        self.as_os_str().as_bytes().with_nix_path(f)"},
{"lineNum":"  156","line":"    }"},
{"lineNum":"  157","line":"}"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"impl NixPath for PathBuf {"},
{"lineNum":"  160","line":"    fn len(&self) -> usize {"},
{"lineNum":"  161","line":"        self.as_os_str().as_bytes().len()"},
{"lineNum":"  162","line":"    }"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"    fn with_nix_path<T, F>(&self, f: F) -> Result<T> where F: FnOnce(&CStr) -> T {"},
{"lineNum":"  165","line":"        self.as_os_str().as_bytes().with_nix_path(f)"},
{"lineNum":"  166","line":"    }"},
{"lineNum":"  167","line":"}"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"#[inline]"},
{"lineNum":"  170","line":"pub fn from_ffi(res: libc::c_int) -> Result<()> {","class":"lineCov","hits":"1","order":"1392",},
{"lineNum":"  171","line":"    if res != 0 {","class":"lineCov","hits":"1","order":"1393",},
{"lineNum":"  172","line":"        return Err(Error::Sys(errno::Errno::last()));","class":"lineNoCov","hits":"0",},
{"lineNum":"  173","line":"    }"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"    Ok(())"},
{"lineNum":"  176","line":"}","class":"lineCov","hits":"1","order":"1391",},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test_server-9ef2987148640087", "date" : "2016-02-17 13:22:50", "instrumented" : 7, "covered" : 3,};
var merged_data = [];
