var data = {lines:[
{"lineNum":"    1","line":"use {Error, Result, from_ffi};"},
{"lineNum":"    2","line":"use errno::Errno;"},
{"lineNum":"    3","line":"use libc::c_int;"},
{"lineNum":"    4","line":"use std::os::unix::io::RawFd;"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"mod ffi {"},
{"lineNum":"    7","line":"    use libc::{c_int};"},
{"lineNum":"    8","line":"    use super::EpollEvent;"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"    extern {"},
{"lineNum":"   11","line":"        pub fn epoll_create(size: c_int) -> c_int;"},
{"lineNum":"   12","line":"        pub fn epoll_ctl(epfd: c_int, op: c_int, fd: c_int, event: *const EpollEvent) -> c_int;"},
{"lineNum":"   13","line":"        pub fn epoll_wait(epfd: c_int, events: *mut EpollEvent, max_events: c_int, timeout: c_int) -> c_int;"},
{"lineNum":"   14","line":"    }"},
{"lineNum":"   15","line":"}"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"bitflags!("},
{"lineNum":"   18","line":"    #[repr(C)]"},
{"lineNum":"   19","line":"    flags EpollEventKind: u32 {"},
{"lineNum":"   20","line":"        const EPOLLIN = 0x001,"},
{"lineNum":"   21","line":"        const EPOLLPRI = 0x002,"},
{"lineNum":"   22","line":"        const EPOLLOUT = 0x004,"},
{"lineNum":"   23","line":"        const EPOLLRDNORM = 0x040,"},
{"lineNum":"   24","line":"        const EPOLLRDBAND = 0x080,"},
{"lineNum":"   25","line":"        const EPOLLWRNORM = 0x100,"},
{"lineNum":"   26","line":"        const EPOLLWRBAND = 0x200,"},
{"lineNum":"   27","line":"        const EPOLLMSG = 0x400,"},
{"lineNum":"   28","line":"        const EPOLLERR = 0x008,"},
{"lineNum":"   29","line":"        const EPOLLHUP = 0x010,"},
{"lineNum":"   30","line":"        const EPOLLRDHUP = 0x2000,"},
{"lineNum":"   31","line":"        const EPOLLWAKEUP = 1 << 29,"},
{"lineNum":"   32","line":"        const EPOLLONESHOT = 1 << 30,"},
{"lineNum":"   33","line":"        const EPOLLET = 1 << 31"},
{"lineNum":"   34","line":"    }"},
{"lineNum":"   35","line":");"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"#[derive(Clone, Copy)]"},
{"lineNum":"   38","line":"#[repr(C)]"},
{"lineNum":"   39","line":"pub enum EpollOp {"},
{"lineNum":"   40","line":"    EpollCtlAdd = 1,"},
{"lineNum":"   41","line":"    EpollCtlDel = 2,"},
{"lineNum":"   42","line":"    EpollCtlMod = 3"},
{"lineNum":"   43","line":"}"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"#[cfg(not(target_arch = \"x86_64\"))]"},
{"lineNum":"   46","line":"#[derive(Clone, Copy)]"},
{"lineNum":"   47","line":"#[repr(C)]"},
{"lineNum":"   48","line":"pub struct EpollEvent {"},
{"lineNum":"   49","line":"    pub events: EpollEventKind,"},
{"lineNum":"   50","line":"    pub data: u64"},
{"lineNum":"   51","line":"}"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"#[cfg(target_arch = \"x86_64\")]"},
{"lineNum":"   54","line":"#[derive(Clone, Copy)]"},
{"lineNum":"   55","line":"#[repr(C, packed)]"},
{"lineNum":"   56","line":"pub struct EpollEvent {"},
{"lineNum":"   57","line":"    pub events: EpollEventKind,"},
{"lineNum":"   58","line":"    pub data: u64"},
{"lineNum":"   59","line":"}"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]"},
{"lineNum":"   62","line":"#[test]"},
{"lineNum":"   63","line":"fn test_epoll_event_size() {"},
{"lineNum":"   64","line":"    use std::mem::size_of;"},
{"lineNum":"   65","line":"    assert_eq!(size_of::<EpollEvent>(), 12);"},
{"lineNum":"   66","line":"}"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"#[cfg(target_arch = \"arm\")]"},
{"lineNum":"   69","line":"#[test]"},
{"lineNum":"   70","line":"fn test_epoll_event_size() {"},
{"lineNum":"   71","line":"    use std::mem::size_of;"},
{"lineNum":"   72","line":"    assert_eq!(size_of::<EpollEvent>(), 16);"},
{"lineNum":"   73","line":"}"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"#[inline]"},
{"lineNum":"   76","line":"pub fn epoll_create() -> Result<RawFd> {","class":"lineCov","hits":"1","order":"1553",},
{"lineNum":"   77","line":"    let res = unsafe { ffi::epoll_create(1024) };","class":"lineCov","hits":"1","order":"1554",},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"    if res < 0 {","class":"lineCov","hits":"1","order":"1556",},
{"lineNum":"   80","line":"        return Err(Error::Sys(Errno::last()));","class":"lineNoCov","hits":"0",},
{"lineNum":"   81","line":"    }"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"    Ok(res)","class":"lineCov","hits":"1","order":"1557",},
{"lineNum":"   84","line":"}"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"#[inline]"},
{"lineNum":"   87","line":"pub fn epoll_ctl(epfd: RawFd, op: EpollOp, fd: RawFd, event: &EpollEvent) -> Result<()> {","class":"lineCov","hits":"1","order":"1558",},
{"lineNum":"   88","line":"    let res = unsafe { ffi::epoll_ctl(epfd, op as c_int, fd, event as *const EpollEvent) };","class":"lineCov","hits":"1","order":"1559",},
{"lineNum":"   89","line":"    from_ffi(res)","class":"lineCov","hits":"1","order":"1560",},
{"lineNum":"   90","line":"}"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"#[inline]"},
{"lineNum":"   93","line":"pub fn epoll_wait(epfd: RawFd, events: &mut [EpollEvent], timeout_ms: isize) -> Result<usize> {","class":"lineCov","hits":"1","order":"1550",},
{"lineNum":"   94","line":"    let res = unsafe {"},
{"lineNum":"   95","line":"        ffi::epoll_wait(epfd, events.as_mut_ptr(), events.len() as c_int, timeout_ms as c_int)","class":"lineCov","hits":"1","order":"1551",},
{"lineNum":"   96","line":"    };"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"    if res < 0 {","class":"lineCov","hits":"1","order":"1552",},
{"lineNum":"   99","line":"        return Err(Error::Sys(Errno::last()));","class":"lineNoCov","hits":"0",},
{"lineNum":"  100","line":"    }"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"    Ok(res as usize)","class":"lineCov","hits":"1","order":"1555",},
{"lineNum":"  103","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test_server-9ef2987148640087", "date" : "2016-02-17 13:22:50", "instrumented" : 13, "covered" : 11,};
var merged_data = [];
