var data = {lines:[
{"lineNum":"    1","line":"// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT"},
{"lineNum":"    2","line":"// file at the top-level directory of this distribution and at"},
{"lineNum":"    3","line":"// http://rust-lang.org/COPYRIGHT."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or"},
{"lineNum":"    6","line":"// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license"},
{"lineNum":"    7","line":"// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your"},
{"lineNum":"    8","line":"// option. This file may not be copied, modified, or distributed"},
{"lineNum":"    9","line":"// except according to those terms."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"//! Simple time handling."},
{"lineNum":"   12","line":"//!"},
{"lineNum":"   13","line":"//! # Usage"},
{"lineNum":"   14","line":"//!"},
{"lineNum":"   15","line":"//! This crate is [on crates.io](https://crates.io/crates/time) and can be"},
{"lineNum":"   16","line":"//! used by adding `time` to the dependencies in your project\'s `Cargo.toml`."},
{"lineNum":"   17","line":"//!"},
{"lineNum":"   18","line":"//! ```toml"},
{"lineNum":"   19","line":"//! [dependencies]"},
{"lineNum":"   20","line":"//! time = \"0.1\""},
{"lineNum":"   21","line":"//! ```"},
{"lineNum":"   22","line":"//!"},
{"lineNum":"   23","line":"//! And this in your crate root:"},
{"lineNum":"   24","line":"//!"},
{"lineNum":"   25","line":"//! ```rust"},
{"lineNum":"   26","line":"//! extern crate time;"},
{"lineNum":"   27","line":"//! ```"},
{"lineNum":"   28","line":"//!"},
{"lineNum":"   29","line":"//! This crate uses the same syntax for format strings as the [strftime()]"},
{"lineNum":"   30","line":"//! (http://man7.org/linux/man-pages/man3/strftime.3.html) function from the C"},
{"lineNum":"   31","line":"//! standard library."},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","},
{"lineNum":"   34","line":"       html_favicon_url = \"https://www.rust-lang.org/favicon.ico\","},
{"lineNum":"   35","line":"       html_root_url = \"https://doc.rust-lang.org/time/\")]"},
{"lineNum":"   36","line":"#![allow(trivial_numeric_casts)]"},
{"lineNum":"   37","line":"#![cfg_attr(test, deny(warnings))]"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"#[cfg(unix)] extern crate libc;"},
{"lineNum":"   40","line":"#[cfg(windows)] extern crate kernel32;"},
{"lineNum":"   41","line":"#[cfg(windows)] extern crate winapi;"},
{"lineNum":"   42","line":"#[cfg(feature = \"rustc-serialize\")] extern crate rustc_serialize;"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"#[cfg(test)] #[macro_use] extern crate log;"},
{"lineNum":"   45","line":"#[cfg(all(windows, test))] extern crate advapi32;"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"use std::cmp::Ordering;"},
{"lineNum":"   48","line":"use std::error::Error;"},
{"lineNum":"   49","line":"use std::fmt;"},
{"lineNum":"   50","line":"use std::ops::{Add, Sub};"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"pub use duration::Duration;"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"use self::ParseError::{InvalidDay, InvalidDayOfMonth, InvalidDayOfWeek,"},
{"lineNum":"   55","line":"                       InvalidDayOfYear, InvalidFormatSpecifier, InvalidHour,"},
{"lineNum":"   56","line":"                       InvalidMinute, InvalidMonth, InvalidSecond, InvalidTime,"},
{"lineNum":"   57","line":"                       InvalidYear, InvalidZoneOffset, InvalidSecondsSinceEpoch,"},
{"lineNum":"   58","line":"                       MissingFormatConverter, UnexpectedCharacter};"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"pub use parse::strptime;"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"mod display;"},
{"lineNum":"   63","line":"mod duration;"},
{"lineNum":"   64","line":"mod parse;"},
{"lineNum":"   65","line":"mod sys;"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"static NSEC_PER_SEC: i32 = 1_000_000_000;"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"/// A record specifying a time value in seconds and nanoseconds, where"},
{"lineNum":"   70","line":"/// nanoseconds represent the offset from the given second."},
{"lineNum":"   71","line":"///"},
{"lineNum":"   72","line":"/// For example a timespec of 1.2 seconds after the beginning of the epoch would"},
{"lineNum":"   73","line":"/// be represented as {sec: 1, nsec: 200000000}."},
{"lineNum":"   74","line":"#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]"},
{"lineNum":"   75","line":"#[cfg_attr(feature = \"rustc-serialize\", derive(RustcEncodable, RustcDecodable))]"},
{"lineNum":"   76","line":"pub struct Timespec { pub sec: i64, pub nsec: i32 }"},
{"lineNum":"   77","line":"/*"},
{"lineNum":"   78","line":" * Timespec assumes that pre-epoch Timespecs have negative sec and positive"},
{"lineNum":"   79","line":" * nsec fields. Darwin\'s and Linux\'s struct timespec functions handle pre-"},
{"lineNum":"   80","line":" * epoch timestamps using a \"two steps back, one step forward\" representation,"},
{"lineNum":"   81","line":" * though the man pages do not actually document this. For example, the time"},
{"lineNum":"   82","line":" * -1.2 seconds before the epoch is represented by `Timespec { sec: -2_i64,"},
{"lineNum":"   83","line":" * nsec: 800_000_000 }`."},
{"lineNum":"   84","line":" */"},
{"lineNum":"   85","line":"impl Timespec {"},
{"lineNum":"   86","line":"    pub fn new(sec: i64, nsec: i32) -> Timespec {"},
{"lineNum":"   87","line":"        assert!(nsec >= 0 && nsec < NSEC_PER_SEC);"},
{"lineNum":"   88","line":"        Timespec { sec: sec, nsec: nsec }"},
{"lineNum":"   89","line":"    }"},
{"lineNum":"   90","line":"}"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"impl Add<Duration> for Timespec {"},
{"lineNum":"   93","line":"    type Output = Timespec;"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"    fn add(self, other: Duration) -> Timespec {"},
{"lineNum":"   96","line":"        let d_sec = other.num_seconds();"},
{"lineNum":"   97","line":"        // It is safe to unwrap the nanoseconds, because there cannot be"},
{"lineNum":"   98","line":"        // more than one second left, which fits in i64 and in i32."},
{"lineNum":"   99","line":"        let d_nsec = (other - Duration::seconds(d_sec))"},
{"lineNum":"  100","line":"                     .num_nanoseconds().unwrap() as i32;"},
{"lineNum":"  101","line":"        let mut sec = self.sec + d_sec;"},
{"lineNum":"  102","line":"        let mut nsec = self.nsec + d_nsec;"},
{"lineNum":"  103","line":"        if nsec >= NSEC_PER_SEC {"},
{"lineNum":"  104","line":"            nsec -= NSEC_PER_SEC;"},
{"lineNum":"  105","line":"            sec += 1;"},
{"lineNum":"  106","line":"        } else if nsec < 0 {"},
{"lineNum":"  107","line":"            nsec += NSEC_PER_SEC;"},
{"lineNum":"  108","line":"            sec -= 1;"},
{"lineNum":"  109","line":"        }"},
{"lineNum":"  110","line":"        Timespec::new(sec, nsec)"},
{"lineNum":"  111","line":"    }"},
{"lineNum":"  112","line":"}"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"impl Sub<Duration> for Timespec {"},
{"lineNum":"  115","line":"    type Output = Timespec;"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"    fn sub(self, other: Duration) -> Timespec {"},
{"lineNum":"  118","line":"        let d_sec = other.num_seconds();"},
{"lineNum":"  119","line":"        // It is safe to unwrap the nanoseconds, because there cannot be"},
{"lineNum":"  120","line":"        // more than one second left, which fits in i64 and in i32."},
{"lineNum":"  121","line":"        let d_nsec = (other - Duration::seconds(d_sec))"},
{"lineNum":"  122","line":"                     .num_nanoseconds().unwrap() as i32;"},
{"lineNum":"  123","line":"        let mut sec = self.sec - d_sec;"},
{"lineNum":"  124","line":"        let mut nsec = self.nsec - d_nsec;"},
{"lineNum":"  125","line":"        if nsec >= NSEC_PER_SEC {"},
{"lineNum":"  126","line":"            nsec -= NSEC_PER_SEC;"},
{"lineNum":"  127","line":"            sec += 1;"},
{"lineNum":"  128","line":"        } else if nsec < 0 {"},
{"lineNum":"  129","line":"            nsec += NSEC_PER_SEC;"},
{"lineNum":"  130","line":"            sec -= 1;"},
{"lineNum":"  131","line":"        }"},
{"lineNum":"  132","line":"        Timespec::new(sec, nsec)"},
{"lineNum":"  133","line":"    }"},
{"lineNum":"  134","line":"}"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"impl Sub<Timespec> for Timespec {"},
{"lineNum":"  137","line":"    type Output = Duration;"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"    fn sub(self, other: Timespec) -> Duration {"},
{"lineNum":"  140","line":"        let sec = self.sec - other.sec;"},
{"lineNum":"  141","line":"        let nsec = self.nsec - other.nsec;"},
{"lineNum":"  142","line":"        Duration::seconds(sec) + Duration::nanoseconds(nsec as i64)"},
{"lineNum":"  143","line":"    }"},
{"lineNum":"  144","line":"}"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"/**"},
{"lineNum":"  147","line":" * Returns the current time as a `timespec` containing the seconds and"},
{"lineNum":"  148","line":" * nanoseconds since 1970-01-01T00:00:00Z."},
{"lineNum":"  149","line":" */"},
{"lineNum":"  150","line":"pub fn get_time() -> Timespec {"},
{"lineNum":"  151","line":"    let (sec, nsec) = sys::get_time();"},
{"lineNum":"  152","line":"    Timespec::new(sec, nsec)"},
{"lineNum":"  153","line":"}"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"/**"},
{"lineNum":"  157","line":" * Returns the current value of a high-resolution performance counter"},
{"lineNum":"  158","line":" * in nanoseconds since an unspecified epoch."},
{"lineNum":"  159","line":" */"},
{"lineNum":"  160","line":"pub fn precise_time_ns() -> u64 {","class":"lineCov","hits":"1","order":"1414",},
{"lineNum":"  161","line":"    sys::get_precise_ns()","class":"lineCov","hits":"1","order":"1415",},
{"lineNum":"  162","line":"}","class":"lineCov","hits":"1","order":"1416",},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"/**"},
{"lineNum":"  166","line":" * Returns the current value of a high-resolution performance counter"},
{"lineNum":"  167","line":" * in seconds since an unspecified epoch."},
{"lineNum":"  168","line":" */"},
{"lineNum":"  169","line":"pub fn precise_time_s() -> f64 {"},
{"lineNum":"  170","line":"    return (precise_time_ns() as f64) / 1000000000.;"},
{"lineNum":"  171","line":"}"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"/// An opaque structure representing a moment in time."},
{"lineNum":"  174","line":"///"},
{"lineNum":"  175","line":"/// The only operation that can be performed on a `PreciseTime` is the"},
{"lineNum":"  176","line":"/// calculation of the `Duration` of time that lies between them."},
{"lineNum":"  177","line":"///"},
{"lineNum":"  178","line":"/// # Examples"},
{"lineNum":"  179","line":"///"},
{"lineNum":"  180","line":"/// Repeatedly call a function for 1 second:"},
{"lineNum":"  181","line":"///"},
{"lineNum":"  182","line":"/// ```rust"},
{"lineNum":"  183","line":"/// use time::{Duration, PreciseTime};"},
{"lineNum":"  184","line":"/// # fn do_some_work() {}"},
{"lineNum":"  185","line":"///"},
{"lineNum":"  186","line":"/// let start = PreciseTime::now();"},
{"lineNum":"  187","line":"///"},
{"lineNum":"  188","line":"/// while start.to(PreciseTime::now()) < Duration::seconds(1) {"},
{"lineNum":"  189","line":"///     do_some_work();"},
{"lineNum":"  190","line":"/// }"},
{"lineNum":"  191","line":"/// ```"},
{"lineNum":"  192","line":"#[derive(Copy, Clone)]"},
{"lineNum":"  193","line":"pub struct PreciseTime(u64);"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"impl PreciseTime {"},
{"lineNum":"  196","line":"    /// Returns a `PreciseTime` representing the current moment in time."},
{"lineNum":"  197","line":"    pub fn now() -> PreciseTime {"},
{"lineNum":"  198","line":"        PreciseTime(precise_time_ns())"},
{"lineNum":"  199","line":"    }"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"    /// Returns a `Duration` representing the span of time from the value of"},
{"lineNum":"  202","line":"    /// `self` to the value of `later`."},
{"lineNum":"  203","line":"    ///"},
{"lineNum":"  204","line":"    /// # Notes"},
{"lineNum":"  205","line":"    ///"},
{"lineNum":"  206","line":"    /// If `later` represents a time before `self`, the result of this method"},
{"lineNum":"  207","line":"    /// is unspecified."},
{"lineNum":"  208","line":"    ///"},
{"lineNum":"  209","line":"    /// If `later` represents a time more than 293 years after `self`, the"},
{"lineNum":"  210","line":"    /// result of this method is unspecified."},
{"lineNum":"  211","line":"    #[inline]"},
{"lineNum":"  212","line":"    pub fn to(&self, later: PreciseTime) -> Duration {"},
{"lineNum":"  213","line":"        // NB: even if later is less than self due to overflow, this will work"},
{"lineNum":"  214","line":"        // since the subtraction will underflow properly as well."},
{"lineNum":"  215","line":"        //"},
{"lineNum":"  216","line":"        // We could deal with the overflow when casting to an i64, but all that"},
{"lineNum":"  217","line":"        // gets us is the ability to handle intervals of up to 584 years, which"},
{"lineNum":"  218","line":"        // seems not very useful :)"},
{"lineNum":"  219","line":"        Duration::nanoseconds((later.0 - self.0) as i64)"},
{"lineNum":"  220","line":"    }"},
{"lineNum":"  221","line":"}"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"/// A structure representing a moment in time."},
{"lineNum":"  224","line":"///"},
{"lineNum":"  225","line":"/// `SteadyTime`s are generated by a \"steady\" clock, that is, a clock which"},
{"lineNum":"  226","line":"/// never experiences discontinuous jumps and for which time always flows at"},
{"lineNum":"  227","line":"/// the same rate."},
{"lineNum":"  228","line":"///"},
{"lineNum":"  229","line":"/// # Examples"},
{"lineNum":"  230","line":"///"},
{"lineNum":"  231","line":"/// Repeatedly call a function for 1 second:"},
{"lineNum":"  232","line":"///"},
{"lineNum":"  233","line":"/// ```rust"},
{"lineNum":"  234","line":"/// # use time::{Duration, SteadyTime};"},
{"lineNum":"  235","line":"/// # fn do_some_work() {}"},
{"lineNum":"  236","line":"/// let start = SteadyTime::now();"},
{"lineNum":"  237","line":"///"},
{"lineNum":"  238","line":"/// while SteadyTime::now() - start < Duration::seconds(1) {"},
{"lineNum":"  239","line":"///     do_some_work();"},
{"lineNum":"  240","line":"/// }"},
{"lineNum":"  241","line":"/// ```"},
{"lineNum":"  242","line":"#[derive(Clone, Copy, PartialOrd, Ord, PartialEq, Eq, Debug)]"},
{"lineNum":"  243","line":"pub struct SteadyTime(sys::SteadyTime);"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"impl SteadyTime {"},
{"lineNum":"  246","line":"    /// Returns a `SteadyTime` representing the current moment in time."},
{"lineNum":"  247","line":"    pub fn now() -> SteadyTime {"},
{"lineNum":"  248","line":"        SteadyTime(sys::SteadyTime::now())"},
{"lineNum":"  249","line":"    }"},
{"lineNum":"  250","line":"}"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"impl fmt::Display for SteadyTime {"},
{"lineNum":"  253","line":"    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {"},
{"lineNum":"  254","line":"        // TODO: needs a display customization"},
{"lineNum":"  255","line":"        fmt::Debug::fmt(self, fmt)"},
{"lineNum":"  256","line":"    }"},
{"lineNum":"  257","line":"}"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"impl Sub for SteadyTime {"},
{"lineNum":"  260","line":"    type Output = Duration;"},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"    fn sub(self, other: SteadyTime) -> Duration {"},
{"lineNum":"  263","line":"        self.0 - other.0"},
{"lineNum":"  264","line":"    }"},
{"lineNum":"  265","line":"}"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"impl Sub<Duration> for SteadyTime {"},
{"lineNum":"  268","line":"    type Output = SteadyTime;"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"    fn sub(self, other: Duration) -> SteadyTime {"},
{"lineNum":"  271","line":"        SteadyTime(self.0 - other)"},
{"lineNum":"  272","line":"    }"},
{"lineNum":"  273","line":"}"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"impl Add<Duration> for SteadyTime {"},
{"lineNum":"  276","line":"    type Output = SteadyTime;"},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"    fn add(self, other: Duration) -> SteadyTime {"},
{"lineNum":"  279","line":"        SteadyTime(self.0 + other)"},
{"lineNum":"  280","line":"    }"},
{"lineNum":"  281","line":"}"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"#[cfg(not(windows))]"},
{"lineNum":"  284","line":"pub fn tzset() {"},
{"lineNum":"  285","line":"    extern { fn tzset(); }"},
{"lineNum":"  286","line":"    unsafe { tzset() }"},
{"lineNum":"  287","line":"}"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"#[cfg(windows)]"},
{"lineNum":"  291","line":"pub fn tzset() {}"},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"/// Holds a calendar date and time broken down into its components (year, month,"},
{"lineNum":"  294","line":"/// day, and so on), also called a broken-down time value."},
{"lineNum":"  295","line":"// FIXME: use c_int instead of i32?"},
{"lineNum":"  296","line":"#[repr(C)]"},
{"lineNum":"  297","line":"#[derive(Copy, Clone, PartialEq, Eq, Debug, Hash)]"},
{"lineNum":"  298","line":"#[cfg_attr(feature = \"rustc-serialize\", derive(RustcEncodable, RustcDecodable))]"},
{"lineNum":"  299","line":"pub struct Tm {"},
{"lineNum":"  300","line":"    /// Seconds after the minute - [0, 60]"},
{"lineNum":"  301","line":"    pub tm_sec: i32,"},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"    /// Minutes after the hour - [0, 59]"},
{"lineNum":"  304","line":"    pub tm_min: i32,"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"    /// Hours after midnight - [0, 23]"},
{"lineNum":"  307","line":"    pub tm_hour: i32,"},
{"lineNum":"  308","line":""},
{"lineNum":"  309","line":"    /// Day of the month - [1, 31]"},
{"lineNum":"  310","line":"    pub tm_mday: i32,"},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"    /// Months since January - [0, 11]"},
{"lineNum":"  313","line":"    pub tm_mon: i32,"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"    /// Years since 1900"},
{"lineNum":"  316","line":"    pub tm_year: i32,"},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"    /// Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday."},
{"lineNum":"  319","line":"    pub tm_wday: i32,"},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"    /// Days since January 1 - [0, 365]"},
{"lineNum":"  322","line":"    pub tm_yday: i32,"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"    /// Daylight Saving Time flag."},
{"lineNum":"  325","line":"    ///"},
{"lineNum":"  326","line":"    /// This value is positive if Daylight Saving Time is in effect, zero if"},
{"lineNum":"  327","line":"    /// Daylight Saving Time is not in effect, and negative if this information"},
{"lineNum":"  328","line":"    /// is not available."},
{"lineNum":"  329","line":"    pub tm_isdst: i32,"},
{"lineNum":"  330","line":""},
{"lineNum":"  331","line":"    /// Identifies the time zone that was used to compute this broken-down time"},
{"lineNum":"  332","line":"    /// value, including any adjustment for Daylight Saving Time. This is the"},
{"lineNum":"  333","line":"    /// number of seconds east of UTC. For example, for U.S. Pacific Daylight"},
{"lineNum":"  334","line":"    /// Time, the value is -7*60*60 = -25200."},
{"lineNum":"  335","line":"    pub tm_utcoff: i32,"},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"    /// Nanoseconds after the second - [0, 10<sup>9</sup> - 1]"},
{"lineNum":"  338","line":"    pub tm_nsec: i32,"},
{"lineNum":"  339","line":"}"},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"impl Add<Duration> for Tm {"},
{"lineNum":"  342","line":"    type Output = Tm;"},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"    /// The resulting Tm is in UTC."},
{"lineNum":"  345","line":"    // FIXME:  The resulting Tm should have the same timezone as `self`;"},
{"lineNum":"  346","line":"    // however, we need a function such as `at_tm(clock: Timespec, offset: i32)`"},
{"lineNum":"  347","line":"    // for this."},
{"lineNum":"  348","line":"    fn add(self, other: Duration) -> Tm {"},
{"lineNum":"  349","line":"        at_utc(self.to_timespec() + other)"},
{"lineNum":"  350","line":"    }"},
{"lineNum":"  351","line":"}"},
{"lineNum":"  352","line":""},
{"lineNum":"  353","line":"impl Sub<Duration> for Tm {"},
{"lineNum":"  354","line":"    type Output = Tm;"},
{"lineNum":"  355","line":""},
{"lineNum":"  356","line":"    /// The resulting Tm is in UTC."},
{"lineNum":"  357","line":"    // FIXME:  The resulting Tm should have the same timezone as `self`;"},
{"lineNum":"  358","line":"    // however, we need a function such as `at_tm(clock: Timespec, offset: i32)`"},
{"lineNum":"  359","line":"    // for this."},
{"lineNum":"  360","line":"    fn sub(self, other: Duration) -> Tm {"},
{"lineNum":"  361","line":"        at_utc(self.to_timespec() - other)"},
{"lineNum":"  362","line":"    }"},
{"lineNum":"  363","line":"}"},
{"lineNum":"  364","line":""},
{"lineNum":"  365","line":"impl Sub<Tm> for Tm {"},
{"lineNum":"  366","line":"    type Output = Duration;"},
{"lineNum":"  367","line":""},
{"lineNum":"  368","line":"    fn sub(self, other: Tm) -> Duration {"},
{"lineNum":"  369","line":"        self.to_timespec() - other.to_timespec()"},
{"lineNum":"  370","line":"    }"},
{"lineNum":"  371","line":"}"},
{"lineNum":"  372","line":""},
{"lineNum":"  373","line":"impl PartialOrd for Tm {"},
{"lineNum":"  374","line":"    fn partial_cmp(&self, other: &Tm) -> Option<Ordering> {"},
{"lineNum":"  375","line":"        self.to_timespec().partial_cmp(&other.to_timespec())"},
{"lineNum":"  376","line":"    }"},
{"lineNum":"  377","line":"}"},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"impl Ord for Tm {"},
{"lineNum":"  380","line":"    fn cmp(&self, other: &Tm) -> Ordering {"},
{"lineNum":"  381","line":"        self.to_timespec().cmp(&other.to_timespec())"},
{"lineNum":"  382","line":"    }"},
{"lineNum":"  383","line":"}"},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"pub fn empty_tm() -> Tm {"},
{"lineNum":"  386","line":"    Tm {"},
{"lineNum":"  387","line":"        tm_sec: 0,"},
{"lineNum":"  388","line":"        tm_min: 0,"},
{"lineNum":"  389","line":"        tm_hour: 0,"},
{"lineNum":"  390","line":"        tm_mday: 0,"},
{"lineNum":"  391","line":"        tm_mon: 0,"},
{"lineNum":"  392","line":"        tm_year: 0,"},
{"lineNum":"  393","line":"        tm_wday: 0,"},
{"lineNum":"  394","line":"        tm_yday: 0,"},
{"lineNum":"  395","line":"        tm_isdst: 0,"},
{"lineNum":"  396","line":"        tm_utcoff: 0,"},
{"lineNum":"  397","line":"        tm_nsec: 0,"},
{"lineNum":"  398","line":"    }"},
{"lineNum":"  399","line":"}"},
{"lineNum":"  400","line":""},
{"lineNum":"  401","line":"/// Returns the specified time in UTC"},
{"lineNum":"  402","line":"pub fn at_utc(clock: Timespec) -> Tm {"},
{"lineNum":"  403","line":"    let Timespec { sec, nsec } = clock;"},
{"lineNum":"  404","line":"    let mut tm = empty_tm();"},
{"lineNum":"  405","line":"    sys::time_to_utc_tm(sec, &mut tm);"},
{"lineNum":"  406","line":"    tm.tm_nsec = nsec;"},
{"lineNum":"  407","line":"    tm"},
{"lineNum":"  408","line":"}"},
{"lineNum":"  409","line":""},
{"lineNum":"  410","line":"/// Returns the current time in UTC"},
{"lineNum":"  411","line":"pub fn now_utc() -> Tm {"},
{"lineNum":"  412","line":"    at_utc(get_time())"},
{"lineNum":"  413","line":"}"},
{"lineNum":"  414","line":""},
{"lineNum":"  415","line":"/// Returns the specified time in the local timezone"},
{"lineNum":"  416","line":"pub fn at(clock: Timespec) -> Tm {"},
{"lineNum":"  417","line":"    let Timespec { sec, nsec } = clock;"},
{"lineNum":"  418","line":"    let mut tm = empty_tm();"},
{"lineNum":"  419","line":"    sys::time_to_local_tm(sec, &mut tm);"},
{"lineNum":"  420","line":"    tm.tm_nsec = nsec;"},
{"lineNum":"  421","line":"    tm"},
{"lineNum":"  422","line":"}"},
{"lineNum":"  423","line":""},
{"lineNum":"  424","line":"/// Returns the current time in the local timezone"},
{"lineNum":"  425","line":"pub fn now() -> Tm {"},
{"lineNum":"  426","line":"    at(get_time())"},
{"lineNum":"  427","line":"}"},
{"lineNum":"  428","line":""},
{"lineNum":"  429","line":"impl Tm {"},
{"lineNum":"  430","line":"    /// Convert time to the seconds from January 1, 1970"},
{"lineNum":"  431","line":"    pub fn to_timespec(&self) -> Timespec {"},
{"lineNum":"  432","line":"        let sec = match self.tm_utcoff {"},
{"lineNum":"  433","line":"            0 => sys::utc_tm_to_time(self),"},
{"lineNum":"  434","line":"            _ => sys::local_tm_to_time(self)"},
{"lineNum":"  435","line":"        };"},
{"lineNum":"  436","line":""},
{"lineNum":"  437","line":"        Timespec::new(sec, self.tm_nsec)"},
{"lineNum":"  438","line":"    }"},
{"lineNum":"  439","line":""},
{"lineNum":"  440","line":"    /// Convert time to the local timezone"},
{"lineNum":"  441","line":"    pub fn to_local(&self) -> Tm {"},
{"lineNum":"  442","line":"        at(self.to_timespec())"},
{"lineNum":"  443","line":"    }"},
{"lineNum":"  444","line":""},
{"lineNum":"  445","line":"    /// Convert time to the UTC"},
{"lineNum":"  446","line":"    pub fn to_utc(&self) -> Tm {"},
{"lineNum":"  447","line":"        match self.tm_utcoff {"},
{"lineNum":"  448","line":"            0 => *self,"},
{"lineNum":"  449","line":"            _ => at_utc(self.to_timespec())"},
{"lineNum":"  450","line":"        }"},
{"lineNum":"  451","line":"    }"},
{"lineNum":"  452","line":""},
{"lineNum":"  453","line":"    /**"},
{"lineNum":"  454","line":"     * Returns a TmFmt that outputs according to the `asctime` format in ISO"},
{"lineNum":"  455","line":"     * C, in the local timezone."},
{"lineNum":"  456","line":"     *"},
{"lineNum":"  457","line":"     * Example: \"Thu Jan  1 00:00:00 1970\""},
{"lineNum":"  458","line":"     */"},
{"lineNum":"  459","line":"    pub fn ctime(&self) -> TmFmt {"},
{"lineNum":"  460","line":"        TmFmt {"},
{"lineNum":"  461","line":"            tm: self,"},
{"lineNum":"  462","line":"            format: Fmt::Ctime,"},
{"lineNum":"  463","line":"        }"},
{"lineNum":"  464","line":"    }"},
{"lineNum":"  465","line":""},
{"lineNum":"  466","line":"    /**"},
{"lineNum":"  467","line":"     * Returns a TmFmt that outputs according to the `asctime` format in ISO"},
{"lineNum":"  468","line":"     * C."},
{"lineNum":"  469","line":"     *"},
{"lineNum":"  470","line":"     * Example: \"Thu Jan  1 00:00:00 1970\""},
{"lineNum":"  471","line":"     */"},
{"lineNum":"  472","line":"    pub fn asctime(&self) -> TmFmt {"},
{"lineNum":"  473","line":"        TmFmt {"},
{"lineNum":"  474","line":"            tm: self,"},
{"lineNum":"  475","line":"            format: Fmt::Str(\"%c\"),"},
{"lineNum":"  476","line":"        }"},
{"lineNum":"  477","line":"    }"},
{"lineNum":"  478","line":""},
{"lineNum":"  479","line":"    /// Formats the time according to the format string."},
{"lineNum":"  480","line":"    pub fn strftime<\'a>(&\'a self, format: &\'a str) -> Result<TmFmt<\'a>, ParseError> {"},
{"lineNum":"  481","line":"        validate_format(TmFmt {"},
{"lineNum":"  482","line":"            tm: self,"},
{"lineNum":"  483","line":"            format: Fmt::Str(format),"},
{"lineNum":"  484","line":"        })"},
{"lineNum":"  485","line":"    }"},
{"lineNum":"  486","line":""},
{"lineNum":"  487","line":"    /**"},
{"lineNum":"  488","line":"     * Returns a TmFmt that outputs according to RFC 822."},
{"lineNum":"  489","line":"     *"},
{"lineNum":"  490","line":"     * local: \"Thu, 22 Mar 2012 07:53:18 PST\""},
{"lineNum":"  491","line":"     * utc:   \"Thu, 22 Mar 2012 14:53:18 GMT\""},
{"lineNum":"  492","line":"     */"},
{"lineNum":"  493","line":"    pub fn rfc822(&self) -> TmFmt {"},
{"lineNum":"  494","line":"        let fmt = if self.tm_utcoff == 0 {"},
{"lineNum":"  495","line":"            \"%a, %d %b %Y %T GMT\""},
{"lineNum":"  496","line":"        } else {"},
{"lineNum":"  497","line":"            \"%a, %d %b %Y %T %Z\""},
{"lineNum":"  498","line":"        };"},
{"lineNum":"  499","line":"        TmFmt {"},
{"lineNum":"  500","line":"            tm: self,"},
{"lineNum":"  501","line":"            format: Fmt::Str(fmt),"},
{"lineNum":"  502","line":"        }"},
{"lineNum":"  503","line":"    }"},
{"lineNum":"  504","line":""},
{"lineNum":"  505","line":"    /**"},
{"lineNum":"  506","line":"     * Returns a TmFmt that outputs according to RFC 822 with Zulu time."},
{"lineNum":"  507","line":"     *"},
{"lineNum":"  508","line":"     * local: \"Thu, 22 Mar 2012 07:53:18 -0700\""},
{"lineNum":"  509","line":"     * utc:   \"Thu, 22 Mar 2012 14:53:18 -0000\""},
{"lineNum":"  510","line":"     */"},
{"lineNum":"  511","line":"    pub fn rfc822z(&self) -> TmFmt {"},
{"lineNum":"  512","line":"        TmFmt {"},
{"lineNum":"  513","line":"            tm: self,"},
{"lineNum":"  514","line":"            format: Fmt::Str(\"%a, %d %b %Y %T %z\"),"},
{"lineNum":"  515","line":"        }"},
{"lineNum":"  516","line":"    }"},
{"lineNum":"  517","line":""},
{"lineNum":"  518","line":"    /**"},
{"lineNum":"  519","line":"     * Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is"},
{"lineNum":"  520","line":"     * compatible with ISO 8601."},
{"lineNum":"  521","line":"     *"},
{"lineNum":"  522","line":"     * local: \"2012-02-22T07:53:18-07:00\""},
{"lineNum":"  523","line":"     * utc:   \"2012-02-22T14:53:18Z\""},
{"lineNum":"  524","line":"     */"},
{"lineNum":"  525","line":"    pub fn rfc3339<\'a>(&\'a self) -> TmFmt {"},
{"lineNum":"  526","line":"        TmFmt {"},
{"lineNum":"  527","line":"            tm: self,"},
{"lineNum":"  528","line":"            format: Fmt::Rfc3339,"},
{"lineNum":"  529","line":"        }"},
{"lineNum":"  530","line":"    }"},
{"lineNum":"  531","line":"}"},
{"lineNum":"  532","line":""},
{"lineNum":"  533","line":"#[derive(Copy, PartialEq, Debug, Clone)]"},
{"lineNum":"  534","line":"pub enum ParseError {"},
{"lineNum":"  535","line":"    InvalidSecond,"},
{"lineNum":"  536","line":"    InvalidMinute,"},
{"lineNum":"  537","line":"    InvalidHour,"},
{"lineNum":"  538","line":"    InvalidDay,"},
{"lineNum":"  539","line":"    InvalidMonth,"},
{"lineNum":"  540","line":"    InvalidYear,"},
{"lineNum":"  541","line":"    InvalidDayOfWeek,"},
{"lineNum":"  542","line":"    InvalidDayOfMonth,"},
{"lineNum":"  543","line":"    InvalidDayOfYear,"},
{"lineNum":"  544","line":"    InvalidZoneOffset,"},
{"lineNum":"  545","line":"    InvalidTime,"},
{"lineNum":"  546","line":"    InvalidSecondsSinceEpoch,"},
{"lineNum":"  547","line":"    MissingFormatConverter,"},
{"lineNum":"  548","line":"    InvalidFormatSpecifier(char),"},
{"lineNum":"  549","line":"    UnexpectedCharacter(char, char),"},
{"lineNum":"  550","line":"}"},
{"lineNum":"  551","line":""},
{"lineNum":"  552","line":"impl fmt::Display for ParseError {"},
{"lineNum":"  553","line":"    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"},
{"lineNum":"  554","line":"        match *self {"},
{"lineNum":"  555","line":"            InvalidFormatSpecifier(ch) => {"},
{"lineNum":"  556","line":"                write!(f, \"{}: %{}\", self.description(), ch)"},
{"lineNum":"  557","line":"            }"},
{"lineNum":"  558","line":"            UnexpectedCharacter(a, b) => {"},
{"lineNum":"  559","line":"                write!(f, \"expected: `{}`, found: `{}`\", a, b)"},
{"lineNum":"  560","line":"            }"},
{"lineNum":"  561","line":"            _ => write!(f, \"{}\", self.description())"},
{"lineNum":"  562","line":"        }"},
{"lineNum":"  563","line":"    }"},
{"lineNum":"  564","line":"}"},
{"lineNum":"  565","line":""},
{"lineNum":"  566","line":"impl Error for ParseError {"},
{"lineNum":"  567","line":"    fn description(&self) -> &str {"},
{"lineNum":"  568","line":"        match *self {"},
{"lineNum":"  569","line":"            InvalidSecond => \"Invalid second.\","},
{"lineNum":"  570","line":"            InvalidMinute => \"Invalid minute.\","},
{"lineNum":"  571","line":"            InvalidHour => \"Invalid hour.\","},
{"lineNum":"  572","line":"            InvalidDay => \"Invalid day.\","},
{"lineNum":"  573","line":"            InvalidMonth => \"Invalid month.\","},
{"lineNum":"  574","line":"            InvalidYear => \"Invalid year.\","},
{"lineNum":"  575","line":"            InvalidDayOfWeek => \"Invalid day of the week.\","},
{"lineNum":"  576","line":"            InvalidDayOfMonth => \"Invalid day of the month.\","},
{"lineNum":"  577","line":"            InvalidDayOfYear => \"Invalid day of the year.\","},
{"lineNum":"  578","line":"            InvalidZoneOffset => \"Invalid zone offset.\","},
{"lineNum":"  579","line":"            InvalidTime => \"Invalid time.\","},
{"lineNum":"  580","line":"            InvalidSecondsSinceEpoch => \"Invalid seconds since epoch.\","},
{"lineNum":"  581","line":"            MissingFormatConverter => \"missing format converter after `%`\","},
{"lineNum":"  582","line":"            InvalidFormatSpecifier(..) => \"invalid format specifier\","},
{"lineNum":"  583","line":"            UnexpectedCharacter(..) => \"Unexpected character.\","},
{"lineNum":"  584","line":"        }"},
{"lineNum":"  585","line":"    }"},
{"lineNum":"  586","line":"}"},
{"lineNum":"  587","line":""},
{"lineNum":"  588","line":"/// A wrapper around a `Tm` and format string that implements Display."},
{"lineNum":"  589","line":"#[derive(Debug)]"},
{"lineNum":"  590","line":"pub struct TmFmt<\'a> {"},
{"lineNum":"  591","line":"    tm: &\'a Tm,"},
{"lineNum":"  592","line":"    format: Fmt<\'a>"},
{"lineNum":"  593","line":"}"},
{"lineNum":"  594","line":""},
{"lineNum":"  595","line":"#[derive(Debug)]"},
{"lineNum":"  596","line":"enum Fmt<\'a> {"},
{"lineNum":"  597","line":"    Str(&\'a str),"},
{"lineNum":"  598","line":"    Rfc3339,"},
{"lineNum":"  599","line":"    Ctime,"},
{"lineNum":"  600","line":"}"},
{"lineNum":"  601","line":""},
{"lineNum":"  602","line":"fn validate_format<\'a>(fmt: TmFmt<\'a>) -> Result<TmFmt<\'a>, ParseError> {"},
{"lineNum":"  603","line":""},
{"lineNum":"  604","line":"    match (fmt.tm.tm_wday, fmt.tm.tm_mon) {"},
{"lineNum":"  605","line":"        (0...6, 0...11) => (),"},
{"lineNum":"  606","line":"        (_wday, 0...11) => return Err(InvalidDayOfWeek),"},
{"lineNum":"  607","line":"        (0...6, _mon) => return Err(InvalidMonth),"},
{"lineNum":"  608","line":"        _ => return Err(InvalidDay)"},
{"lineNum":"  609","line":"    }"},
{"lineNum":"  610","line":"    match fmt.format {"},
{"lineNum":"  611","line":"        Fmt::Str(ref s) => {"},
{"lineNum":"  612","line":"            let mut chars = s.chars();"},
{"lineNum":"  613","line":"            loop {"},
{"lineNum":"  614","line":"                match chars.next() {"},
{"lineNum":"  615","line":"                    Some(\'%\') => {"},
{"lineNum":"  616","line":"                        match chars.next() {"},
{"lineNum":"  617","line":"                            Some(\'A\') | Some(\'a\') | Some(\'B\') | Some(\'b\') |"},
{"lineNum":"  618","line":"                            Some(\'C\') | Some(\'c\') | Some(\'D\') | Some(\'d\') |"},
{"lineNum":"  619","line":"                            Some(\'e\') | Some(\'F\') | Some(\'f\') | Some(\'G\') |"},
{"lineNum":"  620","line":"                            Some(\'g\') | Some(\'H\') | Some(\'h\') | Some(\'I\') |"},
{"lineNum":"  621","line":"                            Some(\'j\') | Some(\'k\') | Some(\'l\') | Some(\'M\') |"},
{"lineNum":"  622","line":"                            Some(\'m\') | Some(\'n\') | Some(\'P\') | Some(\'p\') |"},
{"lineNum":"  623","line":"                            Some(\'R\') | Some(\'r\') | Some(\'S\') | Some(\'s\') |"},
{"lineNum":"  624","line":"                            Some(\'T\') | Some(\'t\') | Some(\'U\') | Some(\'u\') |"},
{"lineNum":"  625","line":"                            Some(\'V\') | Some(\'v\') | Some(\'W\') | Some(\'w\') |"},
{"lineNum":"  626","line":"                            Some(\'X\') | Some(\'x\') | Some(\'Y\') | Some(\'y\') |"},
{"lineNum":"  627","line":"                            Some(\'Z\') | Some(\'z\') | Some(\'+\') | Some(\'%\') => (),"},
{"lineNum":"  628","line":""},
{"lineNum":"  629","line":"                            Some(c) => return Err(InvalidFormatSpecifier(c)),"},
{"lineNum":"  630","line":"                            None => return Err(MissingFormatConverter),"},
{"lineNum":"  631","line":"                        }"},
{"lineNum":"  632","line":"                    },"},
{"lineNum":"  633","line":"                    None => break,"},
{"lineNum":"  634","line":"                    _ => ()"},
{"lineNum":"  635","line":"                }"},
{"lineNum":"  636","line":"            }"},
{"lineNum":"  637","line":"        },"},
{"lineNum":"  638","line":"        _ => ()"},
{"lineNum":"  639","line":"    }"},
{"lineNum":"  640","line":"    Ok(fmt)"},
{"lineNum":"  641","line":"}"},
{"lineNum":"  642","line":""},
{"lineNum":"  643","line":"/// Formats the time according to the format string."},
{"lineNum":"  644","line":"pub fn strftime(format: &str, tm: &Tm) -> Result<String, ParseError> {"},
{"lineNum":"  645","line":"    tm.strftime(format).map(|fmt| fmt.to_string())"},
{"lineNum":"  646","line":"}"},
{"lineNum":"  647","line":""},
{"lineNum":"  648","line":"#[cfg(test)]"},
{"lineNum":"  649","line":"mod tests {"},
{"lineNum":"  650","line":"    use super::{Timespec, get_time, precise_time_ns, precise_time_s,"},
{"lineNum":"  651","line":"                at_utc, at, strptime, PreciseTime, SteadyTime, ParseError, Duration};"},
{"lineNum":"  652","line":"    use super::ParseError::{InvalidTime, InvalidYear, MissingFormatConverter,"},
{"lineNum":"  653","line":"                            InvalidFormatSpecifier};"},
{"lineNum":"  654","line":""},
{"lineNum":"  655","line":"    use std::sync::{Once, ONCE_INIT, Mutex, MutexGuard, LockResult};"},
{"lineNum":"  656","line":"    use std::mem;"},
{"lineNum":"  657","line":""},
{"lineNum":"  658","line":"    struct TzReset {"},
{"lineNum":"  659","line":"        _tzreset: ::sys::TzReset,"},
{"lineNum":"  660","line":"        _lock: LockResult<MutexGuard<\'static, ()>>,"},
{"lineNum":"  661","line":"    }"},
{"lineNum":"  662","line":""},
{"lineNum":"  663","line":"    fn set_time_zone_la_or_london(london: bool) -> TzReset {"},
{"lineNum":"  664","line":"        // Lock manages current timezone because some tests require LA some"},
{"lineNum":"  665","line":"        // London"},
{"lineNum":"  666","line":"        static mut LOCK: *mut Mutex<()> = 0 as *mut _;"},
{"lineNum":"  667","line":"        static INIT: Once = ONCE_INIT;"},
{"lineNum":"  668","line":""},
{"lineNum":"  669","line":"        unsafe {"},
{"lineNum":"  670","line":"            INIT.call_once(|| {"},
{"lineNum":"  671","line":"                LOCK = mem::transmute(Box::new(Mutex::new(())));"},
{"lineNum":"  672","line":"            });"},
{"lineNum":"  673","line":""},
{"lineNum":"  674","line":"            let timezone_lock = (*LOCK).lock();"},
{"lineNum":"  675","line":"            let reset_func = if london {"},
{"lineNum":"  676","line":"                ::sys::set_london_with_dst_time_zone()"},
{"lineNum":"  677","line":"            } else {"},
{"lineNum":"  678","line":"                ::sys::set_los_angeles_time_zone()"},
{"lineNum":"  679","line":"            };"},
{"lineNum":"  680","line":"            TzReset {"},
{"lineNum":"  681","line":"                _lock: timezone_lock,"},
{"lineNum":"  682","line":"                _tzreset: reset_func,"},
{"lineNum":"  683","line":"            }"},
{"lineNum":"  684","line":"        }"},
{"lineNum":"  685","line":"    }"},
{"lineNum":"  686","line":""},
{"lineNum":"  687","line":"    fn set_time_zone() -> TzReset {"},
{"lineNum":"  688","line":"        set_time_zone_la_or_london(false)"},
{"lineNum":"  689","line":"    }"},
{"lineNum":"  690","line":""},
{"lineNum":"  691","line":"    fn set_time_zone_london_dst() -> TzReset {"},
{"lineNum":"  692","line":"        set_time_zone_la_or_london(true)"},
{"lineNum":"  693","line":"    }"},
{"lineNum":"  694","line":""},
{"lineNum":"  695","line":"    #[test]"},
{"lineNum":"  696","line":"    fn test_get_time() {"},
{"lineNum":"  697","line":"        static SOME_RECENT_DATE: i64 = 1325376000i64; // 2012-01-01T00:00:00Z"},
{"lineNum":"  698","line":"        static SOME_FUTURE_DATE: i64 = 1577836800i64; // 2020-01-01T00:00:00Z"},
{"lineNum":"  699","line":""},
{"lineNum":"  700","line":"        let tv1 = get_time();"},
{"lineNum":"  701","line":"        debug!(\"tv1={} sec + {} nsec\", tv1.sec, tv1.nsec);"},
{"lineNum":"  702","line":""},
{"lineNum":"  703","line":"        assert!(tv1.sec > SOME_RECENT_DATE);"},
{"lineNum":"  704","line":"        assert!(tv1.nsec < 1000000000i32);"},
{"lineNum":"  705","line":""},
{"lineNum":"  706","line":"        let tv2 = get_time();"},
{"lineNum":"  707","line":"        debug!(\"tv2={} sec + {} nsec\", tv2.sec, tv2.nsec);"},
{"lineNum":"  708","line":""},
{"lineNum":"  709","line":"        assert!(tv2.sec >= tv1.sec);"},
{"lineNum":"  710","line":"        assert!(tv2.sec < SOME_FUTURE_DATE);"},
{"lineNum":"  711","line":"        assert!(tv2.nsec < 1000000000i32);"},
{"lineNum":"  712","line":"        if tv2.sec == tv1.sec {"},
{"lineNum":"  713","line":"            assert!(tv2.nsec >= tv1.nsec);"},
{"lineNum":"  714","line":"        }"},
{"lineNum":"  715","line":"    }"},
{"lineNum":"  716","line":""},
{"lineNum":"  717","line":"    #[test]"},
{"lineNum":"  718","line":"    fn test_precise_time() {"},
{"lineNum":"  719","line":"        let s0 = precise_time_s();"},
{"lineNum":"  720","line":"        debug!(\"s0={} sec\", s0);"},
{"lineNum":"  721","line":"        assert!(s0 > 0.);"},
{"lineNum":"  722","line":""},
{"lineNum":"  723","line":"        let ns0 = precise_time_ns();"},
{"lineNum":"  724","line":"        let ns1 = precise_time_ns();"},
{"lineNum":"  725","line":"        debug!(\"ns0={} ns\", ns0);"},
{"lineNum":"  726","line":"        debug!(\"ns1={} ns\", ns1);"},
{"lineNum":"  727","line":"        assert!(ns1 >= ns0);"},
{"lineNum":"  728","line":""},
{"lineNum":"  729","line":"        let ns2 = precise_time_ns();"},
{"lineNum":"  730","line":"        debug!(\"ns2={} ns\", ns2);"},
{"lineNum":"  731","line":"        assert!(ns2 >= ns1);"},
{"lineNum":"  732","line":"    }"},
{"lineNum":"  733","line":""},
{"lineNum":"  734","line":"    #[test]"},
{"lineNum":"  735","line":"    fn test_precise_time_to() {"},
{"lineNum":"  736","line":"        let t0 = PreciseTime(1000);"},
{"lineNum":"  737","line":"        let t1 = PreciseTime(1023);"},
{"lineNum":"  738","line":"        assert_eq!(Duration::nanoseconds(23), t0.to(t1));"},
{"lineNum":"  739","line":"    }"},
{"lineNum":"  740","line":""},
{"lineNum":"  741","line":"    #[test]"},
{"lineNum":"  742","line":"    fn test_at_utc() {"},
{"lineNum":"  743","line":"        let _reset = set_time_zone();"},
{"lineNum":"  744","line":""},
{"lineNum":"  745","line":"        let time = Timespec::new(1234567890, 54321);"},
{"lineNum":"  746","line":"        let utc = at_utc(time);"},
{"lineNum":"  747","line":""},
{"lineNum":"  748","line":"        assert_eq!(utc.tm_sec, 30);"},
{"lineNum":"  749","line":"        assert_eq!(utc.tm_min, 31);"},
{"lineNum":"  750","line":"        assert_eq!(utc.tm_hour, 23);"},
{"lineNum":"  751","line":"        assert_eq!(utc.tm_mday, 13);"},
{"lineNum":"  752","line":"        assert_eq!(utc.tm_mon, 1);"},
{"lineNum":"  753","line":"        assert_eq!(utc.tm_year, 109);"},
{"lineNum":"  754","line":"        assert_eq!(utc.tm_wday, 5);"},
{"lineNum":"  755","line":"        assert_eq!(utc.tm_yday, 43);"},
{"lineNum":"  756","line":"        assert_eq!(utc.tm_isdst, 0);"},
{"lineNum":"  757","line":"        assert_eq!(utc.tm_utcoff, 0);"},
{"lineNum":"  758","line":"        assert_eq!(utc.tm_nsec, 54321);"},
{"lineNum":"  759","line":"    }"},
{"lineNum":"  760","line":""},
{"lineNum":"  761","line":"    #[test]"},
{"lineNum":"  762","line":"    fn test_at() {"},
{"lineNum":"  763","line":"        let _reset = set_time_zone();"},
{"lineNum":"  764","line":""},
{"lineNum":"  765","line":"        let time = Timespec::new(1234567890, 54321);"},
{"lineNum":"  766","line":"        let local = at(time);"},
{"lineNum":"  767","line":""},
{"lineNum":"  768","line":"        debug!(\"time_at: {:?}\", local);"},
{"lineNum":"  769","line":""},
{"lineNum":"  770","line":"        assert_eq!(local.tm_sec, 30);"},
{"lineNum":"  771","line":"        assert_eq!(local.tm_min, 31);"},
{"lineNum":"  772","line":"        assert_eq!(local.tm_hour, 15);"},
{"lineNum":"  773","line":"        assert_eq!(local.tm_mday, 13);"},
{"lineNum":"  774","line":"        assert_eq!(local.tm_mon, 1);"},
{"lineNum":"  775","line":"        assert_eq!(local.tm_year, 109);"},
{"lineNum":"  776","line":"        assert_eq!(local.tm_wday, 5);"},
{"lineNum":"  777","line":"        assert_eq!(local.tm_yday, 43);"},
{"lineNum":"  778","line":"        assert_eq!(local.tm_isdst, 0);"},
{"lineNum":"  779","line":"        assert_eq!(local.tm_utcoff, -28800);"},
{"lineNum":"  780","line":"        assert_eq!(local.tm_nsec, 54321);"},
{"lineNum":"  781","line":"    }"},
{"lineNum":"  782","line":""},
{"lineNum":"  783","line":"    #[test]"},
{"lineNum":"  784","line":"    fn test_to_timespec() {"},
{"lineNum":"  785","line":"        let _reset = set_time_zone();"},
{"lineNum":"  786","line":""},
{"lineNum":"  787","line":"        let time = Timespec::new(1234567890, 54321);"},
{"lineNum":"  788","line":"        let utc = at_utc(time);"},
{"lineNum":"  789","line":""},
{"lineNum":"  790","line":"        assert_eq!(utc.to_timespec(), time);"},
{"lineNum":"  791","line":"        assert_eq!(utc.to_local().to_timespec(), time);"},
{"lineNum":"  792","line":"    }"},
{"lineNum":"  793","line":""},
{"lineNum":"  794","line":"    #[test]"},
{"lineNum":"  795","line":"    fn test_conversions() {"},
{"lineNum":"  796","line":"        let _reset = set_time_zone();"},
{"lineNum":"  797","line":""},
{"lineNum":"  798","line":"        let time = Timespec::new(1234567890, 54321);"},
{"lineNum":"  799","line":"        let utc = at_utc(time);"},
{"lineNum":"  800","line":"        let local = at(time);"},
{"lineNum":"  801","line":""},
{"lineNum":"  802","line":"        assert!(local.to_local() == local);"},
{"lineNum":"  803","line":"        assert!(local.to_utc() == utc);"},
{"lineNum":"  804","line":"        assert!(local.to_utc().to_local() == local);"},
{"lineNum":"  805","line":"        assert!(utc.to_utc() == utc);"},
{"lineNum":"  806","line":"        assert!(utc.to_local() == local);"},
{"lineNum":"  807","line":"        assert!(utc.to_local().to_utc() == utc);"},
{"lineNum":"  808","line":"    }"},
{"lineNum":"  809","line":""},
{"lineNum":"  810","line":"    #[test]"},
{"lineNum":"  811","line":"    fn test_strptime() {"},
{"lineNum":"  812","line":"        let _reset = set_time_zone();"},
{"lineNum":"  813","line":""},
{"lineNum":"  814","line":"        match strptime(\"\", \"\") {"},
{"lineNum":"  815","line":"            Ok(ref tm) => {"},
{"lineNum":"  816","line":"                assert!(tm.tm_sec == 0);"},
{"lineNum":"  817","line":"                assert!(tm.tm_min == 0);"},
{"lineNum":"  818","line":"                assert!(tm.tm_hour == 0);"},
{"lineNum":"  819","line":"                assert!(tm.tm_mday == 0);"},
{"lineNum":"  820","line":"                assert!(tm.tm_mon == 0);"},
{"lineNum":"  821","line":"                assert!(tm.tm_year == 0);"},
{"lineNum":"  822","line":"                assert!(tm.tm_wday == 0);"},
{"lineNum":"  823","line":"                assert!(tm.tm_isdst == 0);"},
{"lineNum":"  824","line":"                assert!(tm.tm_utcoff == 0);"},
{"lineNum":"  825","line":"                assert!(tm.tm_nsec == 0);"},
{"lineNum":"  826","line":"            }"},
{"lineNum":"  827","line":"            Err(_) => ()"},
{"lineNum":"  828","line":"        }"},
{"lineNum":"  829","line":""},
{"lineNum":"  830","line":"        let format = \"%a %b %e %T.%f %Y\";"},
{"lineNum":"  831","line":"        assert_eq!(strptime(\"\", format), Err(ParseError::InvalidDay));"},
{"lineNum":"  832","line":"        assert_eq!(strptime(\"Fri Feb 13 15:31:30\", format),"},
{"lineNum":"  833","line":"                   Err(InvalidTime));"},
{"lineNum":"  834","line":""},
{"lineNum":"  835","line":"        match strptime(\"Fri Feb 13 15:31:30.01234 2009\", format) {"},
{"lineNum":"  836","line":"            Err(e) => panic!(\"{}\", e),"},
{"lineNum":"  837","line":"            Ok(ref tm) => {"},
{"lineNum":"  838","line":"                assert_eq!(tm.tm_sec, 30);"},
{"lineNum":"  839","line":"                assert_eq!(tm.tm_min, 31);"},
{"lineNum":"  840","line":"                assert_eq!(tm.tm_hour, 15);"},
{"lineNum":"  841","line":"                assert_eq!(tm.tm_mday, 13);"},
{"lineNum":"  842","line":"                assert_eq!(tm.tm_mon, 1);"},
{"lineNum":"  843","line":"                assert_eq!(tm.tm_year, 109);"},
{"lineNum":"  844","line":"                assert_eq!(tm.tm_wday, 5);"},
{"lineNum":"  845","line":"                assert_eq!(tm.tm_yday, 0);"},
{"lineNum":"  846","line":"                assert_eq!(tm.tm_isdst, 0);"},
{"lineNum":"  847","line":"                assert_eq!(tm.tm_utcoff, 0);"},
{"lineNum":"  848","line":"                assert_eq!(tm.tm_nsec, 12340000);"},
{"lineNum":"  849","line":"            }"},
{"lineNum":"  850","line":"        }"},
{"lineNum":"  851","line":""},
{"lineNum":"  852","line":"        fn test(s: &str, format: &str) -> bool {"},
{"lineNum":"  853","line":"            match strptime(s, format) {"},
{"lineNum":"  854","line":"              Ok(tm) => {"},
{"lineNum":"  855","line":"                tm.strftime(format).unwrap().to_string() == s.to_string()"},
{"lineNum":"  856","line":"              },"},
{"lineNum":"  857","line":"              Err(e) => panic!(\"{:?},  s={:?}, format={:?}\", e, s, format)"},
{"lineNum":"  858","line":"            }"},
{"lineNum":"  859","line":"        }"},
{"lineNum":"  860","line":""},
{"lineNum":"  861","line":"        fn test_oneway(s : &str, format : &str) -> bool {"},
{"lineNum":"  862","line":"            match strptime(s, format) {"},
{"lineNum":"  863","line":"              Ok(_) => {"},
{"lineNum":"  864","line":"                // oneway tests are used when reformatting the parsed Tm"},
{"lineNum":"  865","line":"                // back into a string can generate a different string"},
{"lineNum":"  866","line":"                // from the original (i.e. leading zeroes)"},
{"lineNum":"  867","line":"                true"},
{"lineNum":"  868","line":"              },"},
{"lineNum":"  869","line":"              Err(e) => panic!(\"{:?},  s={:?}, format={:?}\", e, s, format)"},
{"lineNum":"  870","line":"            }"},
{"lineNum":"  871","line":"        }"},
{"lineNum":"  872","line":""},
{"lineNum":"  873","line":"        let days = ["},
{"lineNum":"  874","line":"            \"Sunday\".to_string(),"},
{"lineNum":"  875","line":"            \"Monday\".to_string(),"},
{"lineNum":"  876","line":"            \"Tuesday\".to_string(),"},
{"lineNum":"  877","line":"            \"Wednesday\".to_string(),"},
{"lineNum":"  878","line":"            \"Thursday\".to_string(),"},
{"lineNum":"  879","line":"            \"Friday\".to_string(),"},
{"lineNum":"  880","line":"            \"Saturday\".to_string()"},
{"lineNum":"  881","line":"        ];"},
{"lineNum":"  882","line":"        for day in days.iter() {"},
{"lineNum":"  883","line":"            assert!(test(&day, \"%A\"));"},
{"lineNum":"  884","line":"        }"},
{"lineNum":"  885","line":""},
{"lineNum":"  886","line":"        let days = ["},
{"lineNum":"  887","line":"            \"Sun\".to_string(),"},
{"lineNum":"  888","line":"            \"Mon\".to_string(),"},
{"lineNum":"  889","line":"            \"Tue\".to_string(),"},
{"lineNum":"  890","line":"            \"Wed\".to_string(),"},
{"lineNum":"  891","line":"            \"Thu\".to_string(),"},
{"lineNum":"  892","line":"            \"Fri\".to_string(),"},
{"lineNum":"  893","line":"            \"Sat\".to_string()"},
{"lineNum":"  894","line":"        ];"},
{"lineNum":"  895","line":"        for day in days.iter() {"},
{"lineNum":"  896","line":"            assert!(test(&day, \"%a\"));"},
{"lineNum":"  897","line":"        }"},
{"lineNum":"  898","line":""},
{"lineNum":"  899","line":"        let months = ["},
{"lineNum":"  900","line":"            \"January\".to_string(),"},
{"lineNum":"  901","line":"            \"February\".to_string(),"},
{"lineNum":"  902","line":"            \"March\".to_string(),"},
{"lineNum":"  903","line":"            \"April\".to_string(),"},
{"lineNum":"  904","line":"            \"May\".to_string(),"},
{"lineNum":"  905","line":"            \"June\".to_string(),"},
{"lineNum":"  906","line":"            \"July\".to_string(),"},
{"lineNum":"  907","line":"            \"August\".to_string(),"},
{"lineNum":"  908","line":"            \"September\".to_string(),"},
{"lineNum":"  909","line":"            \"October\".to_string(),"},
{"lineNum":"  910","line":"            \"November\".to_string(),"},
{"lineNum":"  911","line":"            \"December\".to_string()"},
{"lineNum":"  912","line":"        ];"},
{"lineNum":"  913","line":"        for day in months.iter() {"},
{"lineNum":"  914","line":"            assert!(test(&day, \"%B\"));"},
{"lineNum":"  915","line":"        }"},
{"lineNum":"  916","line":""},
{"lineNum":"  917","line":"        let months = ["},
{"lineNum":"  918","line":"            \"Jan\".to_string(),"},
{"lineNum":"  919","line":"            \"Feb\".to_string(),"},
{"lineNum":"  920","line":"            \"Mar\".to_string(),"},
{"lineNum":"  921","line":"            \"Apr\".to_string(),"},
{"lineNum":"  922","line":"            \"May\".to_string(),"},
{"lineNum":"  923","line":"            \"Jun\".to_string(),"},
{"lineNum":"  924","line":"            \"Jul\".to_string(),"},
{"lineNum":"  925","line":"            \"Aug\".to_string(),"},
{"lineNum":"  926","line":"            \"Sep\".to_string(),"},
{"lineNum":"  927","line":"            \"Oct\".to_string(),"},
{"lineNum":"  928","line":"            \"Nov\".to_string(),"},
{"lineNum":"  929","line":"            \"Dec\".to_string()"},
{"lineNum":"  930","line":"        ];"},
{"lineNum":"  931","line":"        for day in months.iter() {"},
{"lineNum":"  932","line":"            assert!(test(&day, \"%b\"));"},
{"lineNum":"  933","line":"        }"},
{"lineNum":"  934","line":""},
{"lineNum":"  935","line":"        assert!(test(\"19\", \"%C\"));"},
{"lineNum":"  936","line":"        assert!(test(\"Fri Feb  3 23:31:30 2009\", \"%c\"));"},
{"lineNum":"  937","line":"        assert!(test(\"Fri Feb 13 23:31:30 2009\", \"%c\"));"},
{"lineNum":"  938","line":"        assert!(test(\"02/13/09\", \"%D\"));"},
{"lineNum":"  939","line":"        assert!(test(\"03\", \"%d\"));"},
{"lineNum":"  940","line":"        assert!(test(\"13\", \"%d\"));"},
{"lineNum":"  941","line":"        assert!(test(\" 3\", \"%e\"));"},
{"lineNum":"  942","line":"        assert!(test(\"13\", \"%e\"));"},
{"lineNum":"  943","line":"        assert!(test(\"2009-02-13\", \"%F\"));"},
{"lineNum":"  944","line":"        assert!(test(\"03\", \"%H\"));"},
{"lineNum":"  945","line":"        assert!(test(\"13\", \"%H\"));"},
{"lineNum":"  946","line":"        assert!(test(\"03\", \"%I\")); // FIXME (#2350): flesh out"},
{"lineNum":"  947","line":"        assert!(test(\"11\", \"%I\")); // FIXME (#2350): flesh out"},
{"lineNum":"  948","line":"        assert!(test(\"044\", \"%j\"));"},
{"lineNum":"  949","line":"        assert!(test(\" 3\", \"%k\"));"},
{"lineNum":"  950","line":"        assert!(test(\"13\", \"%k\"));"},
{"lineNum":"  951","line":"        assert!(test(\" 1\", \"%l\"));"},
{"lineNum":"  952","line":"        assert!(test(\"11\", \"%l\"));"},
{"lineNum":"  953","line":"        assert!(test(\"03\", \"%M\"));"},
{"lineNum":"  954","line":"        assert!(test(\"13\", \"%M\"));"},
{"lineNum":"  955","line":"        assert!(test(\"\\n\", \"%n\"));"},
{"lineNum":"  956","line":"        assert!(test(\"am\", \"%P\"));"},
{"lineNum":"  957","line":"        assert!(test(\"pm\", \"%P\"));"},
{"lineNum":"  958","line":"        assert!(test(\"AM\", \"%p\"));"},
{"lineNum":"  959","line":"        assert!(test(\"PM\", \"%p\"));"},
{"lineNum":"  960","line":"        assert!(test(\"23:31\", \"%R\"));"},
{"lineNum":"  961","line":"        assert!(test(\"11:31:30 AM\", \"%r\"));"},
{"lineNum":"  962","line":"        assert!(test(\"11:31:30 PM\", \"%r\"));"},
{"lineNum":"  963","line":"        assert!(test(\"03\", \"%S\"));"},
{"lineNum":"  964","line":"        assert!(test(\"13\", \"%S\"));"},
{"lineNum":"  965","line":"        assert!(test(\"15:31:30\", \"%T\"));"},
{"lineNum":"  966","line":"        assert!(test(\"\\t\", \"%t\"));"},
{"lineNum":"  967","line":"        assert!(test(\"1\", \"%u\"));"},
{"lineNum":"  968","line":"        assert!(test(\"7\", \"%u\"));"},
{"lineNum":"  969","line":"        assert!(test(\"13-Feb-2009\", \"%v\"));"},
{"lineNum":"  970","line":"        assert!(test(\"0\", \"%w\"));"},
{"lineNum":"  971","line":"        assert!(test(\"6\", \"%w\"));"},
{"lineNum":"  972","line":"        assert!(test(\"2009\", \"%Y\"));"},
{"lineNum":"  973","line":"        assert!(test(\"09\", \"%y\"));"},
{"lineNum":"  974","line":""},
{"lineNum":"  975","line":"        assert!(test_oneway(\"3\",  \"%d\"));"},
{"lineNum":"  976","line":"        assert!(test_oneway(\"3\",  \"%H\"));"},
{"lineNum":"  977","line":"        assert!(test_oneway(\"3\",  \"%e\"));"},
{"lineNum":"  978","line":"        assert!(test_oneway(\"3\",  \"%M\"));"},
{"lineNum":"  979","line":"        assert!(test_oneway(\"3\",  \"%S\"));"},
{"lineNum":"  980","line":""},
{"lineNum":"  981","line":"        assert!(strptime(\"-0000\", \"%z\").unwrap().tm_utcoff == 0);"},
{"lineNum":"  982","line":"        assert!(strptime(\"-00:00\", \"%z\").unwrap().tm_utcoff == 0);"},
{"lineNum":"  983","line":"        assert!(strptime(\"Z\", \"%z\").unwrap().tm_utcoff == 0);"},
{"lineNum":"  984","line":"        assert_eq!(-28800, strptime(\"-0800\", \"%z\").unwrap().tm_utcoff);"},
{"lineNum":"  985","line":"        assert_eq!(-28800, strptime(\"-08:00\", \"%z\").unwrap().tm_utcoff);"},
{"lineNum":"  986","line":"        assert_eq!(28800, strptime(\"+0800\", \"%z\").unwrap().tm_utcoff);"},
{"lineNum":"  987","line":"        assert_eq!(28800, strptime(\"+08:00\", \"%z\").unwrap().tm_utcoff);"},
{"lineNum":"  988","line":"        assert_eq!(5400, strptime(\"+0130\", \"%z\").unwrap().tm_utcoff);"},
{"lineNum":"  989","line":"        assert_eq!(5400, strptime(\"+01:30\", \"%z\").unwrap().tm_utcoff);"},
{"lineNum":"  990","line":"        assert!(test(\"%\", \"%%\"));"},
{"lineNum":"  991","line":""},
{"lineNum":"  992","line":"        // Test for #7256"},
{"lineNum":"  993","line":"        assert_eq!(strptime(\"360\", \"%Y-%m-%d\"), Err(InvalidYear));"},
{"lineNum":"  994","line":""},
{"lineNum":"  995","line":"        // Test for epoch seconds parsing"},
{"lineNum":"  996","line":"        {"},
{"lineNum":"  997","line":"            assert!(test(\"1428035610\", \"%s\"));"},
{"lineNum":"  998","line":"            let tm = strptime(\"1428035610\", \"%s\").unwrap();"},
{"lineNum":"  999","line":"            assert_eq!(tm.tm_utcoff, 0);"},
{"lineNum":" 1000","line":"            assert_eq!(tm.tm_isdst, 0);"},
{"lineNum":" 1001","line":"            assert_eq!(tm.tm_yday, 92);"},
{"lineNum":" 1002","line":"            assert_eq!(tm.tm_wday, 5);"},
{"lineNum":" 1003","line":"            assert_eq!(tm.tm_year, 115);"},
{"lineNum":" 1004","line":"            assert_eq!(tm.tm_mon, 3);"},
{"lineNum":" 1005","line":"            assert_eq!(tm.tm_mday, 3);"},
{"lineNum":" 1006","line":"            assert_eq!(tm.tm_hour, 4);"},
{"lineNum":" 1007","line":"        }"},
{"lineNum":" 1008","line":"    }"},
{"lineNum":" 1009","line":""},
{"lineNum":" 1010","line":"    #[test]"},
{"lineNum":" 1011","line":"    fn test_asctime() {"},
{"lineNum":" 1012","line":"        let _reset = set_time_zone();"},
{"lineNum":" 1013","line":""},
{"lineNum":" 1014","line":"        let time = Timespec::new(1234567890, 54321);"},
{"lineNum":" 1015","line":"        let utc   = at_utc(time);"},
{"lineNum":" 1016","line":"        let local = at(time);"},
{"lineNum":" 1017","line":""},
{"lineNum":" 1018","line":"        debug!(\"test_ctime: {} {}\", utc.asctime(), local.asctime());"},
{"lineNum":" 1019","line":""},
{"lineNum":" 1020","line":"        assert_eq!(utc.asctime().to_string(), \"Fri Feb 13 23:31:30 2009\".to_string());"},
{"lineNum":" 1021","line":"        assert_eq!(local.asctime().to_string(), \"Fri Feb 13 15:31:30 2009\".to_string());"},
{"lineNum":" 1022","line":"    }"},
{"lineNum":" 1023","line":""},
{"lineNum":" 1024","line":"    #[test]"},
{"lineNum":" 1025","line":"    fn test_ctime() {"},
{"lineNum":" 1026","line":"        let _reset = set_time_zone();"},
{"lineNum":" 1027","line":""},
{"lineNum":" 1028","line":"        let time = Timespec::new(1234567890, 54321);"},
{"lineNum":" 1029","line":"        let utc   = at_utc(time);"},
{"lineNum":" 1030","line":"        let local = at(time);"},
{"lineNum":" 1031","line":""},
{"lineNum":" 1032","line":"        debug!(\"test_ctime: {} {}\", utc.ctime(), local.ctime());"},
{"lineNum":" 1033","line":""},
{"lineNum":" 1034","line":"        assert_eq!(utc.ctime().to_string(), \"Fri Feb 13 15:31:30 2009\".to_string());"},
{"lineNum":" 1035","line":"        assert_eq!(local.ctime().to_string(), \"Fri Feb 13 15:31:30 2009\".to_string());"},
{"lineNum":" 1036","line":"    }"},
{"lineNum":" 1037","line":""},
{"lineNum":" 1038","line":"    #[test]"},
{"lineNum":" 1039","line":"    fn test_strftime() {"},
{"lineNum":" 1040","line":"        let _reset = set_time_zone();"},
{"lineNum":" 1041","line":""},
{"lineNum":" 1042","line":"        let time = Timespec::new(1234567890, 54321);"},
{"lineNum":" 1043","line":"        let utc = at_utc(time);"},
{"lineNum":" 1044","line":"        let local = at(time);"},
{"lineNum":" 1045","line":""},
{"lineNum":" 1046","line":"        assert_eq!(local.strftime(\"\").unwrap().to_string(), \"\".to_string());"},
{"lineNum":" 1047","line":"        assert_eq!(local.strftime(\"%A\").unwrap().to_string(), \"Friday\".to_string());"},
{"lineNum":" 1048","line":"        assert_eq!(local.strftime(\"%a\").unwrap().to_string(), \"Fri\".to_string());"},
{"lineNum":" 1049","line":"        assert_eq!(local.strftime(\"%B\").unwrap().to_string(), \"February\".to_string());"},
{"lineNum":" 1050","line":"        assert_eq!(local.strftime(\"%b\").unwrap().to_string(), \"Feb\".to_string());"},
{"lineNum":" 1051","line":"        assert_eq!(local.strftime(\"%C\").unwrap().to_string(), \"20\".to_string());"},
{"lineNum":" 1052","line":"        assert_eq!(local.strftime(\"%c\").unwrap().to_string(),"},
{"lineNum":" 1053","line":"                   \"Fri Feb 13 15:31:30 2009\".to_string());"},
{"lineNum":" 1054","line":"        assert_eq!(local.strftime(\"%D\").unwrap().to_string(), \"02/13/09\".to_string());"},
{"lineNum":" 1055","line":"        assert_eq!(local.strftime(\"%d\").unwrap().to_string(), \"13\".to_string());"},
{"lineNum":" 1056","line":"        assert_eq!(local.strftime(\"%e\").unwrap().to_string(), \"13\".to_string());"},
{"lineNum":" 1057","line":"        assert_eq!(local.strftime(\"%F\").unwrap().to_string(), \"2009-02-13\".to_string());"},
{"lineNum":" 1058","line":"        assert_eq!(local.strftime(\"%f\").unwrap().to_string(), \"000054321\".to_string());"},
{"lineNum":" 1059","line":"        assert_eq!(local.strftime(\"%G\").unwrap().to_string(), \"2009\".to_string());"},
{"lineNum":" 1060","line":"        assert_eq!(local.strftime(\"%g\").unwrap().to_string(), \"09\".to_string());"},
{"lineNum":" 1061","line":"        assert_eq!(local.strftime(\"%H\").unwrap().to_string(), \"15\".to_string());"},
{"lineNum":" 1062","line":"        assert_eq!(local.strftime(\"%h\").unwrap().to_string(), \"Feb\".to_string());"},
{"lineNum":" 1063","line":"        assert_eq!(local.strftime(\"%I\").unwrap().to_string(), \"03\".to_string());"},
{"lineNum":" 1064","line":"        assert_eq!(local.strftime(\"%j\").unwrap().to_string(), \"044\".to_string());"},
{"lineNum":" 1065","line":"        assert_eq!(local.strftime(\"%k\").unwrap().to_string(), \"15\".to_string());"},
{"lineNum":" 1066","line":"        assert_eq!(local.strftime(\"%l\").unwrap().to_string(), \" 3\".to_string());"},
{"lineNum":" 1067","line":"        assert_eq!(local.strftime(\"%M\").unwrap().to_string(), \"31\".to_string());"},
{"lineNum":" 1068","line":"        assert_eq!(local.strftime(\"%m\").unwrap().to_string(), \"02\".to_string());"},
{"lineNum":" 1069","line":"        assert_eq!(local.strftime(\"%n\").unwrap().to_string(), \"\\n\".to_string());"},
{"lineNum":" 1070","line":"        assert_eq!(local.strftime(\"%P\").unwrap().to_string(), \"pm\".to_string());"},
{"lineNum":" 1071","line":"        assert_eq!(local.strftime(\"%p\").unwrap().to_string(), \"PM\".to_string());"},
{"lineNum":" 1072","line":"        assert_eq!(local.strftime(\"%R\").unwrap().to_string(), \"15:31\".to_string());"},
{"lineNum":" 1073","line":"        assert_eq!(local.strftime(\"%r\").unwrap().to_string(), \"03:31:30 PM\".to_string());"},
{"lineNum":" 1074","line":"        assert_eq!(local.strftime(\"%S\").unwrap().to_string(), \"30\".to_string());"},
{"lineNum":" 1075","line":"        assert_eq!(local.strftime(\"%s\").unwrap().to_string(), \"1234567890\".to_string());"},
{"lineNum":" 1076","line":"        assert_eq!(local.strftime(\"%T\").unwrap().to_string(), \"15:31:30\".to_string());"},
{"lineNum":" 1077","line":"        assert_eq!(local.strftime(\"%t\").unwrap().to_string(), \"\\t\".to_string());"},
{"lineNum":" 1078","line":"        assert_eq!(local.strftime(\"%U\").unwrap().to_string(), \"06\".to_string());"},
{"lineNum":" 1079","line":"        assert_eq!(local.strftime(\"%u\").unwrap().to_string(), \"5\".to_string());"},
{"lineNum":" 1080","line":"        assert_eq!(local.strftime(\"%V\").unwrap().to_string(), \"07\".to_string());"},
{"lineNum":" 1081","line":"        assert_eq!(local.strftime(\"%v\").unwrap().to_string(), \"13-Feb-2009\".to_string());"},
{"lineNum":" 1082","line":"        assert_eq!(local.strftime(\"%W\").unwrap().to_string(), \"06\".to_string());"},
{"lineNum":" 1083","line":"        assert_eq!(local.strftime(\"%w\").unwrap().to_string(), \"5\".to_string());"},
{"lineNum":" 1084","line":"        // FIXME (#2350): support locale"},
{"lineNum":" 1085","line":"        assert_eq!(local.strftime(\"%X\").unwrap().to_string(), \"15:31:30\".to_string());"},
{"lineNum":" 1086","line":"        // FIXME (#2350): support locale"},
{"lineNum":" 1087","line":"        assert_eq!(local.strftime(\"%x\").unwrap().to_string(), \"02/13/09\".to_string());"},
{"lineNum":" 1088","line":"        assert_eq!(local.strftime(\"%Y\").unwrap().to_string(), \"2009\".to_string());"},
{"lineNum":" 1089","line":"        assert_eq!(local.strftime(\"%y\").unwrap().to_string(), \"09\".to_string());"},
{"lineNum":" 1090","line":"        // FIXME (#2350): support locale"},
{"lineNum":" 1091","line":"        assert_eq!(local.strftime(\"%Z\").unwrap().to_string(), \"\".to_string());"},
{"lineNum":" 1092","line":"        assert_eq!(local.strftime(\"%z\").unwrap().to_string(), \"-0800\".to_string());"},
{"lineNum":" 1093","line":"        assert_eq!(local.strftime(\"%+\").unwrap().to_string(),"},
{"lineNum":" 1094","line":"                   \"2009-02-13T15:31:30-08:00\".to_string());"},
{"lineNum":" 1095","line":"        assert_eq!(local.strftime(\"%%\").unwrap().to_string(), \"%\".to_string());"},
{"lineNum":" 1096","line":""},
{"lineNum":" 1097","line":"         let invalid_specifiers = [\"%E\", \"%J\", \"%K\", \"%L\", \"%N\", \"%O\", \"%o\", \"%Q\", \"%q\"];"},
{"lineNum":" 1098","line":"        for &sp in invalid_specifiers.iter() {"},
{"lineNum":" 1099","line":"            assert_eq!(local.strftime(sp).unwrap_err(),"},
{"lineNum":" 1100","line":"                       InvalidFormatSpecifier(sp[1..].chars().next().unwrap()));"},
{"lineNum":" 1101","line":"        }"},
{"lineNum":" 1102","line":"        assert_eq!(local.strftime(\"%\").unwrap_err(), MissingFormatConverter);"},
{"lineNum":" 1103","line":"        assert_eq!(local.strftime(\"%A %\").unwrap_err(), MissingFormatConverter);"},
{"lineNum":" 1104","line":""},
{"lineNum":" 1105","line":"        assert_eq!(local.asctime().to_string(), \"Fri Feb 13 15:31:30 2009\".to_string());"},
{"lineNum":" 1106","line":"        assert_eq!(local.ctime().to_string(), \"Fri Feb 13 15:31:30 2009\".to_string());"},
{"lineNum":" 1107","line":"        assert_eq!(local.rfc822z().to_string(), \"Fri, 13 Feb 2009 15:31:30 -0800\".to_string());"},
{"lineNum":" 1108","line":"        assert_eq!(local.rfc3339().to_string(), \"2009-02-13T15:31:30-08:00\".to_string());"},
{"lineNum":" 1109","line":""},
{"lineNum":" 1110","line":"        assert_eq!(utc.asctime().to_string(), \"Fri Feb 13 23:31:30 2009\".to_string());"},
{"lineNum":" 1111","line":"        assert_eq!(utc.ctime().to_string(), \"Fri Feb 13 15:31:30 2009\".to_string());"},
{"lineNum":" 1112","line":"        assert_eq!(utc.rfc822().to_string(), \"Fri, 13 Feb 2009 23:31:30 GMT\".to_string());"},
{"lineNum":" 1113","line":"        assert_eq!(utc.rfc822z().to_string(), \"Fri, 13 Feb 2009 23:31:30 -0000\".to_string());"},
{"lineNum":" 1114","line":"        assert_eq!(utc.rfc3339().to_string(), \"2009-02-13T23:31:30Z\".to_string());"},
{"lineNum":" 1115","line":"    }"},
{"lineNum":" 1116","line":""},
{"lineNum":" 1117","line":"    #[test]"},
{"lineNum":" 1118","line":"    fn test_timespec_eq_ord() {"},
{"lineNum":" 1119","line":"        let a = &Timespec::new(-2, 1);"},
{"lineNum":" 1120","line":"        let b = &Timespec::new(-1, 2);"},
{"lineNum":" 1121","line":"        let c = &Timespec::new(1, 2);"},
{"lineNum":" 1122","line":"        let d = &Timespec::new(2, 1);"},
{"lineNum":" 1123","line":"        let e = &Timespec::new(2, 1);"},
{"lineNum":" 1124","line":""},
{"lineNum":" 1125","line":"        assert!(d.eq(e));"},
{"lineNum":" 1126","line":"        assert!(c.ne(e));"},
{"lineNum":" 1127","line":""},
{"lineNum":" 1128","line":"        assert!(a.lt(b));"},
{"lineNum":" 1129","line":"        assert!(b.lt(c));"},
{"lineNum":" 1130","line":"        assert!(c.lt(d));"},
{"lineNum":" 1131","line":""},
{"lineNum":" 1132","line":"        assert!(a.le(b));"},
{"lineNum":" 1133","line":"        assert!(b.le(c));"},
{"lineNum":" 1134","line":"        assert!(c.le(d));"},
{"lineNum":" 1135","line":"        assert!(d.le(e));"},
{"lineNum":" 1136","line":"        assert!(e.le(d));"},
{"lineNum":" 1137","line":""},
{"lineNum":" 1138","line":"        assert!(b.ge(a));"},
{"lineNum":" 1139","line":"        assert!(c.ge(b));"},
{"lineNum":" 1140","line":"        assert!(d.ge(c));"},
{"lineNum":" 1141","line":"        assert!(e.ge(d));"},
{"lineNum":" 1142","line":"        assert!(d.ge(e));"},
{"lineNum":" 1143","line":""},
{"lineNum":" 1144","line":"        assert!(b.gt(a));"},
{"lineNum":" 1145","line":"        assert!(c.gt(b));"},
{"lineNum":" 1146","line":"        assert!(d.gt(c));"},
{"lineNum":" 1147","line":"    }"},
{"lineNum":" 1148","line":""},
{"lineNum":" 1149","line":"    #[test]"},
{"lineNum":" 1150","line":"    fn test_timespec_hash() {"},
{"lineNum":" 1151","line":"        use std::hash::{Hash, Hasher};"},
{"lineNum":" 1152","line":""},
{"lineNum":" 1153","line":"        let c = &Timespec::new(3, 2);"},
{"lineNum":" 1154","line":"        let d = &Timespec::new(2, 1);"},
{"lineNum":" 1155","line":"        let e = &Timespec::new(2, 1);"},
{"lineNum":" 1156","line":""},
{"lineNum":" 1157","line":"        let mut hasher = ::std::hash::SipHasher::new();"},
{"lineNum":" 1158","line":""},
{"lineNum":" 1159","line":"        let d_hash:u64 = {"},
{"lineNum":" 1160","line":"          d.hash(&mut hasher);"},
{"lineNum":" 1161","line":"          hasher.finish()"},
{"lineNum":" 1162","line":"        };"},
{"lineNum":" 1163","line":""},
{"lineNum":" 1164","line":"        hasher = ::std::hash::SipHasher::new();"},
{"lineNum":" 1165","line":""},
{"lineNum":" 1166","line":"        let e_hash:u64 = {"},
{"lineNum":" 1167","line":"          e.hash(&mut hasher);"},
{"lineNum":" 1168","line":"          hasher.finish()"},
{"lineNum":" 1169","line":"        };"},
{"lineNum":" 1170","line":""},
{"lineNum":" 1171","line":"        hasher = ::std::hash::SipHasher::new();"},
{"lineNum":" 1172","line":""},
{"lineNum":" 1173","line":"        let c_hash:u64 = {"},
{"lineNum":" 1174","line":"          c.hash(&mut hasher);"},
{"lineNum":" 1175","line":"          hasher.finish()"},
{"lineNum":" 1176","line":"        };"},
{"lineNum":" 1177","line":""},
{"lineNum":" 1178","line":"        assert_eq!(d_hash, e_hash);"},
{"lineNum":" 1179","line":"        assert!(c_hash != e_hash);"},
{"lineNum":" 1180","line":"    }"},
{"lineNum":" 1181","line":""},
{"lineNum":" 1182","line":"    #[test]"},
{"lineNum":" 1183","line":"    fn test_timespec_add() {"},
{"lineNum":" 1184","line":"        let a = Timespec::new(1, 2);"},
{"lineNum":" 1185","line":"        let b = Duration::seconds(2) + Duration::nanoseconds(3);"},
{"lineNum":" 1186","line":"        let c = a + b;"},
{"lineNum":" 1187","line":"        assert_eq!(c.sec, 3);"},
{"lineNum":" 1188","line":"        assert_eq!(c.nsec, 5);"},
{"lineNum":" 1189","line":""},
{"lineNum":" 1190","line":"        let p = Timespec::new(1, super::NSEC_PER_SEC - 2);"},
{"lineNum":" 1191","line":"        let q = Duration::seconds(2) + Duration::nanoseconds(2);"},
{"lineNum":" 1192","line":"        let r = p + q;"},
{"lineNum":" 1193","line":"        assert_eq!(r.sec, 4);"},
{"lineNum":" 1194","line":"        assert_eq!(r.nsec, 0);"},
{"lineNum":" 1195","line":""},
{"lineNum":" 1196","line":"        let u = Timespec::new(1, super::NSEC_PER_SEC - 2);"},
{"lineNum":" 1197","line":"        let v = Duration::seconds(2) + Duration::nanoseconds(3);"},
{"lineNum":" 1198","line":"        let w = u + v;"},
{"lineNum":" 1199","line":"        assert_eq!(w.sec, 4);"},
{"lineNum":" 1200","line":"        assert_eq!(w.nsec, 1);"},
{"lineNum":" 1201","line":""},
{"lineNum":" 1202","line":"        let k = Timespec::new(1, 0);"},
{"lineNum":" 1203","line":"        let l = Duration::nanoseconds(-1);"},
{"lineNum":" 1204","line":"        let m = k + l;"},
{"lineNum":" 1205","line":"        assert_eq!(m.sec, 0);"},
{"lineNum":" 1206","line":"        assert_eq!(m.nsec, 999_999_999);"},
{"lineNum":" 1207","line":"    }"},
{"lineNum":" 1208","line":""},
{"lineNum":" 1209","line":"    #[test]"},
{"lineNum":" 1210","line":"    fn test_timespec_sub() {"},
{"lineNum":" 1211","line":"        let a = Timespec::new(2, 3);"},
{"lineNum":" 1212","line":"        let b = Timespec::new(1, 2);"},
{"lineNum":" 1213","line":"        let c = a - b;"},
{"lineNum":" 1214","line":"        assert_eq!(c.num_nanoseconds(), Some(super::NSEC_PER_SEC as i64 + 1));"},
{"lineNum":" 1215","line":""},
{"lineNum":" 1216","line":"        let p = Timespec::new(2, 0);"},
{"lineNum":" 1217","line":"        let q = Timespec::new(1, 2);"},
{"lineNum":" 1218","line":"        let r = p - q;"},
{"lineNum":" 1219","line":"        assert_eq!(r.num_nanoseconds(), Some(super::NSEC_PER_SEC as i64 - 2));"},
{"lineNum":" 1220","line":""},
{"lineNum":" 1221","line":"        let u = Timespec::new(1, 2);"},
{"lineNum":" 1222","line":"        let v = Timespec::new(2, 3);"},
{"lineNum":" 1223","line":"        let w = u - v;"},
{"lineNum":" 1224","line":"        assert_eq!(w.num_nanoseconds(), Some(-super::NSEC_PER_SEC as i64 - 1));"},
{"lineNum":" 1225","line":"    }"},
{"lineNum":" 1226","line":""},
{"lineNum":" 1227","line":"    #[test]"},
{"lineNum":" 1228","line":"    fn test_time_sub() {"},
{"lineNum":" 1229","line":"        let a = ::now();"},
{"lineNum":" 1230","line":"        let b = at(a.to_timespec() + Duration::seconds(5));"},
{"lineNum":" 1231","line":"        let c = b - a;"},
{"lineNum":" 1232","line":"        assert_eq!(c.num_nanoseconds(), Some(super::NSEC_PER_SEC as i64 * 5));"},
{"lineNum":" 1233","line":"    }"},
{"lineNum":" 1234","line":""},
{"lineNum":" 1235","line":"    #[test]"},
{"lineNum":" 1236","line":"    fn test_steadytime_sub() {"},
{"lineNum":" 1237","line":"        let a = SteadyTime::now();"},
{"lineNum":" 1238","line":"        let b = a + Duration::seconds(1);"},
{"lineNum":" 1239","line":"        assert_eq!(b - a, Duration::seconds(1));"},
{"lineNum":" 1240","line":"        assert_eq!(a - b, Duration::seconds(-1));"},
{"lineNum":" 1241","line":"    }"},
{"lineNum":" 1242","line":""},
{"lineNum":" 1243","line":"    #[test]"},
{"lineNum":" 1244","line":"    fn test_date_before_1970() {"},
{"lineNum":" 1245","line":"        let early = strptime(\"1901-01-06\", \"%F\").unwrap();"},
{"lineNum":" 1246","line":"        let late = strptime(\"2000-01-01\", \"%F\").unwrap();"},
{"lineNum":" 1247","line":"        assert!(early < late);"},
{"lineNum":" 1248","line":"    }"},
{"lineNum":" 1249","line":""},
{"lineNum":" 1250","line":"    #[test]"},
{"lineNum":" 1251","line":"    fn test_dst() {"},
{"lineNum":" 1252","line":"        let _reset = set_time_zone_london_dst();"},
{"lineNum":" 1253","line":"        let utc_in_feb = strptime(\"2015-02-01Z\", \"%F%z\").unwrap();"},
{"lineNum":" 1254","line":"        let utc_in_jun = strptime(\"2015-06-01Z\", \"%F%z\").unwrap();"},
{"lineNum":" 1255","line":"        let utc_in_nov = strptime(\"2015-11-01Z\", \"%F%z\").unwrap();"},
{"lineNum":" 1256","line":"        let local_in_feb = utc_in_feb.to_local();"},
{"lineNum":" 1257","line":"        let local_in_jun = utc_in_jun.to_local();"},
{"lineNum":" 1258","line":"        let local_in_nov = utc_in_nov.to_local();"},
{"lineNum":" 1259","line":""},
{"lineNum":" 1260","line":"        assert_eq!(local_in_feb.tm_mon, 1);"},
{"lineNum":" 1261","line":"        assert_eq!(local_in_feb.tm_hour, 0);"},
{"lineNum":" 1262","line":"        assert_eq!(local_in_feb.tm_utcoff, 0);"},
{"lineNum":" 1263","line":"        assert_eq!(local_in_feb.tm_isdst, 0);"},
{"lineNum":" 1264","line":""},
{"lineNum":" 1265","line":"        assert_eq!(local_in_jun.tm_mon, 5);"},
{"lineNum":" 1266","line":"        assert_eq!(local_in_jun.tm_hour, 1);"},
{"lineNum":" 1267","line":"        assert_eq!(local_in_jun.tm_utcoff, 3600);"},
{"lineNum":" 1268","line":"        assert_eq!(local_in_jun.tm_isdst, 1);"},
{"lineNum":" 1269","line":""},
{"lineNum":" 1270","line":"        assert_eq!(local_in_nov.tm_mon, 10);"},
{"lineNum":" 1271","line":"        assert_eq!(local_in_nov.tm_hour, 0);"},
{"lineNum":" 1272","line":"        assert_eq!(local_in_nov.tm_utcoff, 0);"},
{"lineNum":" 1273","line":"        assert_eq!(local_in_nov.tm_isdst, 0)"},
{"lineNum":" 1274","line":"    }"},
{"lineNum":" 1275","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test_server-9ef2987148640087", "date" : "2016-02-17 13:46:05", "instrumented" : 3, "covered" : 3,};
var merged_data = [];
