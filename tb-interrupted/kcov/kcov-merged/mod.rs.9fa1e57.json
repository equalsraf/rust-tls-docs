var data = {lines:[
{"lineNum":"    1","line":"// Copyright 2015 The Rust Project Developers. See the COPYRIGHT"},
{"lineNum":"    2","line":"// file at the top-level directory of this distribution and at"},
{"lineNum":"    3","line":"// http://rust-lang.org/COPYRIGHT."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or"},
{"lineNum":"    6","line":"// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license"},
{"lineNum":"    7","line":"// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your"},
{"lineNum":"    8","line":"// option. This file may not be copied, modified, or distributed"},
{"lineNum":"    9","line":"// except according to those terms."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"use std::io;"},
{"lineNum":"   12","line":"use std::mem;"},
{"lineNum":"   13","line":"use std::net::{TcpListener, TcpStream, UdpSocket};"},
{"lineNum":"   14","line":"use std::os::unix::io::FromRawFd;"},
{"lineNum":"   15","line":"use libc::{self, c_int, ioctl, FIOCLEX};"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"mod impls;"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"pub use libc as c;"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"pub struct Socket {"},
{"lineNum":"   22","line":"    fd: c_int,"},
{"lineNum":"   23","line":"}"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"impl Socket {"},
{"lineNum":"   26","line":"    pub fn new(family: c_int, ty: c_int) -> io::Result<Socket> {","class":"lineCov","hits":"1","order":"1450",},
{"lineNum":"   27","line":"        unsafe {"},
{"lineNum":"   28","line":"            let fd = try!(::cvt(libc::socket(family, ty, 0)));","class":"lineCov","hits":"1","order":"1451",},
{"lineNum":"   29","line":"            ioctl(fd, FIOCLEX);","class":"lineCov","hits":"1","order":"1452",},
{"lineNum":"   30","line":"            Ok(Socket { fd: fd })","class":"lineCov","hits":"1","order":"1453",},
{"lineNum":"   31","line":"        }","class":"lineCov","hits":"1","order":"1454",},
{"lineNum":"   32","line":"    }","class":"lineCov","hits":"1","order":"1455",},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"    pub fn raw(&self) -> c_int { self.fd }","class":"lineCov","hits":"1","order":"1456",},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"    fn into_fd(self) -> c_int {","class":"lineCov","hits":"1","order":"1457",},
{"lineNum":"   37","line":"        let fd = self.fd;","class":"lineCov","hits":"1","order":"1458",},
{"lineNum":"   38","line":"        mem::forget(self);","class":"lineCov","hits":"1","order":"1459",},
{"lineNum":"   39","line":"        fd","class":"lineCov","hits":"1","order":"1460",},
{"lineNum":"   40","line":"    }","class":"lineCov","hits":"1","order":"1461",},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"    pub fn into_tcp_listener(self) -> TcpListener {","class":"lineCov","hits":"1","order":"1462",},
{"lineNum":"   43","line":"        unsafe { TcpListener::from_raw_fd(self.into_fd()) }","class":"lineCov","hits":"1","order":"1463",},
{"lineNum":"   44","line":"    }","class":"lineCov","hits":"1","order":"1464",},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"    pub fn into_tcp_stream(self) -> TcpStream {"},
{"lineNum":"   47","line":"        unsafe { TcpStream::from_raw_fd(self.into_fd()) }"},
{"lineNum":"   48","line":"    }"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"    pub fn into_udp_socket(self) -> UdpSocket {"},
{"lineNum":"   51","line":"        unsafe { UdpSocket::from_raw_fd(self.into_fd()) }"},
{"lineNum":"   52","line":"    }"},
{"lineNum":"   53","line":"}"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"impl ::FromInner for Socket {"},
{"lineNum":"   56","line":"    type Inner = c_int;"},
{"lineNum":"   57","line":"    fn from_inner(fd: c_int) -> Socket {"},
{"lineNum":"   58","line":"        Socket { fd: fd }"},
{"lineNum":"   59","line":"    }"},
{"lineNum":"   60","line":"}"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"impl Drop for Socket {"},
{"lineNum":"   63","line":"    fn drop(&mut self) {","class":"lineNoCov","hits":"0",},
{"lineNum":"   64","line":"        unsafe {"},
{"lineNum":"   65","line":"            let _ = libc::close(self.fd);","class":"lineNoCov","hits":"0",},
{"lineNum":"   66","line":"        }"},
{"lineNum":"   67","line":"    }","class":"lineNoCov","hits":"0",},
{"lineNum":"   68","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test_server-9ef2987148640087", "date" : "2016-02-17 14:25:27", "instrumented" : 18, "covered" : 15,};
var merged_data = [];
