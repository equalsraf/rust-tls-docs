var data = {lines:[
{"lineNum":"    1","line":"use {sys, Evented, Token};"},
{"lineNum":"    2","line":"use event::{EventSet, IoEvent, PollOpt};","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"    3","line":"use std::{fmt, io};"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"pub struct Poll {"},
{"lineNum":"    6","line":"    selector: sys::Selector,"},
{"lineNum":"    7","line":"    events: sys::Events,"},
{"lineNum":"    8","line":"}"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"impl Poll {"},
{"lineNum":"   11","line":"    pub fn new() -> io::Result<Poll> {","class":"lineCov","hits":"1","order":"638","possible_hits":"1",},
{"lineNum":"   12","line":"        Ok(Poll {","class":"linePartCov","hits":"1","order":"639","possible_hits":"3",},
{"lineNum":"   13","line":"            selector: try!(sys::Selector::new()),","class":"linePartCov","hits":"1","order":"640","possible_hits":"3",},
{"lineNum":"   14","line":"            events: sys::Events::new(),","class":"linePartCov","hits":"1","order":"651","possible_hits":"2",},
{"lineNum":"   15","line":"        })"},
{"lineNum":"   16","line":"    }","class":"linePartCov","hits":"1","order":"679","possible_hits":"3",},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"    pub fn register<E: ?Sized>(&mut self, io: &E, token: Token, interest: EventSet, opts: PollOpt) -> io::Result<()>"},
{"lineNum":"   19","line":"        where E: Evented"},
{"lineNum":"   20","line":"    {","class":"linePartCov","hits":"6","order":"895","possible_hits":"9",},
{"lineNum":"   21","line":"        trace!(\"registering with poller\");"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"        // Register interests for this socket"},
{"lineNum":"   24","line":"        try!(io.register(&mut self.selector, token, interest, opts));","class":"lineCov","hits":"3","order":"911","possible_hits":"3",},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"        Ok(())"},
{"lineNum":"   27","line":"    }"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"    pub fn reregister<E: ?Sized>(&mut self, io: &E, token: Token, interest: EventSet, opts: PollOpt) -> io::Result<()>"},
{"lineNum":"   30","line":"        where E: Evented"},
{"lineNum":"   31","line":"    {","class":"linePartCov","hits":"2","order":"1739","possible_hits":"3",},
{"lineNum":"   32","line":"        trace!(\"registering with poller\");"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"        // Register interests for this socket"},
{"lineNum":"   35","line":"        try!(io.reregister(&mut self.selector, token, interest, opts));","class":"lineCov","hits":"1","order":"1740","possible_hits":"1",},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"        Ok(())"},
{"lineNum":"   38","line":"    }"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"    pub fn deregister<E: ?Sized>(&mut self, io: &E) -> io::Result<()>"},
{"lineNum":"   41","line":"        where E: Evented"},
{"lineNum":"   42","line":"    {"},
{"lineNum":"   43","line":"        trace!(\"deregistering IO with poller\");"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"        // Deregister interests for this socket"},
{"lineNum":"   46","line":"        try!(io.deregister(&mut self.selector));"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"        Ok(())"},
{"lineNum":"   49","line":"    }"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"    pub fn poll(&mut self, timeout_ms: Option<usize>) -> io::Result<usize> {","class":"lineCov","hits":"1","order":"1259","possible_hits":"1",},
{"lineNum":"   52","line":"        try!(self.selector.select(&mut self.events, timeout_ms));","class":"lineCov","hits":"1","order":"1260","possible_hits":"1",},
{"lineNum":"   53","line":"        Ok(self.events.len())","class":"lineCov","hits":"1","order":"1273","possible_hits":"1",},
{"lineNum":"   54","line":"    }","class":"linePartCov","hits":"1","order":"1277","possible_hits":"2",},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"    pub fn event(&self, idx: usize) -> IoEvent {","class":"lineCov","hits":"1","order":"1289","possible_hits":"1",},
{"lineNum":"   57","line":"        self.events.get(idx)","class":"lineCov","hits":"1","order":"1290","possible_hits":"1",},
{"lineNum":"   58","line":"    }","class":"linePartCov","hits":"1","order":"1316","possible_hits":"2",},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"    pub fn events(&self) -> Events {"},
{"lineNum":"   61","line":"        Events {"},
{"lineNum":"   62","line":"            curr: 0,"},
{"lineNum":"   63","line":"            poll: self,"},
{"lineNum":"   64","line":"        }"},
{"lineNum":"   65","line":"    }"},
{"lineNum":"   66","line":"}"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"impl fmt::Debug for Poll {"},
{"lineNum":"   69","line":"    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {"},
{"lineNum":"   70","line":"        write!(fmt, \"Poll\")"},
{"lineNum":"   71","line":"    }"},
{"lineNum":"   72","line":"}"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"pub struct Events<\'a> {"},
{"lineNum":"   75","line":"    curr: usize,"},
{"lineNum":"   76","line":"    poll: &\'a Poll,"},
{"lineNum":"   77","line":"}"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"impl<\'a> Iterator for Events<\'a> {"},
{"lineNum":"   80","line":"    type Item = IoEvent;"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"    fn next(&mut self) -> Option<IoEvent> {"},
{"lineNum":"   83","line":"        if self.curr == self.poll.events.len() {"},
{"lineNum":"   84","line":"            return None;"},
{"lineNum":"   85","line":"        }"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"        let ret = self.poll.event(self.curr);"},
{"lineNum":"   88","line":"        self.curr += 1;"},
{"lineNum":"   89","line":"        Some(ret)"},
{"lineNum":"   90","line":"    }"},
{"lineNum":"   91","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test_mio-b9fce113d2acf305", "date" : "2016-02-17 13:45:59", "instrumented" : 17, "covered" : 16,};
var merged_data = [];
