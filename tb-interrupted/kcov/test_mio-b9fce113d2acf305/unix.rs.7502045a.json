var data = {lines:[
{"lineNum":"    1","line":"use {io, sys, Evented, EventSet, Io, PollOpt, Selector, Token, TryAccept};"},
{"lineNum":"    2","line":"use io::MapNonBlock;"},
{"lineNum":"    3","line":"use std::io::{Read, Write};"},
{"lineNum":"    4","line":"use std::path::Path;"},
{"lineNum":"    5","line":"use bytes::{Buf, MutBuf};"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"#[derive(Debug)]"},
{"lineNum":"    8","line":"pub struct UnixSocket {"},
{"lineNum":"    9","line":"    sys: sys::UnixSocket,"},
{"lineNum":"   10","line":"}"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"impl UnixSocket {"},
{"lineNum":"   13","line":"    /// Returns a new, unbound, non-blocking Unix domain socket"},
{"lineNum":"   14","line":"    pub fn stream() -> io::Result<UnixSocket> {"},
{"lineNum":"   15","line":"        sys::UnixSocket::stream()"},
{"lineNum":"   16","line":"            .map(From::from)"},
{"lineNum":"   17","line":"    }"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"    /// Connect the socket to the specified address"},
{"lineNum":"   20","line":"    pub fn connect<P: AsRef<Path> + ?Sized>(self, addr: &P) -> io::Result<(UnixStream, bool)> {"},
{"lineNum":"   21","line":"        let complete = try!(self.sys.connect(addr));"},
{"lineNum":"   22","line":"        Ok((From::from(self.sys), complete))"},
{"lineNum":"   23","line":"    }"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"    /// Bind the socket to the specified address"},
{"lineNum":"   26","line":"    pub fn bind<P: AsRef<Path> + ?Sized>(&self, addr: &P) -> io::Result<()> {"},
{"lineNum":"   27","line":"        self.sys.bind(addr)"},
{"lineNum":"   28","line":"    }"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"    /// Listen for incoming requests"},
{"lineNum":"   31","line":"    pub fn listen(self, backlog: usize) -> io::Result<UnixListener> {"},
{"lineNum":"   32","line":"        try!(self.sys.listen(backlog));"},
{"lineNum":"   33","line":"        Ok(From::from(self.sys))"},
{"lineNum":"   34","line":"    }"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"    pub fn try_clone(&self) -> io::Result<UnixSocket> {"},
{"lineNum":"   37","line":"        self.sys.try_clone()"},
{"lineNum":"   38","line":"            .map(From::from)"},
{"lineNum":"   39","line":"    }"},
{"lineNum":"   40","line":"}"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"impl Evented for UnixSocket {"},
{"lineNum":"   43","line":"    fn register(&self, selector: &mut Selector, token: Token, interest: EventSet, opts: PollOpt) -> io::Result<()> {"},
{"lineNum":"   44","line":"        self.sys.register(selector, token, interest, opts)"},
{"lineNum":"   45","line":"    }"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"    fn reregister(&self, selector: &mut Selector, token: Token, interest: EventSet, opts: PollOpt) -> io::Result<()> {"},
{"lineNum":"   48","line":"        self.sys.reregister(selector, token, interest, opts)"},
{"lineNum":"   49","line":"    }"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"    fn deregister(&self, selector: &mut Selector) -> io::Result<()> {"},
{"lineNum":"   52","line":"        self.sys.deregister(selector)"},
{"lineNum":"   53","line":"    }"},
{"lineNum":"   54","line":"}"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"impl From<sys::UnixSocket> for UnixSocket {"},
{"lineNum":"   57","line":"    fn from(sys: sys::UnixSocket) -> UnixSocket {"},
{"lineNum":"   58","line":"        UnixSocket { sys: sys }"},
{"lineNum":"   59","line":"    }"},
{"lineNum":"   60","line":"}"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"/*"},
{"lineNum":"   63","line":" *"},
{"lineNum":"   64","line":" * ===== UnixStream ====="},
{"lineNum":"   65","line":" *"},
{"lineNum":"   66","line":" */"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"#[derive(Debug)]"},
{"lineNum":"   69","line":"pub struct UnixStream {"},
{"lineNum":"   70","line":"    sys: sys::UnixSocket,"},
{"lineNum":"   71","line":"}"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"impl UnixStream {"},
{"lineNum":"   74","line":"    pub fn connect<P: AsRef<Path> + ?Sized>(path: &P) -> io::Result<UnixStream> {"},
{"lineNum":"   75","line":"        UnixSocket::stream()"},
{"lineNum":"   76","line":"            .and_then(|sock| sock.connect(path))"},
{"lineNum":"   77","line":"            .map(|(sock, _)| sock)"},
{"lineNum":"   78","line":"    }"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"    pub fn try_clone(&self) -> io::Result<UnixStream> {"},
{"lineNum":"   81","line":"        self.sys.try_clone()"},
{"lineNum":"   82","line":"            .map(From::from)"},
{"lineNum":"   83","line":"    }"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"    pub fn read_recv_fd(&mut self, buf: &mut [u8]) -> io::Result<(usize, Option<RawFd>)> {"},
{"lineNum":"   86","line":"        self.sys.read_recv_fd(buf)"},
{"lineNum":"   87","line":"    }"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"    pub fn try_read_recv_fd(&mut self, buf: &mut [u8]) -> io::Result<Option<(usize, Option<RawFd>)>> {"},
{"lineNum":"   90","line":"        self.read_recv_fd(buf).map_non_block()"},
{"lineNum":"   91","line":"    }"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"    pub fn try_read_buf_recv_fd<B: MutBuf>(&mut self, buf: &mut B) -> io::Result<Option<(usize, Option<RawFd>)>> {"},
{"lineNum":"   94","line":"        let res = self.try_read_recv_fd(unsafe { buf.mut_bytes() });"},
{"lineNum":"   95","line":"        if let Ok(Some((cnt, _))) = res {"},
{"lineNum":"   96","line":"            unsafe { buf.advance(cnt); }"},
{"lineNum":"   97","line":"        }"},
{"lineNum":"   98","line":"        res"},
{"lineNum":"   99","line":"    }"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"    pub fn write_send_fd(&mut self, buf: &[u8], fd: RawFd) -> io::Result<usize> {"},
{"lineNum":"  102","line":"        self.sys.write_send_fd(buf, fd)"},
{"lineNum":"  103","line":"    }"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"    pub fn try_write_send_fd(&mut self, buf: &[u8], fd: RawFd) -> io::Result<Option<usize>> {"},
{"lineNum":"  106","line":"        self.write_send_fd(buf, fd).map_non_block()"},
{"lineNum":"  107","line":"    }"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"    pub fn try_write_buf_send_fd<B: Buf>(&mut self, buf: &mut B, fd: RawFd) -> io::Result<Option<usize>> {"},
{"lineNum":"  110","line":"        let res = self.try_write_send_fd(buf.bytes(), fd);"},
{"lineNum":"  111","line":"        if let Ok(Some(cnt)) = res {"},
{"lineNum":"  112","line":"            buf.advance(cnt);"},
{"lineNum":"  113","line":"        }"},
{"lineNum":"  114","line":"        res"},
{"lineNum":"  115","line":"    }"},
{"lineNum":"  116","line":"}"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"impl Read for UnixStream {"},
{"lineNum":"  119","line":"    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {"},
{"lineNum":"  120","line":"        self.sys.read(buf)"},
{"lineNum":"  121","line":"    }"},
{"lineNum":"  122","line":"}"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"impl Write for UnixStream {"},
{"lineNum":"  125","line":"    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {"},
{"lineNum":"  126","line":"        self.sys.write(buf)"},
{"lineNum":"  127","line":"    }"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"    fn flush(&mut self) -> io::Result<()> {"},
{"lineNum":"  130","line":"        self.sys.flush()"},
{"lineNum":"  131","line":"    }"},
{"lineNum":"  132","line":"}"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"impl Evented for UnixStream {"},
{"lineNum":"  135","line":"    fn register(&self, selector: &mut Selector, token: Token, interest: EventSet, opts: PollOpt) -> io::Result<()> {"},
{"lineNum":"  136","line":"        self.sys.register(selector, token, interest, opts)"},
{"lineNum":"  137","line":"    }"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"    fn reregister(&self, selector: &mut Selector, token: Token, interest: EventSet, opts: PollOpt) -> io::Result<()> {"},
{"lineNum":"  140","line":"        self.sys.reregister(selector, token, interest, opts)"},
{"lineNum":"  141","line":"    }"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"    fn deregister(&self, selector: &mut Selector) -> io::Result<()> {"},
{"lineNum":"  144","line":"        self.sys.deregister(selector)"},
{"lineNum":"  145","line":"    }"},
{"lineNum":"  146","line":"}"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"impl From<sys::UnixSocket> for UnixStream {"},
{"lineNum":"  149","line":"    fn from(sys: sys::UnixSocket) -> UnixStream {"},
{"lineNum":"  150","line":"        UnixStream { sys: sys }"},
{"lineNum":"  151","line":"    }"},
{"lineNum":"  152","line":"}"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"/*"},
{"lineNum":"  155","line":" *"},
{"lineNum":"  156","line":" * ===== UnixListener ====="},
{"lineNum":"  157","line":" *"},
{"lineNum":"  158","line":" */"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"#[derive(Debug)]"},
{"lineNum":"  161","line":"pub struct UnixListener {"},
{"lineNum":"  162","line":"    sys: sys::UnixSocket,"},
{"lineNum":"  163","line":"}"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"impl UnixListener {"},
{"lineNum":"  166","line":"    pub fn bind<P: AsRef<Path> + ?Sized>(addr: &P) -> io::Result<UnixListener> {"},
{"lineNum":"  167","line":"        UnixSocket::stream().and_then(|sock| {"},
{"lineNum":"  168","line":"            try!(sock.bind(addr));"},
{"lineNum":"  169","line":"            sock.listen(256)"},
{"lineNum":"  170","line":"        })"},
{"lineNum":"  171","line":"    }"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"    pub fn accept(&self) -> io::Result<Option<UnixStream>> {"},
{"lineNum":"  174","line":"        self.sys.accept()"},
{"lineNum":"  175","line":"            .map(|opt| opt.map(From::from))"},
{"lineNum":"  176","line":"    }"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"    pub fn try_clone(&self) -> io::Result<UnixListener> {"},
{"lineNum":"  179","line":"        self.sys.try_clone()"},
{"lineNum":"  180","line":"            .map(From::from)"},
{"lineNum":"  181","line":"    }"},
{"lineNum":"  182","line":"}"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"impl Evented for UnixListener {"},
{"lineNum":"  185","line":"    fn register(&self, selector: &mut Selector, token: Token, interest: EventSet, opts: PollOpt) -> io::Result<()> {"},
{"lineNum":"  186","line":"        self.sys.register(selector, token, interest, opts)"},
{"lineNum":"  187","line":"    }"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"    fn reregister(&self, selector: &mut Selector, token: Token, interest: EventSet, opts: PollOpt) -> io::Result<()> {"},
{"lineNum":"  190","line":"        self.sys.reregister(selector, token, interest, opts)"},
{"lineNum":"  191","line":"    }"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"    fn deregister(&self, selector: &mut Selector) -> io::Result<()> {"},
{"lineNum":"  194","line":"        self.sys.deregister(selector)"},
{"lineNum":"  195","line":"    }"},
{"lineNum":"  196","line":"}"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"impl TryAccept for UnixListener {"},
{"lineNum":"  199","line":"    type Output = UnixStream;"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"    fn accept(&self) -> io::Result<Option<UnixStream>> {"},
{"lineNum":"  202","line":"        UnixListener::accept(self)"},
{"lineNum":"  203","line":"    }"},
{"lineNum":"  204","line":"}"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"impl From<sys::UnixSocket> for UnixListener {"},
{"lineNum":"  207","line":"    fn from(sys: sys::UnixSocket) -> UnixListener {"},
{"lineNum":"  208","line":"        UnixListener { sys: sys }"},
{"lineNum":"  209","line":"    }"},
{"lineNum":"  210","line":"}"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"/*"},
{"lineNum":"  213","line":" *"},
{"lineNum":"  214","line":" * ===== Pipe ====="},
{"lineNum":"  215","line":" *"},
{"lineNum":"  216","line":" */"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"pub fn pipe() -> io::Result<(PipeReader, PipeWriter)> {","class":"lineCov","hits":"1","order":"840","possible_hits":"1",},
{"lineNum":"  219","line":"    let (rd, wr) = try!(sys::pipe());","class":"linePartCov","hits":"1","order":"841","possible_hits":"2",},
{"lineNum":"  220","line":"    Ok((From::from(rd), From::from(wr)))","class":"linePartCov","hits":"2","order":"880","possible_hits":"4",},
{"lineNum":"  221","line":"}","class":"linePartCov","hits":"1","order":"885","possible_hits":"2",},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"#[derive(Debug)]"},
{"lineNum":"  224","line":"pub struct PipeReader {"},
{"lineNum":"  225","line":"    io: Io,"},
{"lineNum":"  226","line":"}"},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"impl Read for PipeReader {"},
{"lineNum":"  229","line":"    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {"},
{"lineNum":"  230","line":"        self.io.read(buf)"},
{"lineNum":"  231","line":"    }"},
{"lineNum":"  232","line":"}"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"impl<\'a> Read for &\'a PipeReader {"},
{"lineNum":"  235","line":"    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  236","line":"        (&self.io).read(buf)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  237","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  238","line":"}"},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"impl Evented for PipeReader {"},
{"lineNum":"  241","line":"    fn register(&self, selector: &mut Selector, token: Token, interest: EventSet, opts: PollOpt) -> io::Result<()> {","class":"lineCov","hits":"1","order":"933","possible_hits":"1",},
{"lineNum":"  242","line":"        self.io.register(selector, token, interest, opts)","class":"lineCov","hits":"1","order":"934","possible_hits":"1",},
{"lineNum":"  243","line":"    }","class":"linePartCov","hits":"1","order":"1000","possible_hits":"2",},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"    fn reregister(&self, selector: &mut Selector, token: Token, interest: EventSet, opts: PollOpt) -> io::Result<()> {"},
{"lineNum":"  246","line":"        self.io.reregister(selector, token, interest, opts)"},
{"lineNum":"  247","line":"    }"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"    fn deregister(&self, selector: &mut Selector) -> io::Result<()> {"},
{"lineNum":"  250","line":"        self.io.deregister(selector)"},
{"lineNum":"  251","line":"    }"},
{"lineNum":"  252","line":"}"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"impl From<Io> for PipeReader {"},
{"lineNum":"  255","line":"    fn from(io: Io) -> PipeReader {","class":"lineCov","hits":"1","order":"881","possible_hits":"1",},
{"lineNum":"  256","line":"        PipeReader { io: io }"},
{"lineNum":"  257","line":"    }","class":"linePartCov","hits":"1","order":"882","possible_hits":"2",},
{"lineNum":"  258","line":"}"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"#[derive(Debug)]"},
{"lineNum":"  261","line":"pub struct PipeWriter {"},
{"lineNum":"  262","line":"    io: Io,"},
{"lineNum":"  263","line":"}"},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"impl Write for PipeWriter {"},
{"lineNum":"  266","line":"    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {"},
{"lineNum":"  267","line":"        self.io.write(buf)"},
{"lineNum":"  268","line":"    }"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"    fn flush(&mut self) -> io::Result<()> {"},
{"lineNum":"  271","line":"        self.io.flush()"},
{"lineNum":"  272","line":"    }"},
{"lineNum":"  273","line":"}"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"impl<\'a> Write for &\'a PipeWriter {"},
{"lineNum":"  276","line":"    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {"},
{"lineNum":"  277","line":"        (&self.io).write(buf)"},
{"lineNum":"  278","line":"    }"},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"    fn flush(&mut self) -> io::Result<()> {"},
{"lineNum":"  281","line":"        (&self.io).flush()"},
{"lineNum":"  282","line":"    }"},
{"lineNum":"  283","line":"}"},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"impl Evented for PipeWriter {"},
{"lineNum":"  286","line":"    fn register(&self, selector: &mut Selector, token: Token, interest: EventSet, opts: PollOpt) -> io::Result<()> {"},
{"lineNum":"  287","line":"        self.io.register(selector, token, interest, opts)"},
{"lineNum":"  288","line":"    }"},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"    fn reregister(&self, selector: &mut Selector, token: Token, interest: EventSet, opts: PollOpt) -> io::Result<()> {"},
{"lineNum":"  291","line":"        self.io.reregister(selector, token, interest, opts)"},
{"lineNum":"  292","line":"    }"},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"    fn deregister(&self, selector: &mut Selector) -> io::Result<()> {"},
{"lineNum":"  295","line":"        self.io.deregister(selector)"},
{"lineNum":"  296","line":"    }"},
{"lineNum":"  297","line":"}"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"impl From<Io> for PipeWriter {"},
{"lineNum":"  300","line":"    fn from(io: Io) -> PipeWriter {","class":"lineCov","hits":"1","order":"883","possible_hits":"1",},
{"lineNum":"  301","line":"        PipeWriter { io: io }"},
{"lineNum":"  302","line":"    }","class":"linePartCov","hits":"1","order":"884","possible_hits":"2",},
{"lineNum":"  303","line":"}"},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"/*"},
{"lineNum":"  306","line":" *"},
{"lineNum":"  307","line":" * ===== Conversions ====="},
{"lineNum":"  308","line":" *"},
{"lineNum":"  309","line":" */"},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":"use std::os::unix::io::{RawFd, AsRawFd, FromRawFd};"},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"impl AsRawFd for UnixSocket {"},
{"lineNum":"  314","line":"    fn as_raw_fd(&self) -> RawFd {"},
{"lineNum":"  315","line":"        self.sys.as_raw_fd()"},
{"lineNum":"  316","line":"    }"},
{"lineNum":"  317","line":"}"},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"impl FromRawFd for UnixSocket {"},
{"lineNum":"  320","line":"    unsafe fn from_raw_fd(fd: RawFd) -> UnixSocket {"},
{"lineNum":"  321","line":"        UnixSocket { sys: FromRawFd::from_raw_fd(fd) }"},
{"lineNum":"  322","line":"    }"},
{"lineNum":"  323","line":"}"},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"impl AsRawFd for UnixStream {"},
{"lineNum":"  326","line":"    fn as_raw_fd(&self) -> RawFd {"},
{"lineNum":"  327","line":"        self.sys.as_raw_fd()"},
{"lineNum":"  328","line":"    }"},
{"lineNum":"  329","line":"}"},
{"lineNum":"  330","line":""},
{"lineNum":"  331","line":"impl FromRawFd for UnixStream {"},
{"lineNum":"  332","line":"    unsafe fn from_raw_fd(fd: RawFd) -> UnixStream {"},
{"lineNum":"  333","line":"        UnixStream { sys: FromRawFd::from_raw_fd(fd) }"},
{"lineNum":"  334","line":"    }"},
{"lineNum":"  335","line":"}"},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"impl AsRawFd for UnixListener {"},
{"lineNum":"  338","line":"    fn as_raw_fd(&self) -> RawFd {"},
{"lineNum":"  339","line":"        self.sys.as_raw_fd()"},
{"lineNum":"  340","line":"    }"},
{"lineNum":"  341","line":"}"},
{"lineNum":"  342","line":""},
{"lineNum":"  343","line":"impl FromRawFd for UnixListener {"},
{"lineNum":"  344","line":"    unsafe fn from_raw_fd(fd: RawFd) -> UnixListener {"},
{"lineNum":"  345","line":"        UnixListener { sys: FromRawFd::from_raw_fd(fd) }"},
{"lineNum":"  346","line":"    }"},
{"lineNum":"  347","line":"}"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"impl AsRawFd for PipeReader {"},
{"lineNum":"  350","line":"    fn as_raw_fd(&self) -> RawFd {"},
{"lineNum":"  351","line":"        self.io.as_raw_fd()"},
{"lineNum":"  352","line":"    }"},
{"lineNum":"  353","line":"}"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"impl FromRawFd for PipeReader {"},
{"lineNum":"  356","line":"    unsafe fn from_raw_fd(fd: RawFd) -> PipeReader {"},
{"lineNum":"  357","line":"        PipeReader { io: FromRawFd::from_raw_fd(fd) }"},
{"lineNum":"  358","line":"    }"},
{"lineNum":"  359","line":"}"},
{"lineNum":"  360","line":""},
{"lineNum":"  361","line":"impl AsRawFd for PipeWriter {"},
{"lineNum":"  362","line":"    fn as_raw_fd(&self) -> RawFd {"},
{"lineNum":"  363","line":"        self.io.as_raw_fd()"},
{"lineNum":"  364","line":"    }"},
{"lineNum":"  365","line":"}"},
{"lineNum":"  366","line":""},
{"lineNum":"  367","line":"impl FromRawFd for PipeWriter {"},
{"lineNum":"  368","line":"    unsafe fn from_raw_fd(fd: RawFd) -> PipeWriter {"},
{"lineNum":"  369","line":"        PipeWriter { io: FromRawFd::from_raw_fd(fd) }"},
{"lineNum":"  370","line":"    }"},
{"lineNum":"  371","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test_mio-b9fce113d2acf305", "date" : "2016-02-17 13:45:59", "instrumented" : 14, "covered" : 11,};
var merged_data = [];
