var data = {lines:[
{"lineNum":"    1","line":"use token::Token;"},
{"lineNum":"    2","line":"use util::Slab;"},
{"lineNum":"    3","line":"use time::precise_time_ns;"},
{"lineNum":"    4","line":"use std::{usize, iter};"},
{"lineNum":"    5","line":"use std::cmp::max;","class":"lineCov","hits":"1","order":"1021","possible_hits":"1",},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"use self::TimerErrorKind::TimerOverflow;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"const EMPTY: Token = Token(usize::MAX);"},
{"lineNum":"   10","line":"const NS_PER_MS: u64 = 1_000_000;"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"// Implements coarse-grained timeouts using an algorithm based on hashed timing"},
{"lineNum":"   13","line":"// wheels by Varghese & Lauck."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":"// TODO:"},
{"lineNum":"   16","line":"// * Handle the case when the timer falls more than an entire wheel behind. There"},
{"lineNum":"   17","line":"//   is no point to loop multiple times around the wheel in one go."},
{"lineNum":"   18","line":"// * New type for tick, now() -> Tick"},
{"lineNum":"   19","line":"#[derive(Debug)]"},
{"lineNum":"   20","line":"pub struct Timer<T> {"},
{"lineNum":"   21","line":"    // Size of each tick in milliseconds"},
{"lineNum":"   22","line":"    tick_ms: u64,"},
{"lineNum":"   23","line":"    // Slab of timeout entries"},
{"lineNum":"   24","line":"    entries: Slab<Entry<T>>,"},
{"lineNum":"   25","line":"    // Timeout wheel. Each tick, the timer will look at the next slot for"},
{"lineNum":"   26","line":"    // timeouts that match the current tick."},
{"lineNum":"   27","line":"    wheel: Vec<Token>,"},
{"lineNum":"   28","line":"    // Tick 0\'s time in milliseconds"},
{"lineNum":"   29","line":"    start: u64,"},
{"lineNum":"   30","line":"    // The current tick"},
{"lineNum":"   31","line":"    tick: u64,"},
{"lineNum":"   32","line":"    // The next entry to possibly timeout"},
{"lineNum":"   33","line":"    next: Token,"},
{"lineNum":"   34","line":"    // Masks the target tick to get the slot"},
{"lineNum":"   35","line":"    mask: u64,"},
{"lineNum":"   36","line":"}"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"#[derive(Copy, Clone)]"},
{"lineNum":"   39","line":"pub struct Timeout {"},
{"lineNum":"   40","line":"    // Reference into the timer entry slab"},
{"lineNum":"   41","line":"    token: Token,"},
{"lineNum":"   42","line":"    // Tick that it should matchup with"},
{"lineNum":"   43","line":"    tick: u64,"},
{"lineNum":"   44","line":"}"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"impl<T> Timer<T> {"},
{"lineNum":"   47","line":"    pub fn new(tick_ms: u64, mut slots: usize, mut capacity: usize) -> Timer<T> {","class":"lineCov","hits":"2","order":"684","possible_hits":"2",},
{"lineNum":"   48","line":"        slots = slots.next_power_of_two();","class":"lineCov","hits":"1","order":"685","possible_hits":"1",},
{"lineNum":"   49","line":"        capacity = capacity.next_power_of_two();","class":"lineCov","hits":"1","order":"695","possible_hits":"1",},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"        Timer {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   52","line":"            tick_ms: tick_ms,","class":"lineCov","hits":"1","order":"696","possible_hits":"1",},
{"lineNum":"   53","line":"            entries: Slab::new(capacity),","class":"lineCov","hits":"1","order":"697","possible_hits":"1",},
{"lineNum":"   54","line":"            wheel: iter::repeat(EMPTY).take(slots).collect(),","class":"lineCov","hits":"2","order":"796","possible_hits":"2",},
{"lineNum":"   55","line":"            start: 0,","class":"lineCov","hits":"1","order":"817","possible_hits":"1",},
{"lineNum":"   56","line":"            tick: 0,","class":"lineCov","hits":"1","order":"818","possible_hits":"1",},
{"lineNum":"   57","line":"            next: EMPTY,"},
{"lineNum":"   58","line":"            mask: (slots as u64) - 1","class":"linePartCov","hits":"1","order":"819","possible_hits":"2",},
{"lineNum":"   59","line":"        }"},
{"lineNum":"   60","line":"    }"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"    #[cfg(test)]"},
{"lineNum":"   63","line":"    pub fn count(&self) -> usize {"},
{"lineNum":"   64","line":"        self.entries.count()"},
{"lineNum":"   65","line":"    }"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"    // Number of ms remaining until the next tick"},
{"lineNum":"   68","line":"    pub fn next_tick_in_ms(&self) -> Option<u64> {","class":"lineCov","hits":"2","order":"1253","possible_hits":"2",},
{"lineNum":"   69","line":"        if self.entries.count() == 0 {","class":"lineCov","hits":"1","order":"1254","possible_hits":"1",},
{"lineNum":"   70","line":"            return None;","class":"lineCov","hits":"1","order":"1257","possible_hits":"1",},
{"lineNum":"   71","line":"        }"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"        let now = self.now_ms();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   74","line":"        let nxt = self.start + (self.tick + 1) * self.tick_ms;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"        if nxt <= now {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   77","line":"            return Some(0);"},
{"lineNum":"   78","line":"        }"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"        Some(nxt - now)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   81","line":"    }"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"    /*"},
{"lineNum":"   84","line":"     *"},
{"lineNum":"   85","line":"     * ===== Initialization ====="},
{"lineNum":"   86","line":"     *"},
{"lineNum":"   87","line":"     */"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"    // Sets the starting time of the timer using the current system time"},
{"lineNum":"   90","line":"    pub fn setup(&mut self) {","class":"linePartCov","hits":"2","order":"1003","possible_hits":"3",},
{"lineNum":"   91","line":"        let now = self.now_ms();","class":"lineCov","hits":"1","order":"1004","possible_hits":"1",},
{"lineNum":"   92","line":"        self.set_start_ms(now);","class":"lineCov","hits":"1","order":"1014","possible_hits":"1",},
{"lineNum":"   93","line":"    }"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"    fn set_start_ms(&mut self, start: u64) {","class":"linePartCov","hits":"2","order":"1015","possible_hits":"3",},
{"lineNum":"   96","line":"        assert!(!self.is_initialized(), \"the timer has already started\");","class":"lineCov","hits":"1","order":"1016","possible_hits":"1",},
{"lineNum":"   97","line":"        self.start = start;","class":"lineCov","hits":"1","order":"1022","possible_hits":"1",},
{"lineNum":"   98","line":"    }"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"    /*"},
{"lineNum":"  101","line":"     *"},
{"lineNum":"  102","line":"     * ===== Timeout create / cancel ====="},
{"lineNum":"  103","line":"     *"},
{"lineNum":"  104","line":"     */"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"    pub fn timeout_ms(&mut self, token: T, delay: u64) -> TimerResult<Timeout> {"},
{"lineNum":"  107","line":"        let at = self.now_ms() + max(0, delay);"},
{"lineNum":"  108","line":"        self.timeout_at_ms(token, at)"},
{"lineNum":"  109","line":"    }"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"    pub fn timeout_at_ms(&mut self, token: T, mut at: u64) -> TimerResult<Timeout> {"},
{"lineNum":"  112","line":"        // Make relative to start"},
{"lineNum":"  113","line":"        at -= self.start;"},
{"lineNum":"  114","line":"        // Calculate tick"},
{"lineNum":"  115","line":"        let mut tick = (at + self.tick_ms - 1) / self.tick_ms;"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"        // Always target at least 1 tick in the future"},
{"lineNum":"  118","line":"        if tick <= self.tick {"},
{"lineNum":"  119","line":"            tick = self.tick + 1;"},
{"lineNum":"  120","line":"        }"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"        self.insert(token, tick)"},
{"lineNum":"  123","line":"    }"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"    pub fn clear(&mut self, timeout: Timeout) -> bool {"},
{"lineNum":"  126","line":"        let links = match self.entries.get(timeout.token) {"},
{"lineNum":"  127","line":"            Some(e) => e.links,"},
{"lineNum":"  128","line":"            None => return false"},
{"lineNum":"  129","line":"        };"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"        // Sanity check"},
{"lineNum":"  132","line":"        if links.tick != timeout.tick {"},
{"lineNum":"  133","line":"            return false;"},
{"lineNum":"  134","line":"        }"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"        self.unlink(&links, timeout.token);"},
{"lineNum":"  137","line":"        self.entries.remove(timeout.token);"},
{"lineNum":"  138","line":"        true"},
{"lineNum":"  139","line":"    }"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"    fn insert(&mut self, token: T, tick: u64) -> TimerResult<Timeout> {"},
{"lineNum":"  142","line":"        // Get the slot for the requested tick"},
{"lineNum":"  143","line":"        let slot = (tick & self.mask) as usize;"},
{"lineNum":"  144","line":"        let curr = self.wheel[slot];"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"        // Insert the new entry"},
{"lineNum":"  147","line":"        let token = try!("},
{"lineNum":"  148","line":"            self.entries.insert(Entry::new(token, tick, curr))"},
{"lineNum":"  149","line":"            .map_err(|_| TimerError::overflow()));"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"        if curr != EMPTY {"},
{"lineNum":"  152","line":"            // If there was a previous entry, set its prev pointer to the new"},
{"lineNum":"  153","line":"            // entry"},
{"lineNum":"  154","line":"            self.entries[curr].links.prev = token;"},
{"lineNum":"  155","line":"        }"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"        // Update the head slot"},
{"lineNum":"  158","line":"        self.wheel[slot] = token;"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"        trace!(\"inserted timout; slot={}; token={:?}\", slot, token);"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"        // Return the new timeout"},
{"lineNum":"  163","line":"        Ok(Timeout {"},
{"lineNum":"  164","line":"            token: token,"},
{"lineNum":"  165","line":"            tick: tick"},
{"lineNum":"  166","line":"        })"},
{"lineNum":"  167","line":"    }"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"    fn unlink(&mut self, links: &EntryLinks, token: Token) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  170","line":"       trace!(\"unlinking timeout; slot={}; token={:?}\","},
{"lineNum":"  171","line":"               self.slot_for(links.tick), token);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"        if links.prev == EMPTY {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  174","line":"            let slot = self.slot_for(links.tick);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  175","line":"            self.wheel[slot] = links.next;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  176","line":"        } else {"},
{"lineNum":"  177","line":"            self.entries[links.prev].links.next = links.next;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  178","line":"        }"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"        if links.next != EMPTY {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  181","line":"            self.entries[links.next].links.prev = links.prev;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"            if token == self.next {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  184","line":"                self.next = links.next;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  185","line":"            }"},
{"lineNum":"  186","line":"        } else if token == self.next {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  187","line":"            self.next = EMPTY;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  188","line":"        }"},
{"lineNum":"  189","line":"    }"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"    /*"},
{"lineNum":"  192","line":"     *"},
{"lineNum":"  193","line":"     * ===== Advance time ====="},
{"lineNum":"  194","line":"     *"},
{"lineNum":"  195","line":"     */"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"    pub fn now(&self) -> u64 {","class":"linePartCov","hits":"2","order":"1619","possible_hits":"3",},
{"lineNum":"  198","line":"        self.ms_to_tick(self.now_ms())","class":"lineCov","hits":"1","order":"1620","possible_hits":"1",},
{"lineNum":"  199","line":"    }"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"    pub fn tick_to(&mut self, now: u64) -> Option<T> {","class":"lineCov","hits":"2","order":"1625","possible_hits":"2",},
{"lineNum":"  202","line":"        trace!(\"tick_to; now={}; tick={}\", now, self.tick);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"        while self.tick <= now {","class":"lineCov","hits":"2","order":"1626","possible_hits":"2",},
{"lineNum":"  205","line":"            let curr = self.next;","class":"lineCov","hits":"1","order":"1627","possible_hits":"1",},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"            trace!(\"ticking; curr={:?}\", curr);"},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"            if curr == EMPTY {","class":"lineCov","hits":"1","order":"1628","possible_hits":"1",},
{"lineNum":"  210","line":"                self.tick += 1;","class":"linePartCov","hits":"1","order":"1629","possible_hits":"2",},
{"lineNum":"  211","line":"                self.next = self.wheel[self.slot_for(self.tick)];","class":"lineCov","hits":"1","order":"1630","possible_hits":"1",},
{"lineNum":"  212","line":"            } else {"},
{"lineNum":"  213","line":"                let links = self.entries[curr].links;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"                if links.tick <= self.tick {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  216","line":"                    trace!(\"triggering; token={:?}\", curr);"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"                    // Unlink will also advance self.next"},
{"lineNum":"  219","line":"                    self.unlink(&links, curr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"                    // Remove and return the token"},
{"lineNum":"  222","line":"                    return self.entries.remove(curr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  223","line":"                        .map(|e| e.token);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  224","line":"                } else {"},
{"lineNum":"  225","line":"                    self.next = links.next;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  226","line":"                }"},
{"lineNum":"  227","line":"            }"},
{"lineNum":"  228","line":"        }"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"        None"},
{"lineNum":"  231","line":"    }"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"    /*"},
{"lineNum":"  234","line":"     *"},
{"lineNum":"  235","line":"     * ===== Misc ====="},
{"lineNum":"  236","line":"     *"},
{"lineNum":"  237","line":"     */"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"    // Timers are initialized when either the current time has been advanced or a timeout has been set"},
{"lineNum":"  240","line":"    #[inline]"},
{"lineNum":"  241","line":"    fn is_initialized(&self) -> bool {","class":"lineCov","hits":"2","order":"1017","possible_hits":"2",},
{"lineNum":"  242","line":"        self.tick > 0 || !self.entries.is_empty()","class":"linePartCov","hits":"2","order":"1018","possible_hits":"3",},
{"lineNum":"  243","line":"    }"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"    #[inline]"},
{"lineNum":"  246","line":"    fn slot_for(&self, tick: u64) -> usize {","class":"linePartCov","hits":"2","order":"1631","possible_hits":"3",},
{"lineNum":"  247","line":"        (self.mask & tick) as usize","class":"lineCov","hits":"1","order":"1632","possible_hits":"1",},
{"lineNum":"  248","line":"    }"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"    // Convert a ms duration into a number of ticks, rounds up"},
{"lineNum":"  251","line":"    #[inline]"},
{"lineNum":"  252","line":"    fn ms_to_tick(&self, ms: u64) -> u64 {","class":"lineCov","hits":"2","order":"1621","possible_hits":"2",},
{"lineNum":"  253","line":"        (ms - self.start) / self.tick_ms","class":"linePartCov","hits":"1","order":"1622","possible_hits":"3",},
{"lineNum":"  254","line":"    }"},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"    #[inline]"},
{"lineNum":"  257","line":"    fn now_ms(&self) -> u64 {","class":"linePartCov","hits":"2","order":"1005","possible_hits":"3",},
{"lineNum":"  258","line":"        precise_time_ns() / NS_PER_MS","class":"lineCov","hits":"1","order":"1006","possible_hits":"1",},
{"lineNum":"  259","line":"    }"},
{"lineNum":"  260","line":"}"},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"// Doubly linked list of timer entries. Allows for efficient insertion /"},
{"lineNum":"  263","line":"// removal of timeouts."},
{"lineNum":"  264","line":"struct Entry<T> {"},
{"lineNum":"  265","line":"    token: T,"},
{"lineNum":"  266","line":"    links: EntryLinks,"},
{"lineNum":"  267","line":"}"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"impl<T> Entry<T> {"},
{"lineNum":"  270","line":"    fn new(token: T, tick: u64, next: Token) -> Entry<T> {"},
{"lineNum":"  271","line":"        Entry {"},
{"lineNum":"  272","line":"            token: token,"},
{"lineNum":"  273","line":"            links: EntryLinks {"},
{"lineNum":"  274","line":"                tick: tick,"},
{"lineNum":"  275","line":"                prev: EMPTY,"},
{"lineNum":"  276","line":"                next: next,"},
{"lineNum":"  277","line":"            },"},
{"lineNum":"  278","line":"        }"},
{"lineNum":"  279","line":"    }"},
{"lineNum":"  280","line":"}"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"#[derive(Copy, Clone)]"},
{"lineNum":"  283","line":"struct EntryLinks {"},
{"lineNum":"  284","line":"    tick: u64,"},
{"lineNum":"  285","line":"    prev: Token,"},
{"lineNum":"  286","line":"    next: Token"},
{"lineNum":"  287","line":"}"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"pub type TimerResult<T> = Result<T, TimerError>;"},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"#[derive(Debug)]"},
{"lineNum":"  292","line":"pub struct TimerError {"},
{"lineNum":"  293","line":"    kind: TimerErrorKind,"},
{"lineNum":"  294","line":"    desc: &\'static str,"},
{"lineNum":"  295","line":"}"},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"impl TimerError {"},
{"lineNum":"  298","line":"    fn overflow() -> TimerError {"},
{"lineNum":"  299","line":"        TimerError {"},
{"lineNum":"  300","line":"            kind: TimerOverflow,"},
{"lineNum":"  301","line":"            desc: \"too many timer entries\""},
{"lineNum":"  302","line":"        }"},
{"lineNum":"  303","line":"    }"},
{"lineNum":"  304","line":"}"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"#[derive(Debug)]"},
{"lineNum":"  307","line":"pub enum TimerErrorKind {"},
{"lineNum":"  308","line":"    TimerOverflow,"},
{"lineNum":"  309","line":"}"},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":"#[cfg(test)]"},
{"lineNum":"  312","line":"mod test {"},
{"lineNum":"  313","line":"    use super::Timer;"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"    #[test]"},
{"lineNum":"  316","line":"    pub fn test_timeout_next_tick() {"},
{"lineNum":"  317","line":"        let mut t = timer();"},
{"lineNum":"  318","line":"        let mut tick;"},
{"lineNum":"  319","line":""},
{"lineNum":"  320","line":"        t.timeout_at_ms(\"a\", 100).unwrap();"},
{"lineNum":"  321","line":""},
{"lineNum":"  322","line":"        tick = t.ms_to_tick(50);"},
{"lineNum":"  323","line":"        assert_eq!(None, t.tick_to(tick));"},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"        tick = t.ms_to_tick(100);"},
{"lineNum":"  326","line":"        assert_eq!(Some(\"a\"), t.tick_to(tick));"},
{"lineNum":"  327","line":"        assert_eq!(None, t.tick_to(tick));"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"        tick = t.ms_to_tick(150);"},
{"lineNum":"  330","line":"        assert_eq!(None, t.tick_to(tick));"},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"        tick = t.ms_to_tick(200);"},
{"lineNum":"  333","line":"        assert_eq!(None, t.tick_to(tick));"},
{"lineNum":"  334","line":""},
{"lineNum":"  335","line":"        assert_eq!(t.count(), 0);"},
{"lineNum":"  336","line":"    }"},
{"lineNum":"  337","line":""},
{"lineNum":"  338","line":"    #[test]"},
{"lineNum":"  339","line":"    pub fn test_clearing_timeout() {"},
{"lineNum":"  340","line":"        let mut t = timer();"},
{"lineNum":"  341","line":"        let mut tick;"},
{"lineNum":"  342","line":""},
{"lineNum":"  343","line":"        let to = t.timeout_at_ms(\"a\", 100).unwrap();"},
{"lineNum":"  344","line":"        assert!(t.clear(to));"},
{"lineNum":"  345","line":""},
{"lineNum":"  346","line":"        tick = t.ms_to_tick(100);"},
{"lineNum":"  347","line":"        assert_eq!(None, t.tick_to(tick));"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"        tick = t.ms_to_tick(200);"},
{"lineNum":"  350","line":"        assert_eq!(None, t.tick_to(tick));"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"        assert_eq!(t.count(), 0);"},
{"lineNum":"  353","line":"    }"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"    #[test]"},
{"lineNum":"  356","line":"    pub fn test_multiple_timeouts_same_tick() {"},
{"lineNum":"  357","line":"        let mut t = timer();"},
{"lineNum":"  358","line":"        let mut tick;"},
{"lineNum":"  359","line":""},
{"lineNum":"  360","line":"        t.timeout_at_ms(\"a\", 100).unwrap();"},
{"lineNum":"  361","line":"        t.timeout_at_ms(\"b\", 100).unwrap();"},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"        let mut rcv = vec![];"},
{"lineNum":"  364","line":""},
{"lineNum":"  365","line":"        tick = t.ms_to_tick(100);"},
{"lineNum":"  366","line":"        rcv.push(t.tick_to(tick).unwrap());"},
{"lineNum":"  367","line":"        rcv.push(t.tick_to(tick).unwrap());"},
{"lineNum":"  368","line":""},
{"lineNum":"  369","line":"        assert_eq!(None, t.tick_to(tick));"},
{"lineNum":"  370","line":""},
{"lineNum":"  371","line":"        rcv.sort();"},
{"lineNum":"  372","line":"        assert!(rcv == [\"a\", \"b\"], \"actual={:?}\", rcv);"},
{"lineNum":"  373","line":""},
{"lineNum":"  374","line":"        tick = t.ms_to_tick(200);"},
{"lineNum":"  375","line":"        assert_eq!(None, t.tick_to(tick));"},
{"lineNum":"  376","line":""},
{"lineNum":"  377","line":"        assert_eq!(t.count(), 0);"},
{"lineNum":"  378","line":"    }"},
{"lineNum":"  379","line":""},
{"lineNum":"  380","line":"    #[test]"},
{"lineNum":"  381","line":"    pub fn test_multiple_timeouts_diff_tick() {"},
{"lineNum":"  382","line":"        let mut t = timer();"},
{"lineNum":"  383","line":"        let mut tick;"},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"        t.timeout_at_ms(\"a\", 110).unwrap();"},
{"lineNum":"  386","line":"        t.timeout_at_ms(\"b\", 220).unwrap();"},
{"lineNum":"  387","line":"        t.timeout_at_ms(\"c\", 230).unwrap();"},
{"lineNum":"  388","line":"        t.timeout_at_ms(\"d\", 440).unwrap();"},
{"lineNum":"  389","line":""},
{"lineNum":"  390","line":"        tick = t.ms_to_tick(100);"},
{"lineNum":"  391","line":"        assert_eq!(None, t.tick_to(tick));"},
{"lineNum":"  392","line":""},
{"lineNum":"  393","line":"        tick = t.ms_to_tick(200);"},
{"lineNum":"  394","line":"        assert_eq!(Some(\"a\"), t.tick_to(tick));"},
{"lineNum":"  395","line":"        assert_eq!(None, t.tick_to(tick));"},
{"lineNum":"  396","line":""},
{"lineNum":"  397","line":"        tick = t.ms_to_tick(300);"},
{"lineNum":"  398","line":"        assert_eq!(Some(\"c\"), t.tick_to(tick));"},
{"lineNum":"  399","line":"        assert_eq!(Some(\"b\"), t.tick_to(tick));"},
{"lineNum":"  400","line":"        assert_eq!(None, t.tick_to(tick));"},
{"lineNum":"  401","line":""},
{"lineNum":"  402","line":"        tick = t.ms_to_tick(400);"},
{"lineNum":"  403","line":"        assert_eq!(None, t.tick_to(tick));"},
{"lineNum":"  404","line":""},
{"lineNum":"  405","line":"        tick = t.ms_to_tick(500);"},
{"lineNum":"  406","line":"        assert_eq!(Some(\"d\"), t.tick_to(tick));"},
{"lineNum":"  407","line":"        assert_eq!(None, t.tick_to(tick));"},
{"lineNum":"  408","line":""},
{"lineNum":"  409","line":"        tick = t.ms_to_tick(600);"},
{"lineNum":"  410","line":"        assert_eq!(None, t.tick_to(tick));"},
{"lineNum":"  411","line":"    }"},
{"lineNum":"  412","line":""},
{"lineNum":"  413","line":"    #[test]"},
{"lineNum":"  414","line":"    pub fn test_catching_up() {"},
{"lineNum":"  415","line":"        let mut t = timer();"},
{"lineNum":"  416","line":""},
{"lineNum":"  417","line":"        t.timeout_at_ms(\"a\", 110).unwrap();"},
{"lineNum":"  418","line":"        t.timeout_at_ms(\"b\", 220).unwrap();"},
{"lineNum":"  419","line":"        t.timeout_at_ms(\"c\", 230).unwrap();"},
{"lineNum":"  420","line":"        t.timeout_at_ms(\"d\", 440).unwrap();"},
{"lineNum":"  421","line":""},
{"lineNum":"  422","line":"        let tick = t.ms_to_tick(600);"},
{"lineNum":"  423","line":"        assert_eq!(Some(\"a\"), t.tick_to(tick));"},
{"lineNum":"  424","line":"        assert_eq!(Some(\"c\"), t.tick_to(tick));"},
{"lineNum":"  425","line":"        assert_eq!(Some(\"b\"), t.tick_to(tick));"},
{"lineNum":"  426","line":"        assert_eq!(Some(\"d\"), t.tick_to(tick));"},
{"lineNum":"  427","line":"        assert_eq!(None, t.tick_to(tick));"},
{"lineNum":"  428","line":"    }"},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"    #[test]"},
{"lineNum":"  431","line":"    pub fn test_timeout_hash_collision() {"},
{"lineNum":"  432","line":"        let mut t = timer();"},
{"lineNum":"  433","line":"        let mut tick;"},
{"lineNum":"  434","line":""},
{"lineNum":"  435","line":"        t.timeout_at_ms(\"a\", 100).unwrap();"},
{"lineNum":"  436","line":"        t.timeout_at_ms(\"b\", 100 + TICK * SLOTS as u64).unwrap();"},
{"lineNum":"  437","line":""},
{"lineNum":"  438","line":"        tick = t.ms_to_tick(100);"},
{"lineNum":"  439","line":"        assert_eq!(Some(\"a\"), t.tick_to(tick));"},
{"lineNum":"  440","line":"        assert_eq!(1, t.count());"},
{"lineNum":"  441","line":""},
{"lineNum":"  442","line":"        tick = t.ms_to_tick(200);"},
{"lineNum":"  443","line":"        assert_eq!(None, t.tick_to(tick));"},
{"lineNum":"  444","line":"        assert_eq!(1, t.count());"},
{"lineNum":"  445","line":""},
{"lineNum":"  446","line":"        tick = t.ms_to_tick(100 + TICK * SLOTS as u64);"},
{"lineNum":"  447","line":"        assert_eq!(Some(\"b\"), t.tick_to(tick));"},
{"lineNum":"  448","line":"        assert_eq!(0, t.count());"},
{"lineNum":"  449","line":"    }"},
{"lineNum":"  450","line":""},
{"lineNum":"  451","line":"    #[test]"},
{"lineNum":"  452","line":"    pub fn test_clearing_timeout_between_triggers() {"},
{"lineNum":"  453","line":"        let mut t = timer();"},
{"lineNum":"  454","line":"        let mut tick;"},
{"lineNum":"  455","line":""},
{"lineNum":"  456","line":"        let a = t.timeout_at_ms(\"a\", 100).unwrap();"},
{"lineNum":"  457","line":"        let _ = t.timeout_at_ms(\"b\", 100).unwrap();"},
{"lineNum":"  458","line":"        let _ = t.timeout_at_ms(\"c\", 200).unwrap();"},
{"lineNum":"  459","line":""},
{"lineNum":"  460","line":"        tick = t.ms_to_tick(100);"},
{"lineNum":"  461","line":"        assert_eq!(Some(\"b\"), t.tick_to(tick));"},
{"lineNum":"  462","line":"        assert_eq!(2, t.count());"},
{"lineNum":"  463","line":""},
{"lineNum":"  464","line":"        t.clear(a);"},
{"lineNum":"  465","line":"        assert_eq!(1, t.count());"},
{"lineNum":"  466","line":""},
{"lineNum":"  467","line":"        assert_eq!(None, t.tick_to(tick));"},
{"lineNum":"  468","line":""},
{"lineNum":"  469","line":"        tick = t.ms_to_tick(200);"},
{"lineNum":"  470","line":"        assert_eq!(Some(\"c\"), t.tick_to(tick));"},
{"lineNum":"  471","line":"        assert_eq!(0, t.count());"},
{"lineNum":"  472","line":"    }"},
{"lineNum":"  473","line":""},
{"lineNum":"  474","line":"    const TICK: u64 = 100;"},
{"lineNum":"  475","line":"    const SLOTS: usize = 16;"},
{"lineNum":"  476","line":""},
{"lineNum":"  477","line":"    fn timer() -> Timer<&\'static str> {"},
{"lineNum":"  478","line":"        Timer::new(TICK, SLOTS, 32)"},
{"lineNum":"  479","line":"    }"},
{"lineNum":"  480","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test_mio-b9fce113d2acf305", "date" : "2016-02-17 13:22:44", "instrumented" : 60, "covered" : 35,};
var merged_data = [];
