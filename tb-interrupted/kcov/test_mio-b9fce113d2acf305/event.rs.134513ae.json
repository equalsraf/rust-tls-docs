var data = {lines:[
{"lineNum":"    1","line":"use token::Token;"},
{"lineNum":"    2","line":"use std::{fmt, ops};","class":"linePartCov","hits":"1","order":"1342","possible_hits":"2",},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"#[derive(Copy, PartialEq, Eq, Clone, PartialOrd, Ord)]","class":"linePartCov","hits":"6","order":"922","possible_hits":"8",},
{"lineNum":"    5","line":"pub struct PollOpt(usize);","class":"lineCov","hits":"2","order":"923","possible_hits":"2",},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"impl PollOpt {"},
{"lineNum":"    8","line":"    #[inline]"},
{"lineNum":"    9","line":"    pub fn edge() -> PollOpt {","class":"linePartCov","hits":"3","order":"894","possible_hits":"4",},
{"lineNum":"   10","line":"        PollOpt(0x020)"},
{"lineNum":"   11","line":"    }","class":"linePartCov","hits":"1","order":"972","possible_hits":"2",},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"    #[inline]"},
{"lineNum":"   14","line":"    pub fn empty() -> PollOpt {"},
{"lineNum":"   15","line":"        PollOpt(0)"},
{"lineNum":"   16","line":"    }"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"    #[inline]"},
{"lineNum":"   19","line":"    pub fn level() -> PollOpt {","class":"lineCov","hits":"1","order":"987","possible_hits":"1",},
{"lineNum":"   20","line":"        PollOpt(0x040)"},
{"lineNum":"   21","line":"    }","class":"linePartCov","hits":"1","order":"988","possible_hits":"2",},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"    #[inline]"},
{"lineNum":"   24","line":"    pub fn oneshot() -> PollOpt {","class":"linePartCov","hits":"3","order":"981","possible_hits":"4",},
{"lineNum":"   25","line":"        PollOpt(0x080)"},
{"lineNum":"   26","line":"    }","class":"linePartCov","hits":"1","order":"982","possible_hits":"2",},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"    #[inline]"},
{"lineNum":"   29","line":"    pub fn all() -> PollOpt {"},
{"lineNum":"   30","line":"        PollOpt::edge() | PollOpt::level() | PollOpt::oneshot()"},
{"lineNum":"   31","line":"    }"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"    #[inline]"},
{"lineNum":"   34","line":"    pub fn is_edge(&self) -> bool {","class":"linePartCov","hits":"3","order":"914","possible_hits":"4",},
{"lineNum":"   35","line":"        self.contains(PollOpt::edge())","class":"lineCov","hits":"2","order":"915","possible_hits":"2",},
{"lineNum":"   36","line":"    }","class":"linePartCov","hits":"1","order":"976","possible_hits":"2",},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"    #[inline]"},
{"lineNum":"   39","line":"    pub fn is_level(&self) -> bool {","class":"lineCov","hits":"1","order":"985","possible_hits":"1",},
{"lineNum":"   40","line":"        self.contains(PollOpt::level())","class":"lineCov","hits":"1","order":"986","possible_hits":"1",},
{"lineNum":"   41","line":"    }","class":"linePartCov","hits":"1","order":"989","possible_hits":"2",},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"    #[inline]"},
{"lineNum":"   44","line":"    pub fn is_oneshot(&self) -> bool {","class":"lineCov","hits":"1","order":"979","possible_hits":"1",},
{"lineNum":"   45","line":"        self.contains(PollOpt::oneshot())","class":"lineCov","hits":"1","order":"980","possible_hits":"1",},
{"lineNum":"   46","line":"    }","class":"linePartCov","hits":"1","order":"983","possible_hits":"2",},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"    #[inline]"},
{"lineNum":"   49","line":"    pub fn bits(&self) -> usize {","class":"linePartCov","hits":"3","order":"920","possible_hits":"4",},
{"lineNum":"   50","line":"        self.0","class":"lineCov","hits":"2","order":"921","possible_hits":"2",},
{"lineNum":"   51","line":"    }","class":"linePartCov","hits":"1","order":"973","possible_hits":"2",},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"    #[inline]"},
{"lineNum":"   54","line":"    pub fn contains(&self, other: PollOpt) -> bool {","class":"linePartCov","hits":"3","order":"916","possible_hits":"4",},
{"lineNum":"   55","line":"        (*self & other) == other","class":"lineCov","hits":"2","order":"917","possible_hits":"2",},
{"lineNum":"   56","line":"    }","class":"linePartCov","hits":"1","order":"975","possible_hits":"2",},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"    #[inline]"},
{"lineNum":"   59","line":"    pub fn insert(&mut self, other: PollOpt) {"},
{"lineNum":"   60","line":"        self.0 |= other.0;"},
{"lineNum":"   61","line":"    }"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"    #[inline]"},
{"lineNum":"   64","line":"    pub fn remove(&mut self, other: PollOpt) {"},
{"lineNum":"   65","line":"        self.0 &= !other.0;"},
{"lineNum":"   66","line":"    }"},
{"lineNum":"   67","line":"}"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"impl ops::BitOr for PollOpt {"},
{"lineNum":"   70","line":"    type Output = PollOpt;"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"    #[inline]"},
{"lineNum":"   73","line":"    fn bitor(self, other: PollOpt) -> PollOpt {","class":"linePartCov","hits":"2","order":"1397","possible_hits":"3",},
{"lineNum":"   74","line":"        PollOpt(self.bits() | other.bits())","class":"lineCov","hits":"1","order":"1398","possible_hits":"1",},
{"lineNum":"   75","line":"    }"},
{"lineNum":"   76","line":"}"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"impl ops::BitXor for PollOpt {"},
{"lineNum":"   79","line":"    type Output = PollOpt;"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"    #[inline]"},
{"lineNum":"   82","line":"    fn bitxor(self, other: PollOpt) -> PollOpt {"},
{"lineNum":"   83","line":"        PollOpt(self.bits() ^ other.bits())"},
{"lineNum":"   84","line":"    }"},
{"lineNum":"   85","line":"}"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"impl ops::BitAnd for PollOpt {"},
{"lineNum":"   88","line":"    type Output = PollOpt;"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"    #[inline]"},
{"lineNum":"   91","line":"    fn bitand(self, other: PollOpt) -> PollOpt {","class":"linePartCov","hits":"3","order":"918","possible_hits":"4",},
{"lineNum":"   92","line":"        PollOpt(self.bits() & other.bits())","class":"lineCov","hits":"2","order":"919","possible_hits":"2",},
{"lineNum":"   93","line":"    }","class":"linePartCov","hits":"1","order":"974","possible_hits":"2",},
{"lineNum":"   94","line":"}"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"impl ops::Sub for PollOpt {"},
{"lineNum":"   97","line":"    type Output = PollOpt;"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"    #[inline]"},
{"lineNum":"  100","line":"    fn sub(self, other: PollOpt) -> PollOpt {"},
{"lineNum":"  101","line":"        PollOpt(self.bits() & !other.bits())"},
{"lineNum":"  102","line":"    }"},
{"lineNum":"  103","line":"}"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"impl ops::Not for PollOpt {"},
{"lineNum":"  106","line":"    type Output = PollOpt;"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"    #[inline]"},
{"lineNum":"  109","line":"    fn not(self) -> PollOpt {"},
{"lineNum":"  110","line":"        PollOpt(!self.bits() & PollOpt::all().bits())"},
{"lineNum":"  111","line":"    }"},
{"lineNum":"  112","line":"}"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"impl fmt::Debug for PollOpt {"},
{"lineNum":"  115","line":"    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {"},
{"lineNum":"  116","line":"        let mut one = false;"},
{"lineNum":"  117","line":"        let flags = ["},
{"lineNum":"  118","line":"            (PollOpt::edge(), \"Edge-Triggered\"),"},
{"lineNum":"  119","line":"            (PollOpt::level(), \"Level-Triggered\"),"},
{"lineNum":"  120","line":"            (PollOpt::oneshot(), \"OneShot\")];"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"        for &(flag, msg) in flags.iter() {"},
{"lineNum":"  123","line":"            if self.contains(flag) {"},
{"lineNum":"  124","line":"                if one { try!(write!(fmt, \" | \")) }"},
{"lineNum":"  125","line":"                try!(write!(fmt, \"{}\", msg));"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"                one = true"},
{"lineNum":"  128","line":"            }"},
{"lineNum":"  129","line":"        }"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"        Ok(())"},
{"lineNum":"  132","line":"    }"},
{"lineNum":"  133","line":"}"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"#[derive(Copy, PartialEq, Eq, Clone, PartialOrd, Ord)]","class":"linePartCov","hits":"6","order":"952","possible_hits":"8",},
{"lineNum":"  136","line":"pub struct EventSet(usize);","class":"lineCov","hits":"2","order":"953","possible_hits":"2",},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"impl EventSet {"},
{"lineNum":"  139","line":"    pub fn none() -> EventSet {","class":"lineCov","hits":"1","order":"1303","possible_hits":"1",},
{"lineNum":"  140","line":"        EventSet(0)"},
{"lineNum":"  141","line":"    }","class":"linePartCov","hits":"1","order":"1304","possible_hits":"2",},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"    #[inline]"},
{"lineNum":"  144","line":"    pub fn readable() -> EventSet {","class":"linePartCov","hits":"3","order":"888","possible_hits":"4",},
{"lineNum":"  145","line":"        EventSet(0x001)"},
{"lineNum":"  146","line":"    }","class":"linePartCov","hits":"1","order":"945","possible_hits":"2",},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"    #[inline]"},
{"lineNum":"  149","line":"    pub fn writable() -> EventSet {","class":"linePartCov","hits":"3","order":"889","possible_hits":"4",},
{"lineNum":"  150","line":"        EventSet(0x002)"},
{"lineNum":"  151","line":"    }","class":"linePartCov","hits":"1","order":"962","possible_hits":"2",},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"    #[inline]"},
{"lineNum":"  154","line":"    pub fn error() -> EventSet {","class":"lineCov","hits":"1","order":"1333","possible_hits":"1",},
{"lineNum":"  155","line":"        EventSet(0x004)"},
{"lineNum":"  156","line":"    }","class":"linePartCov","hits":"1","order":"1334","possible_hits":"2",},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"    #[inline]"},
{"lineNum":"  159","line":"    pub fn hup() -> EventSet {","class":"linePartCov","hits":"3","order":"968","possible_hits":"4",},
{"lineNum":"  160","line":"        EventSet(0x008)"},
{"lineNum":"  161","line":"    }","class":"linePartCov","hits":"1","order":"969","possible_hits":"2",},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"    #[inline]"},
{"lineNum":"  164","line":"    pub fn all() -> EventSet {"},
{"lineNum":"  165","line":"        EventSet::readable() |"},
{"lineNum":"  166","line":"            EventSet::writable() |"},
{"lineNum":"  167","line":"            EventSet::hup() |"},
{"lineNum":"  168","line":"            EventSet::error()"},
{"lineNum":"  169","line":"    }"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"    #[inline]"},
{"lineNum":"  172","line":"    pub fn is_readable(&self) -> bool {","class":"linePartCov","hits":"3","order":"943","possible_hits":"4",},
{"lineNum":"  173","line":"        self.contains(EventSet::readable())","class":"lineCov","hits":"2","order":"944","possible_hits":"2",},
{"lineNum":"  174","line":"    }","class":"linePartCov","hits":"1","order":"955","possible_hits":"2",},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"    #[inline]"},
{"lineNum":"  177","line":"    pub fn is_writable(&self) -> bool {","class":"linePartCov","hits":"3","order":"960","possible_hits":"4",},
{"lineNum":"  178","line":"        self.contains(EventSet::writable())","class":"lineCov","hits":"2","order":"961","possible_hits":"2",},
{"lineNum":"  179","line":"    }","class":"linePartCov","hits":"1","order":"963","possible_hits":"2",},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"    #[inline]"},
{"lineNum":"  182","line":"    pub fn is_error(&self) -> bool {"},
{"lineNum":"  183","line":"        self.contains(EventSet::error())"},
{"lineNum":"  184","line":"    }"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"    #[inline]"},
{"lineNum":"  187","line":"    pub fn is_hup(&self) -> bool {","class":"linePartCov","hits":"3","order":"966","possible_hits":"4",},
{"lineNum":"  188","line":"        self.contains(EventSet::hup())","class":"lineCov","hits":"2","order":"967","possible_hits":"2",},
{"lineNum":"  189","line":"    }","class":"linePartCov","hits":"1","order":"970","possible_hits":"2",},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"    #[inline]"},
{"lineNum":"  192","line":"    pub fn insert(&mut self, other: EventSet) {"},
{"lineNum":"  193","line":"        self.0 |= other.0;"},
{"lineNum":"  194","line":"    }"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"    #[inline]"},
{"lineNum":"  197","line":"    pub fn remove(&mut self, other: EventSet) {"},
{"lineNum":"  198","line":"        self.0 &= !other.0;"},
{"lineNum":"  199","line":"    }"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"    #[inline]"},
{"lineNum":"  202","line":"    pub fn bits(&self) -> usize {","class":"linePartCov","hits":"3","order":"892","possible_hits":"4",},
{"lineNum":"  203","line":"        self.0","class":"lineCov","hits":"2","order":"893","possible_hits":"2",},
{"lineNum":"  204","line":"    }","class":"linePartCov","hits":"1","order":"950","possible_hits":"2",},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"    #[inline]"},
{"lineNum":"  207","line":"    pub fn contains(&self, other: EventSet) -> bool {","class":"linePartCov","hits":"3","order":"946","possible_hits":"4",},
{"lineNum":"  208","line":"        (*self & other) == other","class":"lineCov","hits":"2","order":"947","possible_hits":"2",},
{"lineNum":"  209","line":"    }","class":"linePartCov","hits":"1","order":"954","possible_hits":"2",},
{"lineNum":"  210","line":"}"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"impl ops::BitOr for EventSet {"},
{"lineNum":"  213","line":"    type Output = EventSet;"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"    #[inline]"},
{"lineNum":"  216","line":"    fn bitor(self, other: EventSet) -> EventSet {","class":"linePartCov","hits":"3","order":"890","possible_hits":"4",},
{"lineNum":"  217","line":"        EventSet(self.bits() | other.bits())","class":"lineCov","hits":"2","order":"891","possible_hits":"2",},
{"lineNum":"  218","line":"    }","class":"linePartCov","hits":"1","order":"1307","possible_hits":"2",},
{"lineNum":"  219","line":"}"},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"impl ops::BitXor for EventSet {"},
{"lineNum":"  222","line":"    type Output = EventSet;"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"    #[inline]"},
{"lineNum":"  225","line":"    fn bitxor(self, other: EventSet) -> EventSet {"},
{"lineNum":"  226","line":"        EventSet(self.bits() ^ other.bits())"},
{"lineNum":"  227","line":"    }"},
{"lineNum":"  228","line":"}"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"impl ops::BitAnd for EventSet {"},
{"lineNum":"  231","line":"    type Output = EventSet;"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"    #[inline]"},
{"lineNum":"  234","line":"    fn bitand(self, other: EventSet) -> EventSet {","class":"linePartCov","hits":"3","order":"948","possible_hits":"4",},
{"lineNum":"  235","line":"        EventSet(self.bits() & other.bits())","class":"lineCov","hits":"2","order":"949","possible_hits":"2",},
{"lineNum":"  236","line":"    }","class":"linePartCov","hits":"1","order":"951","possible_hits":"2",},
{"lineNum":"  237","line":"}"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"impl ops::Sub for EventSet {"},
{"lineNum":"  240","line":"    type Output = EventSet;"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"    #[inline]"},
{"lineNum":"  243","line":"    fn sub(self, other: EventSet) -> EventSet {"},
{"lineNum":"  244","line":"        EventSet(self.bits() & !other.bits())"},
{"lineNum":"  245","line":"    }"},
{"lineNum":"  246","line":"}"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"impl ops::Not for EventSet {"},
{"lineNum":"  249","line":"    type Output = EventSet;"},
{"lineNum":"  250","line":""},
{"lineNum":"  251","line":"    #[inline]"},
{"lineNum":"  252","line":"    fn not(self) -> EventSet {"},
{"lineNum":"  253","line":"        EventSet(!self.bits() & EventSet::all().bits())"},
{"lineNum":"  254","line":"    }"},
{"lineNum":"  255","line":"}"},
{"lineNum":"  256","line":""},
{"lineNum":"  257","line":"impl fmt::Debug for EventSet {"},
{"lineNum":"  258","line":"    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {","class":"lineCov","hits":"1","order":"1328","possible_hits":"1",},
{"lineNum":"  259","line":"        let mut one = false;","class":"lineCov","hits":"1","order":"1329","possible_hits":"1",},
{"lineNum":"  260","line":"        let flags = ["},
{"lineNum":"  261","line":"            (EventSet::readable(), \"Readable\"),","class":"lineCov","hits":"1","order":"1330","possible_hits":"1",},
{"lineNum":"  262","line":"            (EventSet::writable(), \"Writable\"),","class":"lineCov","hits":"1","order":"1331","possible_hits":"1",},
{"lineNum":"  263","line":"            (EventSet::error(),    \"Error\"),","class":"lineCov","hits":"1","order":"1332","possible_hits":"1",},
{"lineNum":"  264","line":"            (EventSet::hup(),      \"Hup\")];","class":"lineCov","hits":"1","order":"1335","possible_hits":"1",},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"        for &(flag, msg) in flags.iter() {","class":"lineCov","hits":"2","order":"1336","possible_hits":"2",},
{"lineNum":"  267","line":"            if self.contains(flag) {","class":"lineCov","hits":"1","order":"1339","possible_hits":"1",},
{"lineNum":"  268","line":"                if one { try!(write!(fmt, \" | \")) }","class":"linePartCov","hits":"1","order":"1340","possible_hits":"2",},
{"lineNum":"  269","line":"                try!(write!(fmt, \"{}\", msg));","class":"lineCov","hits":"2","order":"1341","possible_hits":"2",},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"                one = true","class":"lineCov","hits":"1","order":"1343","possible_hits":"1",},
{"lineNum":"  272","line":"            }"},
{"lineNum":"  273","line":"        }"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"        Ok(())"},
{"lineNum":"  276","line":"    }","class":"linePartCov","hits":"1","order":"1344","possible_hits":"2",},
{"lineNum":"  277","line":"}"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"// Keep this struct internal to mio"},
{"lineNum":"  280","line":"#[derive(Copy, Clone, Eq, PartialEq, Debug)]","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  281","line":"pub struct IoEvent {"},
{"lineNum":"  282","line":"    pub kind: EventSet,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  283","line":"    pub token: Token","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  284","line":"}"},
{"lineNum":"  285","line":""},
{"lineNum":"  286","line":"/// IoEvent represents the raw event that the OS-specific selector"},
{"lineNum":"  287","line":"/// returned. An event can represent more than one kind (such as"},
{"lineNum":"  288","line":"/// readable or writable) at a time."},
{"lineNum":"  289","line":"///"},
{"lineNum":"  290","line":"/// These IoEvent objects are created by the OS-specific concrete"},
{"lineNum":"  291","line":"/// Selector when they have events to report."},
{"lineNum":"  292","line":"impl IoEvent {"},
{"lineNum":"  293","line":"    /// Create a new IoEvent."},
{"lineNum":"  294","line":"    pub fn new(kind: EventSet, token: Token) -> IoEvent {","class":"lineCov","hits":"1","order":"1313","possible_hits":"1",},
{"lineNum":"  295","line":"        IoEvent {"},
{"lineNum":"  296","line":"            kind: kind,"},
{"lineNum":"  297","line":"            token: token,"},
{"lineNum":"  298","line":"        }"},
{"lineNum":"  299","line":"    }","class":"linePartCov","hits":"1","order":"1314","possible_hits":"2",},
{"lineNum":"  300","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test_mio-b9fce113d2acf305", "date" : "2016-02-17 14:25:21", "instrumented" : 79, "covered" : 76,};
var merged_data = [];
