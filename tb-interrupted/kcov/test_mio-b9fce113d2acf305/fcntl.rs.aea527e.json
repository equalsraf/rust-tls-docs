var data = {lines:[
{"lineNum":"    1","line":"use {Error, Result, NixPath};"},
{"lineNum":"    2","line":"use errno::Errno;"},
{"lineNum":"    3","line":"use libc::{mode_t, c_int};"},
{"lineNum":"    4","line":"use sys::stat::Mode;"},
{"lineNum":"    5","line":"use std::os::unix::io::RawFd;"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"pub use self::consts::*;"},
{"lineNum":"    8","line":"pub use self::ffi::flock;"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#[allow(dead_code)]"},
{"lineNum":"   11","line":"mod ffi {"},
{"lineNum":"   12","line":"    pub use libc::{open, fcntl};"},
{"lineNum":"   13","line":"    pub use self::os::*;"},
{"lineNum":"   14","line":"    pub use libc::funcs::bsd44::flock as libc_flock;"},
{"lineNum":"   15","line":"    pub use libc::consts::os::bsd44::{LOCK_SH, LOCK_EX, LOCK_NB, LOCK_UN};"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]"},
{"lineNum":"   18","line":"    mod os {"},
{"lineNum":"   19","line":"        use libc::{c_int, c_short, off_t, pid_t};"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"        #[repr(C)]"},
{"lineNum":"   22","line":"        #[derive(Clone, Copy, Default, Debug)]"},
{"lineNum":"   23","line":"        pub struct flock {"},
{"lineNum":"   24","line":"            pub l_type: c_short,"},
{"lineNum":"   25","line":"            pub l_whence: c_short,"},
{"lineNum":"   26","line":"            pub l_start: off_t,"},
{"lineNum":"   27","line":"            pub l_len: off_t,"},
{"lineNum":"   28","line":"            pub l_pid: pid_t,"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"            // not actually here, but brings in line with freebsd"},
{"lineNum":"   31","line":"            pub l_sysid: c_int,"},
{"lineNum":"   32","line":"        }"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"        pub const F_DUPFD:         c_int = 0;"},
{"lineNum":"   35","line":"        pub const F_DUPFD_CLOEXEC: c_int = 1030;"},
{"lineNum":"   36","line":"        pub const F_GETFD:         c_int = 1;"},
{"lineNum":"   37","line":"        pub const F_SETFD:         c_int = 2;"},
{"lineNum":"   38","line":"        pub const F_GETFL:         c_int = 3;"},
{"lineNum":"   39","line":"        pub const F_SETFL:         c_int = 4;"},
{"lineNum":"   40","line":"        pub const F_SETLK:         c_int = 6;"},
{"lineNum":"   41","line":"        pub const F_SETLKW:        c_int = 7;"},
{"lineNum":"   42","line":"        pub const F_GETLK:         c_int = 5;"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"        pub const F_ADD_SEALS:     c_int = 1033;"},
{"lineNum":"   45","line":"        pub const F_GET_SEALS:     c_int = 1034;"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"        pub const F_SEAL_SEAL:     c_int = 1;"},
{"lineNum":"   48","line":"        pub const F_SEAL_SHRINK:   c_int = 2;"},
{"lineNum":"   49","line":"        pub const F_SEAL_GROW:     c_int = 4;"},
{"lineNum":"   50","line":"        pub const F_SEAL_WRITE:    c_int = 8;"},
{"lineNum":"   51","line":"    }"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"    #[cfg(any(target_os = \"macos\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"ios\", target_os = \"openbsd\", target_os = \"netbsd\"))]"},
{"lineNum":"   54","line":"    mod os {"},
{"lineNum":"   55","line":"        use libc::{c_int, c_short, off_t, pid_t};"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"        #[repr(C)]"},
{"lineNum":"   58","line":"        #[derive(Clone, Copy, Default, Debug)]"},
{"lineNum":"   59","line":"        pub struct flock {"},
{"lineNum":"   60","line":"            pub l_start: off_t,"},
{"lineNum":"   61","line":"            pub l_len: off_t,"},
{"lineNum":"   62","line":"            pub l_pid: pid_t,"},
{"lineNum":"   63","line":"            pub l_type: c_short,"},
{"lineNum":"   64","line":"            pub l_whence: c_short,"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"            // not actually here, but brings in line with freebsd"},
{"lineNum":"   67","line":"            pub l_sysid: c_int,"},
{"lineNum":"   68","line":"        }"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"        pub const F_DUPFD:         c_int = 0;"},
{"lineNum":"   71","line":"        #[cfg(not(any(target_os = \"dragonfly\", target_os = \"netbsd\")))]"},
{"lineNum":"   72","line":"        pub const F_DUPFD_CLOEXEC: c_int = 67;"},
{"lineNum":"   73","line":"        #[cfg(target_os = \"dragonfly\")]"},
{"lineNum":"   74","line":"        pub const F_DUPFD_CLOEXEC: c_int = 17;"},
{"lineNum":"   75","line":"        #[cfg(target_os = \"netbsd\")]"},
{"lineNum":"   76","line":"        pub const F_DUPFD_CLOEXEC: c_int = 12;"},
{"lineNum":"   77","line":"        pub const F_GETFD:         c_int = 1;"},
{"lineNum":"   78","line":"        pub const F_SETFD:         c_int = 2;"},
{"lineNum":"   79","line":"        pub const F_GETFL:         c_int = 3;"},
{"lineNum":"   80","line":"        pub const F_SETFL:         c_int = 4;"},
{"lineNum":"   81","line":"        #[cfg(target_os = \"netbsd\")]"},
{"lineNum":"   82","line":"        pub const F_GETOWN:        c_int = 5;"},
{"lineNum":"   83","line":"        #[cfg(target_os = \"netbsd\")]"},
{"lineNum":"   84","line":"        pub const F_SETOWN:        c_int = 6;"},
{"lineNum":"   85","line":"        pub const F_GETLK:         c_int = 7;"},
{"lineNum":"   86","line":"        pub const F_SETLK:         c_int = 8;"},
{"lineNum":"   87","line":"        pub const F_SETLKW:        c_int = 9;"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"        #[cfg(target_os = \"netbsd\")]"},
{"lineNum":"   90","line":"        pub const F_CLOSEM:        c_int = 10;"},
{"lineNum":"   91","line":"        #[cfg(target_os = \"netbsd\")]"},
{"lineNum":"   92","line":"        pub const F_MAXFD:         c_int = 11;"},
{"lineNum":"   93","line":"        #[cfg(target_os = \"netbsd\")]"},
{"lineNum":"   94","line":"        pub const F_GETNOSIGPIPE:  c_int = 13;"},
{"lineNum":"   95","line":"        #[cfg(target_os = \"netbsd\")]"},
{"lineNum":"   96","line":"        pub const F_SETNOSIGPIPE:  c_int = 14;"},
{"lineNum":"   97","line":"    }"},
{"lineNum":"   98","line":"}"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"pub fn open<P: ?Sized + NixPath>(path: &P, oflag: OFlag, mode: Mode) -> Result<RawFd> {"},
{"lineNum":"  101","line":"    let fd = try!(path.with_nix_path(|cstr| {"},
{"lineNum":"  102","line":"        unsafe { ffi::open(cstr.as_ptr(), oflag.bits(), mode.bits() as mode_t) }"},
{"lineNum":"  103","line":"    }));"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"    if fd < 0 {"},
{"lineNum":"  106","line":"        return Err(Error::Sys(Errno::last()));"},
{"lineNum":"  107","line":"    }"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"    Ok(fd)"},
{"lineNum":"  110","line":"}"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"pub enum FcntlArg<\'a> {"},
{"lineNum":"  113","line":"    F_DUPFD(RawFd),"},
{"lineNum":"  114","line":"    F_DUPFD_CLOEXEC(RawFd),"},
{"lineNum":"  115","line":"    F_GETFD,"},
{"lineNum":"  116","line":"    F_SETFD(FdFlag), // FD_FLAGS"},
{"lineNum":"  117","line":"    F_GETFL,"},
{"lineNum":"  118","line":"    F_SETFL(OFlag), // O_NONBLOCK"},
{"lineNum":"  119","line":"    F_SETLK(&\'a flock),"},
{"lineNum":"  120","line":"    F_SETLKW(&\'a flock),"},
{"lineNum":"  121","line":"    F_GETLK(&\'a mut flock),"},
{"lineNum":"  122","line":"    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]"},
{"lineNum":"  123","line":"    F_OFD_SETLK(&\'a flock),"},
{"lineNum":"  124","line":"    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]"},
{"lineNum":"  125","line":"    F_OFD_SETLKW(&\'a flock),"},
{"lineNum":"  126","line":"    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]"},
{"lineNum":"  127","line":"    F_OFD_GETLK(&\'a mut flock),"},
{"lineNum":"  128","line":"    #[cfg(target_os = \"linux\")]"},
{"lineNum":"  129","line":"    F_ADD_SEALS(SealFlag),"},
{"lineNum":"  130","line":"    #[cfg(target_os = \"linux\")]"},
{"lineNum":"  131","line":"    F_GET_SEALS,"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"    // TODO: Rest of flags"},
{"lineNum":"  134","line":"}"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"// TODO: Figure out how to handle value fcntl returns"},
{"lineNum":"  137","line":"pub fn fcntl(fd: RawFd, arg: FcntlArg) -> Result<c_int> {","class":"lineCov","hits":"1","order":"195","possible_hits":"1",},
{"lineNum":"  138","line":"    use self::FcntlArg::*;"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"    let res = unsafe {"},
{"lineNum":"  141","line":"        match arg {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  142","line":"            F_DUPFD(rawfd) => ffi::fcntl(fd, ffi::F_DUPFD, rawfd),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  143","line":"            F_DUPFD_CLOEXEC(rawfd) => ffi::fcntl(fd, ffi::F_DUPFD_CLOEXEC, rawfd),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  144","line":"            F_GETFD => ffi::fcntl(fd, ffi::F_GETFD),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  145","line":"            F_SETFD(flag) => ffi::fcntl(fd, ffi::F_SETFD, flag.bits()),","class":"lineCov","hits":"1","order":"865","possible_hits":"1",},
{"lineNum":"  146","line":"            F_GETFL => ffi::fcntl(fd, ffi::F_GETFL),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  147","line":"            F_SETFL(flag) => ffi::fcntl(fd, ffi::F_SETFL, flag.bits()),","class":"lineCov","hits":"1","order":"196","possible_hits":"1",},
{"lineNum":"  148","line":"            F_SETLK(flock) => ffi::fcntl(fd, ffi::F_SETLK, flock),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  149","line":"            F_SETLKW(flock) => ffi::fcntl(fd, ffi::F_SETLKW, flock),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  150","line":"            F_GETLK(flock) => ffi::fcntl(fd, ffi::F_GETLK, flock),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  151","line":"            #[cfg(target_os = \"linux\")]"},
{"lineNum":"  152","line":"            F_ADD_SEALS(flag) => ffi::fcntl(fd, ffi::F_ADD_SEALS, flag.bits()),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  153","line":"            #[cfg(target_os = \"linux\")]"},
{"lineNum":"  154","line":"            F_GET_SEALS => ffi::fcntl(fd, ffi::F_GET_SEALS),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  155","line":"            #[cfg(any(target_os = \"linux\", target_os = \"android\"))]"},
{"lineNum":"  156","line":"            _ => unimplemented!()"},
{"lineNum":"  157","line":"        }"},
{"lineNum":"  158","line":"    };"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"    if res < 0 {","class":"lineCov","hits":"1","order":"198","possible_hits":"1",},
{"lineNum":"  161","line":"        return Err(Error::Sys(Errno::last()));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  162","line":"    }"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"    Ok(res)","class":"lineCov","hits":"1","order":"199","possible_hits":"1",},
{"lineNum":"  165","line":"}","class":"linePartCov","hits":"1","order":"200","possible_hits":"2",},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"pub enum FlockArg {"},
{"lineNum":"  168","line":"    LockShared,"},
{"lineNum":"  169","line":"    LockExclusive,"},
{"lineNum":"  170","line":"    Unlock,"},
{"lineNum":"  171","line":"    LockSharedNonblock,"},
{"lineNum":"  172","line":"    LockExclusiveNonblock,"},
{"lineNum":"  173","line":"    UnlockNonblock,"},
{"lineNum":"  174","line":"}"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"pub fn flock(fd: RawFd, arg: FlockArg) -> Result<()> {"},
{"lineNum":"  177","line":"    use self::FlockArg::*;"},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"    let res = unsafe {"},
{"lineNum":"  180","line":"        match arg {"},
{"lineNum":"  181","line":"            LockShared => ffi::libc_flock(fd, ffi::LOCK_SH),"},
{"lineNum":"  182","line":"            LockExclusive => ffi::libc_flock(fd, ffi::LOCK_EX),"},
{"lineNum":"  183","line":"            Unlock => ffi::libc_flock(fd, ffi::LOCK_UN),"},
{"lineNum":"  184","line":"            LockSharedNonblock => ffi::libc_flock(fd, ffi::LOCK_SH | ffi::LOCK_NB),"},
{"lineNum":"  185","line":"            LockExclusiveNonblock => ffi::libc_flock(fd, ffi::LOCK_EX | ffi::LOCK_NB),"},
{"lineNum":"  186","line":"            UnlockNonblock => ffi::libc_flock(fd, ffi::LOCK_UN | ffi::LOCK_NB),"},
{"lineNum":"  187","line":"        }"},
{"lineNum":"  188","line":"    };"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"    if res < 0 {"},
{"lineNum":"  191","line":"        return Err(Error::Sys(Errno::last()));"},
{"lineNum":"  192","line":"    }"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"    Ok(())"},
{"lineNum":"  195","line":"}"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"#[cfg(any(target_os = \"linux\", target_os = \"android\"))]"},
{"lineNum":"  198","line":"mod consts {"},
{"lineNum":"  199","line":"    use libc::c_int;"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"    bitflags!("},
{"lineNum":"  202","line":"        flags OFlag: c_int {"},
{"lineNum":"  203","line":"            const O_ACCMODE   = 0o00000003,"},
{"lineNum":"  204","line":"            const O_RDONLY    = 0o00000000,"},
{"lineNum":"  205","line":"            const O_WRONLY    = 0o00000001,"},
{"lineNum":"  206","line":"            const O_RDWR      = 0o00000002,"},
{"lineNum":"  207","line":"            const O_CREAT     = 0o00000100,"},
{"lineNum":"  208","line":"            const O_EXCL      = 0o00000200,"},
{"lineNum":"  209","line":"            const O_NOCTTY    = 0o00000400,"},
{"lineNum":"  210","line":"            const O_TRUNC     = 0o00001000,"},
{"lineNum":"  211","line":"            const O_APPEND    = 0o00002000,"},
{"lineNum":"  212","line":"            const O_NONBLOCK  = 0o00004000,"},
{"lineNum":"  213","line":"            const O_DSYNC     = 0o00010000,"},
{"lineNum":"  214","line":"            const O_DIRECT    = 0o00040000,"},
{"lineNum":"  215","line":"            const O_LARGEFILE = 0o00100000,"},
{"lineNum":"  216","line":"            const O_DIRECTORY = 0o00200000,"},
{"lineNum":"  217","line":"            const O_NOFOLLOW  = 0o00400000,"},
{"lineNum":"  218","line":"            const O_NOATIME   = 0o01000000,"},
{"lineNum":"  219","line":"            const O_CLOEXEC   = 0o02000000,"},
{"lineNum":"  220","line":"            const O_SYNC      = 0o04000000,"},
{"lineNum":"  221","line":"            const O_PATH      = 0o10000000,"},
{"lineNum":"  222","line":"            const O_TMPFILE   = 0o20000000,"},
{"lineNum":"  223","line":"            const O_NDELAY    = O_NONBLOCK.bits"},
{"lineNum":"  224","line":"        }"},
{"lineNum":"  225","line":"    );"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"    bitflags!("},
{"lineNum":"  228","line":"        flags FdFlag: c_int {"},
{"lineNum":"  229","line":"            const FD_CLOEXEC = 1"},
{"lineNum":"  230","line":"        }"},
{"lineNum":"  231","line":"    );"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"    bitflags!("},
{"lineNum":"  234","line":"        flags SealFlag: c_int {"},
{"lineNum":"  235","line":"            const F_SEAL_SEAL = 1,"},
{"lineNum":"  236","line":"            const F_SEAL_SHRINK = 2,"},
{"lineNum":"  237","line":"            const F_SEAL_GROW = 4,"},
{"lineNum":"  238","line":"            const F_SEAL_WRITE = 8,"},
{"lineNum":"  239","line":"        }"},
{"lineNum":"  240","line":"    );"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"}"},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"#[cfg(any(target_os = \"macos\", target_os = \"ios\"))]"},
{"lineNum":"  245","line":"mod consts {"},
{"lineNum":"  246","line":"    use libc::c_int;"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"    bitflags!("},
{"lineNum":"  249","line":"        flags OFlag: c_int {"},
{"lineNum":"  250","line":"            const O_ACCMODE   = 0x0000003,"},
{"lineNum":"  251","line":"            const O_RDONLY    = 0x0000000,"},
{"lineNum":"  252","line":"            const O_WRONLY    = 0x0000001,"},
{"lineNum":"  253","line":"            const O_RDWR      = 0x0000002,"},
{"lineNum":"  254","line":"            const O_CREAT     = 0x0000200,"},
{"lineNum":"  255","line":"            const O_EXCL      = 0x0000800,"},
{"lineNum":"  256","line":"            const O_NOCTTY    = 0x0020000,"},
{"lineNum":"  257","line":"            const O_TRUNC     = 0x0000400,"},
{"lineNum":"  258","line":"            const O_APPEND    = 0x0000008,"},
{"lineNum":"  259","line":"            const O_NONBLOCK  = 0x0000004,"},
{"lineNum":"  260","line":"            const O_DSYNC     = 0x0400000,"},
{"lineNum":"  261","line":"            const O_DIRECTORY = 0x0100000,"},
{"lineNum":"  262","line":"            const O_NOFOLLOW  = 0x0000100,"},
{"lineNum":"  263","line":"            const O_CLOEXEC   = 0x1000000,"},
{"lineNum":"  264","line":"            const O_SYNC      = 0x0000080,"},
{"lineNum":"  265","line":"            const O_NDELAY    = O_NONBLOCK.bits,"},
{"lineNum":"  266","line":"            const O_FSYNC     = O_SYNC.bits"},
{"lineNum":"  267","line":"        }"},
{"lineNum":"  268","line":"    );"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"    bitflags!("},
{"lineNum":"  271","line":"        flags FdFlag: c_int {"},
{"lineNum":"  272","line":"            const FD_CLOEXEC = 1"},
{"lineNum":"  273","line":"        }"},
{"lineNum":"  274","line":"    );"},
{"lineNum":"  275","line":"}"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"#[cfg(any(target_os = \"freebsd\", target_os = \"openbsd\"))]"},
{"lineNum":"  278","line":"mod consts {"},
{"lineNum":"  279","line":"    use libc::c_int;"},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"    bitflags!("},
{"lineNum":"  282","line":"        flags OFlag: c_int {"},
{"lineNum":"  283","line":"            const O_ACCMODE   = 0x0000003,"},
{"lineNum":"  284","line":"            const O_RDONLY    = 0x0000000,"},
{"lineNum":"  285","line":"            const O_WRONLY    = 0x0000001,"},
{"lineNum":"  286","line":"            const O_RDWR      = 0x0000002,"},
{"lineNum":"  287","line":"            const O_CREAT     = 0x0000200,"},
{"lineNum":"  288","line":"            const O_EXCL      = 0x0000800,"},
{"lineNum":"  289","line":"            const O_NOCTTY    = 0x0008000,"},
{"lineNum":"  290","line":"            const O_TRUNC     = 0x0000400,"},
{"lineNum":"  291","line":"            const O_APPEND    = 0x0000008,"},
{"lineNum":"  292","line":"            const O_NONBLOCK  = 0x0000004,"},
{"lineNum":"  293","line":"            const O_DIRECTORY = 0x0020000,"},
{"lineNum":"  294","line":"            const O_NOFOLLOW  = 0x0000100,"},
{"lineNum":"  295","line":"            const O_CLOEXEC   = 0x0100000,"},
{"lineNum":"  296","line":"            const O_SYNC      = 0x0000080,"},
{"lineNum":"  297","line":"            const O_NDELAY    = O_NONBLOCK.bits,"},
{"lineNum":"  298","line":"            const O_FSYNC     = O_SYNC.bits,"},
{"lineNum":"  299","line":"            const O_SHLOCK    = 0x0000080,"},
{"lineNum":"  300","line":"            const O_EXLOCK    = 0x0000020,"},
{"lineNum":"  301","line":"            const O_DIRECT    = 0x0010000,"},
{"lineNum":"  302","line":"            const O_EXEC      = 0x0040000,"},
{"lineNum":"  303","line":"            const O_TTY_INIT  = 0x0080000"},
{"lineNum":"  304","line":"        }"},
{"lineNum":"  305","line":"    );"},
{"lineNum":"  306","line":""},
{"lineNum":"  307","line":"    bitflags!("},
{"lineNum":"  308","line":"        flags FdFlag: c_int {"},
{"lineNum":"  309","line":"            const FD_CLOEXEC = 1"},
{"lineNum":"  310","line":"        }"},
{"lineNum":"  311","line":"    );"},
{"lineNum":"  312","line":"}"},
{"lineNum":"  313","line":""},
{"lineNum":"  314","line":"#[cfg(target_os = \"netbsd\")]"},
{"lineNum":"  315","line":"mod consts {"},
{"lineNum":"  316","line":"    use libc::c_int;"},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"    bitflags!("},
{"lineNum":"  319","line":"        flags OFlag: c_int {"},
{"lineNum":"  320","line":"            const O_ACCMODE   = 0x0000003,"},
{"lineNum":"  321","line":"            const O_RDONLY    = 0x0000000,"},
{"lineNum":"  322","line":"            const O_WRONLY    = 0x0000001,"},
{"lineNum":"  323","line":"            const O_RDWR      = 0x0000002,"},
{"lineNum":"  324","line":"            const O_NONBLOCK  = 0x0000004,"},
{"lineNum":"  325","line":"            const O_APPEND    = 0x0000008,"},
{"lineNum":"  326","line":"            const O_SHLOCK    = 0x0000010,"},
{"lineNum":"  327","line":"            const O_EXLOCK    = 0x0000020,"},
{"lineNum":"  328","line":"            const O_ASYNC     = 0x0000040,"},
{"lineNum":"  329","line":"            const O_SYNC      = 0x0000080,"},
{"lineNum":"  330","line":"            const O_NOFOLLOW  = 0x0000100,"},
{"lineNum":"  331","line":"            const O_CREAT     = 0x0000200,"},
{"lineNum":"  332","line":"            const O_TRUNC     = 0x0000400,"},
{"lineNum":"  333","line":"            const O_EXCL      = 0x0000800,"},
{"lineNum":"  334","line":"            const O_NOCTTY    = 0x0008000,"},
{"lineNum":"  335","line":"            const O_DSYNC     = 0x0010000,"},
{"lineNum":"  336","line":"            const O_RSYNC     = 0x0020000,"},
{"lineNum":"  337","line":"            const O_ALT_IO    = 0x0040000,"},
{"lineNum":"  338","line":"            const O_DIRECT    = 0x0080000,"},
{"lineNum":"  339","line":"            const O_NOSIGPIPE = 0x0100000,"},
{"lineNum":"  340","line":"            const O_DIRECTORY = 0x0200000,"},
{"lineNum":"  341","line":"            const O_CLOEXEC   = 0x0400000,"},
{"lineNum":"  342","line":"            const O_SEARCH    = 0x0800000,"},
{"lineNum":"  343","line":"            const O_FSYNC     = O_SYNC.bits,"},
{"lineNum":"  344","line":"            const O_NDELAY    = O_NONBLOCK.bits,"},
{"lineNum":"  345","line":"        }"},
{"lineNum":"  346","line":"    );"},
{"lineNum":"  347","line":""},
{"lineNum":"  348","line":"    bitflags!("},
{"lineNum":"  349","line":"        flags FdFlag: c_int {"},
{"lineNum":"  350","line":"            const FD_CLOEXEC = 1"},
{"lineNum":"  351","line":"        }"},
{"lineNum":"  352","line":"    );"},
{"lineNum":"  353","line":"}"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"#[cfg(target_os = \"dragonfly\")]"},
{"lineNum":"  356","line":"mod consts {"},
{"lineNum":"  357","line":"    use libc::c_int;"},
{"lineNum":"  358","line":""},
{"lineNum":"  359","line":"    bitflags!("},
{"lineNum":"  360","line":"        flags OFlag: c_int {"},
{"lineNum":"  361","line":"            const O_ACCMODE   = 0x0000003,"},
{"lineNum":"  362","line":"            const O_RDONLY    = 0x0000000,"},
{"lineNum":"  363","line":"            const O_WRONLY    = 0x0000001,"},
{"lineNum":"  364","line":"            const O_RDWR      = 0x0000002,"},
{"lineNum":"  365","line":"            const O_CREAT     = 0x0000200,"},
{"lineNum":"  366","line":"            const O_EXCL      = 0x0000800,"},
{"lineNum":"  367","line":"            const O_NOCTTY    = 0x0008000,"},
{"lineNum":"  368","line":"            const O_TRUNC     = 0x0000400,"},
{"lineNum":"  369","line":"            const O_APPEND    = 0x0000008,"},
{"lineNum":"  370","line":"            const O_NONBLOCK  = 0x0000004,"},
{"lineNum":"  371","line":"            const O_DIRECTORY = 0x8000000, // different from FreeBSD!"},
{"lineNum":"  372","line":"            const O_NOFOLLOW  = 0x0000100,"},
{"lineNum":"  373","line":"            const O_CLOEXEC   = 0x0020000, // different from FreeBSD!"},
{"lineNum":"  374","line":"            const O_SYNC      = 0x0000080,"},
{"lineNum":"  375","line":"            const O_NDELAY    = O_NONBLOCK.bits,"},
{"lineNum":"  376","line":"            const O_FSYNC     = O_SYNC.bits,"},
{"lineNum":"  377","line":"            const O_SHLOCK    = 0x0000010, // different from FreeBSD!"},
{"lineNum":"  378","line":"            const O_EXLOCK    = 0x0000020,"},
{"lineNum":"  379","line":"            const O_DIRECT    = 0x0010000,"},
{"lineNum":"  380","line":"        }"},
{"lineNum":"  381","line":"    );"},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"    bitflags!("},
{"lineNum":"  384","line":"        flags FdFlag: c_int {"},
{"lineNum":"  385","line":"            const FD_CLOEXEC = 1"},
{"lineNum":"  386","line":"        }"},
{"lineNum":"  387","line":"    );"},
{"lineNum":"  388","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test_mio-b9fce113d2acf305", "date" : "2016-02-17 13:22:44", "instrumented" : 17, "covered" : 6,};
var merged_data = [];
