var data = {lines:[
{"lineNum":"    1","line":"use io::MapNonBlock;"},
{"lineNum":"    2","line":"use std::cell::Cell;","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"    3","line":"use std::io::{Read, Write};"},
{"lineNum":"    4","line":"use std::net::{self, SocketAddr};"},
{"lineNum":"    5","line":"use std::os::unix::io::{RawFd, FromRawFd, AsRawFd};"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"use libc;"},
{"lineNum":"    8","line":"use net2::{TcpStreamExt, TcpListenerExt};"},
{"lineNum":"    9","line":"use nix::fcntl::FcntlArg::F_SETFL;"},
{"lineNum":"   10","line":"use nix::fcntl::{fcntl, O_NONBLOCK};"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"use {io, Evented, EventSet, PollOpt, Selector, Token, TryAccept};"},
{"lineNum":"   13","line":"use sys::unix::eventedfd::EventedFd;"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"#[derive(Debug)]"},
{"lineNum":"   16","line":"pub struct TcpStream {"},
{"lineNum":"   17","line":"    inner: net::TcpStream,"},
{"lineNum":"   18","line":"    selector_id: Cell<Option<usize>>,"},
{"lineNum":"   19","line":"}"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"#[derive(Debug)]"},
{"lineNum":"   22","line":"pub struct TcpListener {"},
{"lineNum":"   23","line":"    inner: net::TcpListener,"},
{"lineNum":"   24","line":"    selector_id: Cell<Option<usize>>,"},
{"lineNum":"   25","line":"}"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"fn set_nonblock(s: &AsRawFd) -> io::Result<()> {","class":"lineCov","hits":"1","order":"193","possible_hits":"1",},
{"lineNum":"   28","line":"    fcntl(s.as_raw_fd(), F_SETFL(O_NONBLOCK)).map_err(super::from_nix_error)","class":"lineCov","hits":"1","order":"194","possible_hits":"1",},
{"lineNum":"   29","line":"                                             .map(|_| ())","class":"linePartCov","hits":"2","order":"203","possible_hits":"3",},
{"lineNum":"   30","line":"}","class":"linePartCov","hits":"1","order":"204","possible_hits":"2",},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"impl TcpStream {"},
{"lineNum":"   33","line":"    pub fn connect(stream: net::TcpStream, addr: &SocketAddr) -> io::Result<TcpStream> {"},
{"lineNum":"   34","line":"        try!(set_nonblock(&stream));"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"        match stream.connect(addr) {"},
{"lineNum":"   37","line":"            Ok(..) => {}"},
{"lineNum":"   38","line":"            Err(ref e) if e.raw_os_error() == Some(libc::EINPROGRESS) => {}"},
{"lineNum":"   39","line":"            Err(e) => return Err(e),"},
{"lineNum":"   40","line":"        }"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"        Ok(TcpStream {"},
{"lineNum":"   43","line":"            inner: stream,"},
{"lineNum":"   44","line":"            selector_id: Cell::new(None),"},
{"lineNum":"   45","line":"        })"},
{"lineNum":"   46","line":"    }"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"    pub fn peer_addr(&self) -> io::Result<SocketAddr> {"},
{"lineNum":"   49","line":"        self.inner.peer_addr()"},
{"lineNum":"   50","line":"    }"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"    pub fn local_addr(&self) -> io::Result<SocketAddr> {"},
{"lineNum":"   53","line":"        self.inner.local_addr()"},
{"lineNum":"   54","line":"    }"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"    pub fn try_clone(&self) -> io::Result<TcpStream> {"},
{"lineNum":"   57","line":"        self.inner.try_clone().map(|s| {"},
{"lineNum":"   58","line":"            TcpStream {"},
{"lineNum":"   59","line":"                inner: s,"},
{"lineNum":"   60","line":"                selector_id: self.selector_id.clone(),"},
{"lineNum":"   61","line":"            }"},
{"lineNum":"   62","line":"        })"},
{"lineNum":"   63","line":"    }"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"    pub fn shutdown(&self, how: net::Shutdown) -> io::Result<()> {"},
{"lineNum":"   66","line":"        self.inner.shutdown(how)"},
{"lineNum":"   67","line":"    }"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"    pub fn set_nodelay(&self, nodelay: bool) -> io::Result<()> {"},
{"lineNum":"   70","line":"        TcpStreamExt::set_nodelay(&self.inner, nodelay)"},
{"lineNum":"   71","line":"    }"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"    pub fn set_keepalive(&self, seconds: Option<u32>) -> io::Result<()> {"},
{"lineNum":"   74","line":"        self.inner.set_keepalive_ms(seconds.map(|s| s * 1000))"},
{"lineNum":"   75","line":"    }"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"    pub fn take_socket_error(&self) -> io::Result<()> {"},
{"lineNum":"   78","line":"        self.inner.take_error().and_then(|e| {"},
{"lineNum":"   79","line":"            match e {"},
{"lineNum":"   80","line":"                Some(e) => Err(e),"},
{"lineNum":"   81","line":"                None => Ok(())"},
{"lineNum":"   82","line":"            }"},
{"lineNum":"   83","line":"        })"},
{"lineNum":"   84","line":"    }"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"    fn associate_selector(&self, selector: &Selector) -> io::Result<()> {","class":"lineCov","hits":"1","order":"1403","possible_hits":"1",},
{"lineNum":"   87","line":"        let selector_id = self.selector_id.get();","class":"lineCov","hits":"1","order":"1404","possible_hits":"1",},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"        if selector_id.is_some() && selector_id != Some(selector.id()) {","class":"lineCov","hits":"1","order":"1405","possible_hits":"1",},
{"lineNum":"   90","line":"            Err(io::Error::new(io::ErrorKind::Other, \"socket already registered\"))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   91","line":"        } else {"},
{"lineNum":"   92","line":"            self.selector_id.set(Some(selector.id()));","class":"lineCov","hits":"1","order":"1406","possible_hits":"1",},
{"lineNum":"   93","line":"            Ok(())"},
{"lineNum":"   94","line":"        }"},
{"lineNum":"   95","line":"    }","class":"linePartCov","hits":"1","order":"1407","possible_hits":"2",},
{"lineNum":"   96","line":"}"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"impl Read for TcpStream {"},
{"lineNum":"   99","line":"    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {"},
{"lineNum":"  100","line":"        self.inner.read(buf)"},
{"lineNum":"  101","line":"    }"},
{"lineNum":"  102","line":"}"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"impl Write for TcpStream {"},
{"lineNum":"  105","line":"    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {"},
{"lineNum":"  106","line":"        self.inner.write(buf)"},
{"lineNum":"  107","line":"    }"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"    fn flush(&mut self) -> io::Result<()> {"},
{"lineNum":"  110","line":"        self.inner.flush()"},
{"lineNum":"  111","line":"    }"},
{"lineNum":"  112","line":"}"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"impl Evented for TcpStream {"},
{"lineNum":"  115","line":"    fn register(&self, selector: &mut Selector, token: Token,"},
{"lineNum":"  116","line":"                interest: EventSet, opts: PollOpt) -> io::Result<()> {","class":"lineCov","hits":"1","order":"1401","possible_hits":"1",},
{"lineNum":"  117","line":"        try!(self.associate_selector(selector));","class":"lineCov","hits":"1","order":"1402","possible_hits":"1",},
{"lineNum":"  118","line":"        EventedFd(&self.as_raw_fd()).register(selector, token, interest, opts)","class":"lineCov","hits":"1","order":"1408","possible_hits":"1",},
{"lineNum":"  119","line":"    }","class":"linePartCov","hits":"1","order":"1410","possible_hits":"2",},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"    fn reregister(&self, selector: &mut Selector, token: Token,"},
{"lineNum":"  122","line":"                  interest: EventSet, opts: PollOpt) -> io::Result<()> {","class":"lineCov","hits":"1","order":"1743","possible_hits":"1",},
{"lineNum":"  123","line":"        EventedFd(&self.as_raw_fd()).reregister(selector, token, interest, opts)","class":"lineCov","hits":"1","order":"1744","possible_hits":"1",},
{"lineNum":"  124","line":"    }","class":"linePartCov","hits":"1","order":"1753","possible_hits":"2",},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"    fn deregister(&self, selector: &mut Selector) -> io::Result<()> {"},
{"lineNum":"  127","line":"        EventedFd(&self.as_raw_fd()).deregister(selector)"},
{"lineNum":"  128","line":"    }"},
{"lineNum":"  129","line":"}"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"impl FromRawFd for TcpStream {"},
{"lineNum":"  132","line":"    unsafe fn from_raw_fd(fd: RawFd) -> TcpStream {"},
{"lineNum":"  133","line":"        TcpStream {"},
{"lineNum":"  134","line":"            inner: net::TcpStream::from_raw_fd(fd),"},
{"lineNum":"  135","line":"            selector_id: Cell::new(None),"},
{"lineNum":"  136","line":"        }"},
{"lineNum":"  137","line":"    }"},
{"lineNum":"  138","line":"}"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"impl AsRawFd for TcpStream {"},
{"lineNum":"  141","line":"    fn as_raw_fd(&self) -> RawFd {","class":"lineCov","hits":"1","order":"1361","possible_hits":"1",},
{"lineNum":"  142","line":"        self.inner.as_raw_fd()","class":"lineCov","hits":"1","order":"1362","possible_hits":"1",},
{"lineNum":"  143","line":"    }","class":"linePartCov","hits":"1","order":"1363","possible_hits":"2",},
{"lineNum":"  144","line":"}"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"impl TcpListener {"},
{"lineNum":"  147","line":"    pub fn new(inner: net::TcpListener, _addr: &SocketAddr) -> io::Result<TcpListener> {","class":"lineCov","hits":"1","order":"191","possible_hits":"1",},
{"lineNum":"  148","line":"        try!(set_nonblock(&inner));","class":"lineCov","hits":"1","order":"192","possible_hits":"1",},
{"lineNum":"  149","line":"        Ok(TcpListener {"},
{"lineNum":"  150","line":"            inner: inner,"},
{"lineNum":"  151","line":"            selector_id: Cell::new(None),"},
{"lineNum":"  152","line":"        })"},
{"lineNum":"  153","line":"    }","class":"linePartCov","hits":"2","order":"205","possible_hits":"4",},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"    pub fn local_addr(&self) -> io::Result<SocketAddr> {","class":"lineCov","hits":"1","order":"210","possible_hits":"1",},
{"lineNum":"  156","line":"        self.inner.local_addr()","class":"lineCov","hits":"1","order":"211","possible_hits":"1",},
{"lineNum":"  157","line":"    }","class":"linePartCov","hits":"1","order":"212","possible_hits":"2",},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"    pub fn try_clone(&self) -> io::Result<TcpListener> {"},
{"lineNum":"  160","line":"        self.inner.try_clone().map(|s| {"},
{"lineNum":"  161","line":"            TcpListener {"},
{"lineNum":"  162","line":"                inner: s,"},
{"lineNum":"  163","line":"                selector_id: self.selector_id.clone(),"},
{"lineNum":"  164","line":"            }"},
{"lineNum":"  165","line":"        })"},
{"lineNum":"  166","line":"    }"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"    pub fn accept(&self) -> io::Result<Option<(TcpStream, SocketAddr)>> {","class":"lineCov","hits":"1","order":"1347","possible_hits":"1",},
{"lineNum":"  169","line":"        self.inner.accept().and_then(|(s, a)| {","class":"lineCov","hits":"2","order":"1348","possible_hits":"2",},
{"lineNum":"  170","line":"            try!(set_nonblock(&s));","class":"lineCov","hits":"1","order":"1349","possible_hits":"1",},
{"lineNum":"  171","line":"            Ok((TcpStream {"},
{"lineNum":"  172","line":"                inner: s,"},
{"lineNum":"  173","line":"                selector_id: Cell::new(None),"},
{"lineNum":"  174","line":"            }, a))"},
{"lineNum":"  175","line":"        }).map_non_block()","class":"linePartCov","hits":"2","order":"1350","possible_hits":"4",},
{"lineNum":"  176","line":"    }","class":"linePartCov","hits":"1","order":"1355","possible_hits":"2",},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"    pub fn take_socket_error(&self) -> io::Result<()> {"},
{"lineNum":"  179","line":"        self.inner.take_error().and_then(|e| {"},
{"lineNum":"  180","line":"            match e {"},
{"lineNum":"  181","line":"                Some(e) => Err(e),"},
{"lineNum":"  182","line":"                None => Ok(())"},
{"lineNum":"  183","line":"            }"},
{"lineNum":"  184","line":"        })"},
{"lineNum":"  185","line":"    }"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"    fn associate_selector(&self, selector: &Selector) -> io::Result<()> {","class":"lineCov","hits":"1","order":"1164","possible_hits":"1",},
{"lineNum":"  188","line":"        let selector_id = self.selector_id.get();","class":"lineCov","hits":"1","order":"1165","possible_hits":"1",},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"        if selector_id.is_some() && selector_id != Some(selector.id()) {","class":"lineCov","hits":"1","order":"1166","possible_hits":"1",},
{"lineNum":"  191","line":"            Err(io::Error::new(io::ErrorKind::Other, \"socket already registered\"))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  192","line":"        } else {"},
{"lineNum":"  193","line":"            self.selector_id.set(Some(selector.id()));","class":"lineCov","hits":"1","order":"1167","possible_hits":"1",},
{"lineNum":"  194","line":"            Ok(())"},
{"lineNum":"  195","line":"        }"},
{"lineNum":"  196","line":"    }","class":"linePartCov","hits":"1","order":"1171","possible_hits":"2",},
{"lineNum":"  197","line":"}"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"impl Evented for TcpListener {"},
{"lineNum":"  200","line":"    fn register(&self, selector: &mut Selector, token: Token,"},
{"lineNum":"  201","line":"                interest: EventSet, opts: PollOpt) -> io::Result<()> {","class":"lineCov","hits":"1","order":"1162","possible_hits":"1",},
{"lineNum":"  202","line":"        try!(self.associate_selector(selector));","class":"lineCov","hits":"1","order":"1163","possible_hits":"1",},
{"lineNum":"  203","line":"        EventedFd(&self.as_raw_fd()).register(selector, token, interest, opts)","class":"lineCov","hits":"1","order":"1172","possible_hits":"1",},
{"lineNum":"  204","line":"    }","class":"linePartCov","hits":"1","order":"1179","possible_hits":"2",},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"    fn reregister(&self, selector: &mut Selector, token: Token,"},
{"lineNum":"  207","line":"                  interest: EventSet, opts: PollOpt) -> io::Result<()> {"},
{"lineNum":"  208","line":"        EventedFd(&self.as_raw_fd()).reregister(selector, token, interest, opts)"},
{"lineNum":"  209","line":"    }"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"    fn deregister(&self, selector: &mut Selector) -> io::Result<()> {"},
{"lineNum":"  212","line":"        EventedFd(&self.as_raw_fd()).deregister(selector)"},
{"lineNum":"  213","line":"    }"},
{"lineNum":"  214","line":"}"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"impl FromRawFd for TcpListener {"},
{"lineNum":"  217","line":"    unsafe fn from_raw_fd(fd: RawFd) -> TcpListener {"},
{"lineNum":"  218","line":"        TcpListener {"},
{"lineNum":"  219","line":"            inner: net::TcpListener::from_raw_fd(fd),"},
{"lineNum":"  220","line":"            selector_id: Cell::new(None),"},
{"lineNum":"  221","line":"        }"},
{"lineNum":"  222","line":"    }"},
{"lineNum":"  223","line":"}"},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"impl AsRawFd for TcpListener {"},
{"lineNum":"  226","line":"    fn as_raw_fd(&self) -> RawFd {","class":"lineCov","hits":"1","order":"1173","possible_hits":"1",},
{"lineNum":"  227","line":"        self.inner.as_raw_fd()","class":"lineCov","hits":"1","order":"1174","possible_hits":"1",},
{"lineNum":"  228","line":"    }","class":"linePartCov","hits":"1","order":"1175","possible_hits":"2",},
{"lineNum":"  229","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test_mio-b9fce113d2acf305", "date" : "2016-02-17 13:45:59", "instrumented" : 45, "covered" : 42,};
var merged_data = [];
