var data = {lines:[
{"lineNum":"    1","line":"// This is a part of rust-chrono."},
{"lineNum":"    2","line":"// Copyright (c) 2014-2015, Kang Seonghoon."},
{"lineNum":"    3","line":"// See README.md and LICENSE.txt for details."},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"/*!"},
{"lineNum":"    6","line":" * ISO 8601 calendar date without timezone."},
{"lineNum":"    7","line":" */"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"use std::{str, fmt, hash};"},
{"lineNum":"   10","line":"use std::ops::{Add, Sub};"},
{"lineNum":"   11","line":"use num::traits::ToPrimitive;"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"use {Weekday, Datelike};"},
{"lineNum":"   14","line":"use div::div_mod_floor;"},
{"lineNum":"   15","line":"use duration::Duration;"},
{"lineNum":"   16","line":"use naive::time::NaiveTime;"},
{"lineNum":"   17","line":"use naive::datetime::NaiveDateTime;"},
{"lineNum":"   18","line":"use format::{Item, Numeric, Pad};"},
{"lineNum":"   19","line":"use format::{parse, Parsed, ParseError, ParseResult, DelayedFormat, StrftimeItems};"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"use self::internals::{DateImpl, Of, Mdf, YearFlags};"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"const MAX_YEAR: i32 = internals::MAX_YEAR;"},
{"lineNum":"   24","line":"const MIN_YEAR: i32 = internals::MIN_YEAR;"},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"//   MAX_YEAR-12-31 minus 0000-01-01"},
{"lineNum":"   27","line":"// = ((MAX_YEAR+1)-01-01 minus 0001-01-01) + (0001-01-01 minus 0000-01-01) - 1 day"},
{"lineNum":"   28","line":"// = ((MAX_YEAR+1)-01-01 minus 0001-01-01) + 365 days"},
{"lineNum":"   29","line":"// = MAX_YEAR * 365 + (# of leap years from 0001 to MAX_YEAR) + 365 days"},
{"lineNum":"   30","line":"#[cfg(test)] // only used for testing"},
{"lineNum":"   31","line":"const MAX_DAYS_FROM_YEAR_0: i32 = MAX_YEAR * 365 +"},
{"lineNum":"   32","line":"                                  MAX_YEAR / 4 -"},
{"lineNum":"   33","line":"                                  MAX_YEAR / 100 +"},
{"lineNum":"   34","line":"                                  MAX_YEAR / 400 + 365;"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"//   MIN_YEAR-01-01 minus 0000-01-01"},
{"lineNum":"   37","line":"// = (MIN_YEAR+400n+1)-01-01 minus (400n+1)-01-01"},
{"lineNum":"   38","line":"// = ((MIN_YEAR+400n+1)-01-01 minus 0001-01-01) - ((400n+1)-01-01 minus 0001-01-01)"},
{"lineNum":"   39","line":"// = ((MIN_YEAR+400n+1)-01-01 minus 0001-01-01) - 146097n days"},
{"lineNum":"   40","line":"//"},
{"lineNum":"   41","line":"// n is set to 1000 for convenience."},
{"lineNum":"   42","line":"#[cfg(test)] // only used for testing"},
{"lineNum":"   43","line":"const MIN_DAYS_FROM_YEAR_0: i32 = (MIN_YEAR + 400_000) * 365 +"},
{"lineNum":"   44","line":"                                  (MIN_YEAR + 400_000) / 4 -"},
{"lineNum":"   45","line":"                                  (MIN_YEAR + 400_000) / 100 +"},
{"lineNum":"   46","line":"                                  (MIN_YEAR + 400_000) / 400 - 146097_000;"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"/// ISO 8601 calendar date without timezone."},
{"lineNum":"   49","line":"/// Allows for every proleptic Gregorian date from Jan 1, 262145 BCE to Dec 31, 262143 CE."},
{"lineNum":"   50","line":"/// Also supports the conversion from ISO 8601 ordinal and week date."},
{"lineNum":"   51","line":"#[derive(PartialEq, Eq, PartialOrd, Ord, Copy, Clone)]","class":"lineCov","hits":"1","order":"499",},
{"lineNum":"   52","line":"#[cfg_attr(feature = \"rustc-serialize\", derive(RustcEncodable, RustcDecodable))]"},
{"lineNum":"   53","line":"pub struct NaiveDate {"},
{"lineNum":"   54","line":"    ymdf: DateImpl, // (year << 13) | of","class":"lineCov","hits":"1","order":"500",},
{"lineNum":"   55","line":"}"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"/// The minimum possible `NaiveDate`."},
{"lineNum":"   58","line":"pub const MIN: NaiveDate = NaiveDate { ymdf: (MIN_YEAR << 13) | (1 << 4) | 0o07 /*FE*/ };"},
{"lineNum":"   59","line":"/// The maximum possible `NaiveDate`."},
{"lineNum":"   60","line":"pub const MAX: NaiveDate = NaiveDate { ymdf: (MAX_YEAR << 13) | (365 << 4) | 0o17 /*F*/ };"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"// as it is hard to verify year flags in `MIN` and `MAX`, we use a separate run-time test."},
{"lineNum":"   63","line":"#[test]"},
{"lineNum":"   64","line":"fn test_date_bounds() {"},
{"lineNum":"   65","line":"    let calculated_min = NaiveDate::from_ymd(MIN_YEAR, 1, 1);"},
{"lineNum":"   66","line":"    let calculated_max = NaiveDate::from_ymd(MAX_YEAR, 12, 31);"},
{"lineNum":"   67","line":"    assert!(MIN == calculated_min,"},
{"lineNum":"   68","line":"            \"`MIN` should have a year flag {:?}\", calculated_min.of().flags());"},
{"lineNum":"   69","line":"    assert!(MAX == calculated_max,"},
{"lineNum":"   70","line":"            \"`MAX` should have a year flag {:?}\", calculated_max.of().flags());"},
{"lineNum":"   71","line":"}"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"impl NaiveDate {"},
{"lineNum":"   74","line":"    /// Makes a new `NaiveDate` from year and packed ordinal-flags, with a verification."},
{"lineNum":"   75","line":"    fn from_of(year: i32, of: Of) -> Option<NaiveDate> {","class":"lineCov","hits":"1","order":"510",},
{"lineNum":"   76","line":"        if year >= MIN_YEAR && year <= MAX_YEAR && of.valid() {","class":"lineCov","hits":"1","order":"512",},
{"lineNum":"   77","line":"            let Of(of) = of;"},
{"lineNum":"   78","line":"            Some(NaiveDate { ymdf: (year << 13) | (of as DateImpl) })","class":"lineCov","hits":"1","order":"515",},
{"lineNum":"   79","line":"        } else {"},
{"lineNum":"   80","line":"            None"},
{"lineNum":"   81","line":"        }"},
{"lineNum":"   82","line":"    }","class":"lineCov","hits":"1","order":"520",},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"    /// Makes a new `NaiveDate` from year and packed month-day-flags, with a verification."},
{"lineNum":"   85","line":"    fn from_mdf(year: i32, mdf: Mdf) -> Option<NaiveDate> {"},
{"lineNum":"   86","line":"        NaiveDate::from_of(year, mdf.to_of())"},
{"lineNum":"   87","line":"    }"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"    /// Makes a new `NaiveDate` from year, month and day."},
{"lineNum":"   90","line":"    /// This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE."},
{"lineNum":"   91","line":"    ///"},
{"lineNum":"   92","line":"    /// Panics on the out-of-range date, invalid month and/or day."},
{"lineNum":"   93","line":"    ///"},
{"lineNum":"   94","line":"    /// # Example"},
{"lineNum":"   95","line":"    ///"},
{"lineNum":"   96","line":"    /// ~~~~"},
{"lineNum":"   97","line":"    /// use chrono::{NaiveDate, Datelike, Weekday};"},
{"lineNum":"   98","line":"    ///"},
{"lineNum":"   99","line":"    /// let d = NaiveDate::from_ymd(2015, 3, 14);"},
{"lineNum":"  100","line":"    /// assert_eq!(d.year(), 2015);"},
{"lineNum":"  101","line":"    /// assert_eq!(d.month(), 3);"},
{"lineNum":"  102","line":"    /// assert_eq!(d.day(), 14);"},
{"lineNum":"  103","line":"    /// assert_eq!(d.ordinal(), 73); // day of year"},
{"lineNum":"  104","line":"    /// assert_eq!(d.isoweekdate(), (2015, 11, Weekday::Sat)); // ISO week and weekday"},
{"lineNum":"  105","line":"    /// assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE"},
{"lineNum":"  106","line":"    /// ~~~~"},
{"lineNum":"  107","line":"    pub fn from_ymd(year: i32, month: u32, day: u32) -> NaiveDate {"},
{"lineNum":"  108","line":"        NaiveDate::from_ymd_opt(year, month, day).expect(\"invalid or out-of-range date\")"},
{"lineNum":"  109","line":"    }"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"    /// Makes a new `NaiveDate` from year, month and day."},
{"lineNum":"  112","line":"    /// This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE."},
{"lineNum":"  113","line":"    ///"},
{"lineNum":"  114","line":"    /// Returns `None` on the out-of-range date, invalid month and/or day."},
{"lineNum":"  115","line":"    ///"},
{"lineNum":"  116","line":"    /// # Example"},
{"lineNum":"  117","line":"    ///"},
{"lineNum":"  118","line":"    /// ~~~~"},
{"lineNum":"  119","line":"    /// use chrono::NaiveDate;"},
{"lineNum":"  120","line":"    ///"},
{"lineNum":"  121","line":"    /// let ymd = |y,m,d| NaiveDate::from_ymd_opt(y, m, d);"},
{"lineNum":"  122","line":"    /// assert!(ymd(2015, 3, 14).is_some());"},
{"lineNum":"  123","line":"    /// assert!(ymd(2015, 0, 14).is_none());"},
{"lineNum":"  124","line":"    /// assert!(ymd(2015, 2, 29).is_none());"},
{"lineNum":"  125","line":"    /// assert!(ymd(-4, 2, 29).is_some()); // 5 BCE is a leap year"},
{"lineNum":"  126","line":"    /// assert!(ymd(400000, 1, 1).is_none());"},
{"lineNum":"  127","line":"    /// assert!(ymd(-400000, 1, 1).is_none());"},
{"lineNum":"  128","line":"    /// ~~~~"},
{"lineNum":"  129","line":"    pub fn from_ymd_opt(year: i32, month: u32, day: u32) -> Option<NaiveDate> {"},
{"lineNum":"  130","line":"        let flags = YearFlags::from_year(year);"},
{"lineNum":"  131","line":"        NaiveDate::from_mdf(year, Mdf::new(month, day, flags))"},
{"lineNum":"  132","line":"    }"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"    /// Makes a new `NaiveDate` from year and day of year (DOY or \"ordinal\")."},
{"lineNum":"  135","line":"    /// This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE."},
{"lineNum":"  136","line":"    ///"},
{"lineNum":"  137","line":"    /// Panics on the out-of-range date and/or invalid DOY."},
{"lineNum":"  138","line":"    ///"},
{"lineNum":"  139","line":"    /// # Example"},
{"lineNum":"  140","line":"    ///"},
{"lineNum":"  141","line":"    /// ~~~~"},
{"lineNum":"  142","line":"    /// use chrono::{NaiveDate, Datelike, Weekday};"},
{"lineNum":"  143","line":"    ///"},
{"lineNum":"  144","line":"    /// let d = NaiveDate::from_yo(2015, 73);"},
{"lineNum":"  145","line":"    /// assert_eq!(d.ordinal(), 73);"},
{"lineNum":"  146","line":"    /// assert_eq!(d.year(), 2015);"},
{"lineNum":"  147","line":"    /// assert_eq!(d.month(), 3);"},
{"lineNum":"  148","line":"    /// assert_eq!(d.day(), 14);"},
{"lineNum":"  149","line":"    /// assert_eq!(d.isoweekdate(), (2015, 11, Weekday::Sat)); // ISO week and weekday"},
{"lineNum":"  150","line":"    /// assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE"},
{"lineNum":"  151","line":"    /// ~~~~"},
{"lineNum":"  152","line":"    pub fn from_yo(year: i32, ordinal: u32) -> NaiveDate {"},
{"lineNum":"  153","line":"        NaiveDate::from_yo_opt(year, ordinal).expect(\"invalid or out-of-range date\")"},
{"lineNum":"  154","line":"    }"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"    /// Makes a new `NaiveDate` from year and day of year (DOY or \"ordinal\")."},
{"lineNum":"  157","line":"    /// This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE."},
{"lineNum":"  158","line":"    ///"},
{"lineNum":"  159","line":"    /// Returns `None` on the out-of-range date and/or invalid DOY."},
{"lineNum":"  160","line":"    ///"},
{"lineNum":"  161","line":"    /// # Example"},
{"lineNum":"  162","line":"    ///"},
{"lineNum":"  163","line":"    /// ~~~~"},
{"lineNum":"  164","line":"    /// use chrono::NaiveDate;"},
{"lineNum":"  165","line":"    ///"},
{"lineNum":"  166","line":"    /// let yo = |y,o| NaiveDate::from_yo_opt(y, o);"},
{"lineNum":"  167","line":"    /// assert!(yo(2015, 100).is_some());"},
{"lineNum":"  168","line":"    /// assert!(yo(2015, 0).is_none());"},
{"lineNum":"  169","line":"    /// assert!(yo(2015, 365).is_some());"},
{"lineNum":"  170","line":"    /// assert!(yo(2015, 366).is_none());"},
{"lineNum":"  171","line":"    /// assert!(yo(-4, 366).is_some()); // 5 BCE is a leap year"},
{"lineNum":"  172","line":"    /// assert!(yo(400000, 1).is_none());"},
{"lineNum":"  173","line":"    /// assert!(yo(-400000, 1).is_none());"},
{"lineNum":"  174","line":"    /// ~~~~"},
{"lineNum":"  175","line":"    pub fn from_yo_opt(year: i32, ordinal: u32) -> Option<NaiveDate> {"},
{"lineNum":"  176","line":"        let flags = YearFlags::from_year(year);"},
{"lineNum":"  177","line":"        NaiveDate::from_of(year, Of::new(ordinal, flags))"},
{"lineNum":"  178","line":"    }"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"    /// Makes a new `NaiveDate` from ISO week date (year and week number) and day of the week (DOW)."},
{"lineNum":"  181","line":"    /// This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE."},
{"lineNum":"  182","line":"    /// The resulting `NaiveDate` may have a different year from the input year."},
{"lineNum":"  183","line":"    ///"},
{"lineNum":"  184","line":"    /// Panics on the out-of-range date and/or invalid week number."},
{"lineNum":"  185","line":"    ///"},
{"lineNum":"  186","line":"    /// # Example"},
{"lineNum":"  187","line":"    ///"},
{"lineNum":"  188","line":"    /// ~~~~"},
{"lineNum":"  189","line":"    /// use chrono::{NaiveDate, Datelike, Weekday};"},
{"lineNum":"  190","line":"    ///"},
{"lineNum":"  191","line":"    /// let d = NaiveDate::from_isoywd(2015, 11, Weekday::Sat);"},
{"lineNum":"  192","line":"    /// assert_eq!(d.isoweekdate(), (2015, 11, Weekday::Sat));"},
{"lineNum":"  193","line":"    /// assert_eq!(d.year(), 2015);"},
{"lineNum":"  194","line":"    /// assert_eq!(d.month(), 3);"},
{"lineNum":"  195","line":"    /// assert_eq!(d.day(), 14);"},
{"lineNum":"  196","line":"    /// assert_eq!(d.ordinal(), 73); // day of year"},
{"lineNum":"  197","line":"    /// assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE"},
{"lineNum":"  198","line":"    /// ~~~~"},
{"lineNum":"  199","line":"    pub fn from_isoywd(year: i32, week: u32, weekday: Weekday) -> NaiveDate {"},
{"lineNum":"  200","line":"        NaiveDate::from_isoywd_opt(year, week, weekday).expect(\"invalid or out-of-range date\")"},
{"lineNum":"  201","line":"    }"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"    /// Makes a new `NaiveDate` from ISO week date (year and week number) and day of the week (DOW)."},
{"lineNum":"  204","line":"    /// This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE."},
{"lineNum":"  205","line":"    /// The resulting `NaiveDate` may have a different year from the input year."},
{"lineNum":"  206","line":"    ///"},
{"lineNum":"  207","line":"    /// Returns `None` on the out-of-range date and/or invalid week number."},
{"lineNum":"  208","line":"    ///"},
{"lineNum":"  209","line":"    /// # Example"},
{"lineNum":"  210","line":"    ///"},
{"lineNum":"  211","line":"    /// ~~~~"},
{"lineNum":"  212","line":"    /// use chrono::{NaiveDate, Weekday};"},
{"lineNum":"  213","line":"    ///"},
{"lineNum":"  214","line":"    /// let ymd = |y,m,d| NaiveDate::from_ymd(y, m, d);"},
{"lineNum":"  215","line":"    /// let isoywd = |y,w,d| NaiveDate::from_isoywd_opt(y, w, d);"},
{"lineNum":"  216","line":"    ///"},
{"lineNum":"  217","line":"    /// assert_eq!(isoywd(2015, 0, Weekday::Sun), None);"},
{"lineNum":"  218","line":"    /// assert_eq!(isoywd(2015, 10, Weekday::Sun), Some(ymd(2015, 3, 8)));"},
{"lineNum":"  219","line":"    /// assert_eq!(isoywd(2015, 30, Weekday::Mon), Some(ymd(2015, 7, 20)));"},
{"lineNum":"  220","line":"    /// assert_eq!(isoywd(2015, 60, Weekday::Mon), None);"},
{"lineNum":"  221","line":"    ///"},
{"lineNum":"  222","line":"    /// // out-of-range dates"},
{"lineNum":"  223","line":"    /// assert_eq!(isoywd(400000, 10, Weekday::Fri), None);"},
{"lineNum":"  224","line":"    /// assert_eq!(isoywd(-400000, 10, Weekday::Sat), None);"},
{"lineNum":"  225","line":"    ///"},
{"lineNum":"  226","line":"    /// // year boundary behaviors"},
{"lineNum":"  227","line":"    /// //"},
{"lineNum":"  228","line":"    /// //           Mo Tu We Th Fr Sa Su"},
{"lineNum":"  229","line":"    /// // 2014-W52  22 23 24 25 26 27 28    has 4+ days of new year,"},
{"lineNum":"  230","line":"    /// // 2015-W01  29 30 31  1  2  3  4 <- so this is the first week"},
{"lineNum":"  231","line":"    /// assert_eq!(isoywd(2014, 52, Weekday::Sun), Some(ymd(2014, 12, 28)));"},
{"lineNum":"  232","line":"    /// assert_eq!(isoywd(2014, 53, Weekday::Mon), None);"},
{"lineNum":"  233","line":"    /// assert_eq!(isoywd(2015, 1, Weekday::Mon), Some(ymd(2014, 12, 29)));"},
{"lineNum":"  234","line":"    ///"},
{"lineNum":"  235","line":"    /// // 2015-W52  21 22 23 24 25 26 27    has 4+ days of old year,"},
{"lineNum":"  236","line":"    /// // 2015-W53  28 29 30 31  1  2  3 <- so this is the last week"},
{"lineNum":"  237","line":"    /// // 2016-W01   4  5  6  7  8  9 10"},
{"lineNum":"  238","line":"    /// assert_eq!(isoywd(2015, 52, Weekday::Sun), Some(ymd(2015, 12, 27)));"},
{"lineNum":"  239","line":"    /// assert_eq!(isoywd(2015, 53, Weekday::Sun), Some(ymd(2016, 1, 3)));"},
{"lineNum":"  240","line":"    /// assert_eq!(isoywd(2015, 54, Weekday::Mon), None);"},
{"lineNum":"  241","line":"    /// assert_eq!(isoywd(2016, 1, Weekday::Mon), Some(ymd(2016, 1, 4)));"},
{"lineNum":"  242","line":"    /// ~~~~"},
{"lineNum":"  243","line":"    pub fn from_isoywd_opt(year: i32, week: u32, weekday: Weekday) -> Option<NaiveDate> {"},
{"lineNum":"  244","line":"        let flags = YearFlags::from_year(year);"},
{"lineNum":"  245","line":"        let nweeks = flags.nisoweeks();"},
{"lineNum":"  246","line":"        if 1 <= week && week <= nweeks {"},
{"lineNum":"  247","line":"            // ordinal = week ordinal - delta"},
{"lineNum":"  248","line":"            let weekord = week * 7 + weekday as u32;"},
{"lineNum":"  249","line":"            let delta = flags.isoweek_delta();"},
{"lineNum":"  250","line":"            if weekord <= delta { // ordinal < 1, previous year"},
{"lineNum":"  251","line":"                let prevflags = YearFlags::from_year(year - 1);"},
{"lineNum":"  252","line":"                NaiveDate::from_of(year - 1, Of::new(weekord + prevflags.ndays() - delta,"},
{"lineNum":"  253","line":"                                                     prevflags))"},
{"lineNum":"  254","line":"            } else {"},
{"lineNum":"  255","line":"                let ordinal = weekord - delta;"},
{"lineNum":"  256","line":"                let ndays = flags.ndays();"},
{"lineNum":"  257","line":"                if ordinal <= ndays { // this year"},
{"lineNum":"  258","line":"                    NaiveDate::from_of(year, Of::new(ordinal, flags))"},
{"lineNum":"  259","line":"                } else { // ordinal > ndays, next year"},
{"lineNum":"  260","line":"                    let nextflags = YearFlags::from_year(year + 1);"},
{"lineNum":"  261","line":"                    NaiveDate::from_of(year + 1, Of::new(ordinal - ndays, nextflags))"},
{"lineNum":"  262","line":"                }"},
{"lineNum":"  263","line":"            }"},
{"lineNum":"  264","line":"        } else {"},
{"lineNum":"  265","line":"            None"},
{"lineNum":"  266","line":"        }"},
{"lineNum":"  267","line":"    }"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"    /// Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1)"},
{"lineNum":"  270","line":"    /// in the proleptic Gregorian calendar."},
{"lineNum":"  271","line":"    ///"},
{"lineNum":"  272","line":"    /// Panics on the out-of-range date."},
{"lineNum":"  273","line":"    ///"},
{"lineNum":"  274","line":"    /// # Example"},
{"lineNum":"  275","line":"    ///"},
{"lineNum":"  276","line":"    /// ~~~~"},
{"lineNum":"  277","line":"    /// use chrono::{NaiveDate, Datelike, Weekday};"},
{"lineNum":"  278","line":"    ///"},
{"lineNum":"  279","line":"    /// let d = NaiveDate::from_num_days_from_ce(735671);"},
{"lineNum":"  280","line":"    /// assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE"},
{"lineNum":"  281","line":"    /// assert_eq!(d.year(), 2015);"},
{"lineNum":"  282","line":"    /// assert_eq!(d.month(), 3);"},
{"lineNum":"  283","line":"    /// assert_eq!(d.day(), 14);"},
{"lineNum":"  284","line":"    /// assert_eq!(d.ordinal(), 73); // day of year"},
{"lineNum":"  285","line":"    /// assert_eq!(d.isoweekdate(), (2015, 11, Weekday::Sat)); // ISO week and weekday"},
{"lineNum":"  286","line":"    /// ~~~~"},
{"lineNum":"  287","line":"    #[inline]"},
{"lineNum":"  288","line":"    pub fn from_num_days_from_ce(days: i32) -> NaiveDate {"},
{"lineNum":"  289","line":"        NaiveDate::from_num_days_from_ce_opt(days).expect(\"out-of-range date\")"},
{"lineNum":"  290","line":"    }"},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"    /// Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1)"},
{"lineNum":"  293","line":"    /// in the proleptic Gregorian calendar."},
{"lineNum":"  294","line":"    ///"},
{"lineNum":"  295","line":"    /// Returns `None` on the out-of-range date."},
{"lineNum":"  296","line":"    ///"},
{"lineNum":"  297","line":"    /// # Example"},
{"lineNum":"  298","line":"    ///"},
{"lineNum":"  299","line":"    /// ~~~~"},
{"lineNum":"  300","line":"    /// use chrono::NaiveDate;"},
{"lineNum":"  301","line":"    ///"},
{"lineNum":"  302","line":"    /// let days = |ndays| NaiveDate::from_num_days_from_ce_opt(ndays);"},
{"lineNum":"  303","line":"    /// assert_eq!(days(730000),     Some(NaiveDate::from_ymd(1999, 9, 3)));"},
{"lineNum":"  304","line":"    /// assert_eq!(days(1),          Some(NaiveDate::from_ymd(1, 1, 1)));"},
{"lineNum":"  305","line":"    /// assert_eq!(days(0),          Some(NaiveDate::from_ymd(0, 12, 31)));"},
{"lineNum":"  306","line":"    /// assert_eq!(days(-1),         Some(NaiveDate::from_ymd(0, 12, 30)));"},
{"lineNum":"  307","line":"    /// assert_eq!(days(100000000),  None);"},
{"lineNum":"  308","line":"    /// assert_eq!(days(-100000000), None);"},
{"lineNum":"  309","line":"    /// ~~~~"},
{"lineNum":"  310","line":"    pub fn from_num_days_from_ce_opt(days: i32) -> Option<NaiveDate> {","class":"lineCov","hits":"1","order":"509",},
{"lineNum":"  311","line":"        let days = days + 365; // make December 31, 1 BCE equal to day 0","class":"lineCov","hits":"1","order":"511",},
{"lineNum":"  312","line":"        let (year_div_400, cycle) = div_mod_floor(days, 146097);","class":"lineCov","hits":"1","order":"513",},
{"lineNum":"  313","line":"        let (year_mod_400, ordinal) = internals::cycle_to_yo(cycle as u32);","class":"lineCov","hits":"1","order":"514",},
{"lineNum":"  314","line":"        let flags = YearFlags::from_year_mod_400(year_mod_400 as i32);","class":"lineCov","hits":"1","order":"516",},
{"lineNum":"  315","line":"        NaiveDate::from_of(year_div_400 * 400 + year_mod_400 as i32,","class":"lineCov","hits":"1","order":"517",},
{"lineNum":"  316","line":"                           Of::new(ordinal, flags))","class":"lineCov","hits":"1","order":"518",},
{"lineNum":"  317","line":"    }","class":"lineCov","hits":"1","order":"519",},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"    /// Parses a string with the specified format string and returns a new `NaiveDate`."},
{"lineNum":"  320","line":"    /// See the [`format::strftime` module](../../format/strftime/index.html)"},
{"lineNum":"  321","line":"    /// on the supported escape sequences."},
{"lineNum":"  322","line":"    ///"},
{"lineNum":"  323","line":"    /// # Example"},
{"lineNum":"  324","line":"    ///"},
{"lineNum":"  325","line":"    /// ~~~~"},
{"lineNum":"  326","line":"    /// use chrono::NaiveDate;"},
{"lineNum":"  327","line":"    ///"},
{"lineNum":"  328","line":"    /// assert_eq!(NaiveDate::parse_from_str(\"2015-09-05\", \"%Y-%m-%d\"),"},
{"lineNum":"  329","line":"    ///            Ok(NaiveDate::from_ymd(2015, 9, 5)));"},
{"lineNum":"  330","line":"    /// assert_eq!(NaiveDate::parse_from_str(\"5sep2015\", \"%d%b%Y\"),"},
{"lineNum":"  331","line":"    ///            Ok(NaiveDate::from_ymd(2015, 9, 5)));"},
{"lineNum":"  332","line":"    /// ~~~~"},
{"lineNum":"  333","line":"    ///"},
{"lineNum":"  334","line":"    /// Time and offset is ignored for the purpose of parsing."},
{"lineNum":"  335","line":"    ///"},
{"lineNum":"  336","line":"    /// ~~~~"},
{"lineNum":"  337","line":"    /// # use chrono::NaiveDate;"},
{"lineNum":"  338","line":"    /// assert_eq!(NaiveDate::parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),"},
{"lineNum":"  339","line":"    ///            Ok(NaiveDate::from_ymd(2014, 5, 17)));"},
{"lineNum":"  340","line":"    /// ~~~~"},
{"lineNum":"  341","line":"    ///"},
{"lineNum":"  342","line":"    /// Out-of-bound dates or insufficient fields are errors."},
{"lineNum":"  343","line":"    ///"},
{"lineNum":"  344","line":"    /// ~~~~"},
{"lineNum":"  345","line":"    /// # use chrono::NaiveDate;"},
{"lineNum":"  346","line":"    /// assert!(NaiveDate::parse_from_str(\"2015/9\", \"%Y/%m\").is_err());"},
{"lineNum":"  347","line":"    /// assert!(NaiveDate::parse_from_str(\"2015/9/31\", \"%Y/%m/%d\").is_err());"},
{"lineNum":"  348","line":"    /// ~~~~"},
{"lineNum":"  349","line":"    ///"},
{"lineNum":"  350","line":"    /// All parsed fields should be consistent to each other, otherwise it\'s an error."},
{"lineNum":"  351","line":"    ///"},
{"lineNum":"  352","line":"    /// ~~~~"},
{"lineNum":"  353","line":"    /// # use chrono::NaiveDate;"},
{"lineNum":"  354","line":"    /// assert!(NaiveDate::parse_from_str(\"Sat, 09 Aug 2013\", \"%a, %d %b %Y\").is_err());"},
{"lineNum":"  355","line":"    /// ~~~~"},
{"lineNum":"  356","line":"    pub fn parse_from_str(s: &str, fmt: &str) -> ParseResult<NaiveDate> {"},
{"lineNum":"  357","line":"        let mut parsed = Parsed::new();"},
{"lineNum":"  358","line":"        try!(parse(&mut parsed, s, StrftimeItems::new(fmt)));"},
{"lineNum":"  359","line":"        parsed.to_naive_date()"},
{"lineNum":"  360","line":"    }"},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"    /// Makes a new `NaiveDateTime` from the current date and given `NaiveTime`."},
{"lineNum":"  363","line":"    ///"},
{"lineNum":"  364","line":"    /// # Example"},
{"lineNum":"  365","line":"    ///"},
{"lineNum":"  366","line":"    /// ~~~~"},
{"lineNum":"  367","line":"    /// use chrono::{NaiveDate, NaiveTime, NaiveDateTime};"},
{"lineNum":"  368","line":"    ///"},
{"lineNum":"  369","line":"    /// let d = NaiveDate::from_ymd(2015, 6, 3);"},
{"lineNum":"  370","line":"    /// let t = NaiveTime::from_hms_milli(12, 34, 56, 789);"},
{"lineNum":"  371","line":"    ///"},
{"lineNum":"  372","line":"    /// let dt: NaiveDateTime = d.and_time(t);"},
{"lineNum":"  373","line":"    /// assert_eq!(dt.date(), d);"},
{"lineNum":"  374","line":"    /// assert_eq!(dt.time(), t);"},
{"lineNum":"  375","line":"    /// ~~~~"},
{"lineNum":"  376","line":"    #[inline]"},
{"lineNum":"  377","line":"    pub fn and_time(&self, time: NaiveTime) -> NaiveDateTime {"},
{"lineNum":"  378","line":"        NaiveDateTime::new(self.clone(), time)"},
{"lineNum":"  379","line":"    }"},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"    /// Makes a new `NaiveDateTime` from the current date, hour, minute and second."},
{"lineNum":"  382","line":"    ///"},
{"lineNum":"  383","line":"    /// No [leap second](../time/struct.NaiveTime.html#leap-second-what?) is allowed here;"},
{"lineNum":"  384","line":"    /// use `NaiveDate::and_hms_*` methods with a subsecond parameter instead."},
{"lineNum":"  385","line":"    ///"},
{"lineNum":"  386","line":"    /// Panics on invalid hour, minute and/or second."},
{"lineNum":"  387","line":"    ///"},
{"lineNum":"  388","line":"    /// # Example"},
{"lineNum":"  389","line":"    ///"},
{"lineNum":"  390","line":"    /// ~~~~"},
{"lineNum":"  391","line":"    /// use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};"},
{"lineNum":"  392","line":"    ///"},
{"lineNum":"  393","line":"    /// let d = NaiveDate::from_ymd(2015, 6, 3);"},
{"lineNum":"  394","line":"    ///"},
{"lineNum":"  395","line":"    /// let dt: NaiveDateTime = d.and_hms(12, 34, 56);"},
{"lineNum":"  396","line":"    /// assert_eq!(dt.year(), 2015);"},
{"lineNum":"  397","line":"    /// assert_eq!(dt.weekday(), Weekday::Wed);"},
{"lineNum":"  398","line":"    /// assert_eq!(dt.second(), 56);"},
{"lineNum":"  399","line":"    /// ~~~~"},
{"lineNum":"  400","line":"    #[inline]"},
{"lineNum":"  401","line":"    pub fn and_hms(&self, hour: u32, min: u32, sec: u32) -> NaiveDateTime {"},
{"lineNum":"  402","line":"        self.and_hms_opt(hour, min, sec).expect(\"invalid time\")"},
{"lineNum":"  403","line":"    }"},
{"lineNum":"  404","line":""},
{"lineNum":"  405","line":"    /// Makes a new `NaiveDateTime` from the current date, hour, minute and second."},
{"lineNum":"  406","line":"    ///"},
{"lineNum":"  407","line":"    /// No [leap second](../time/struct.NaiveTime.html#leap-second-what?) is allowed here;"},
{"lineNum":"  408","line":"    /// use `NaiveDate::and_hms_*_opt` methods with a subsecond parameter instead."},
{"lineNum":"  409","line":"    ///"},
{"lineNum":"  410","line":"    /// Returns `None` on invalid hour, minute and/or second."},
{"lineNum":"  411","line":"    ///"},
{"lineNum":"  412","line":"    /// # Example"},
{"lineNum":"  413","line":"    ///"},
{"lineNum":"  414","line":"    /// ~~~~"},
{"lineNum":"  415","line":"    /// use chrono::NaiveDate;"},
{"lineNum":"  416","line":"    ///"},
{"lineNum":"  417","line":"    /// let d = NaiveDate::from_ymd(2015, 6, 3);"},
{"lineNum":"  418","line":"    /// assert!(d.and_hms_opt(12, 34, 56).is_some());"},
{"lineNum":"  419","line":"    /// assert!(d.and_hms_opt(12, 34, 60).is_none()); // use `and_hms_milli_opt` instead"},
{"lineNum":"  420","line":"    /// assert!(d.and_hms_opt(12, 60, 56).is_none());"},
{"lineNum":"  421","line":"    /// assert!(d.and_hms_opt(24, 34, 56).is_none());"},
{"lineNum":"  422","line":"    /// ~~~~"},
{"lineNum":"  423","line":"    #[inline]"},
{"lineNum":"  424","line":"    pub fn and_hms_opt(&self, hour: u32, min: u32, sec: u32) -> Option<NaiveDateTime> {"},
{"lineNum":"  425","line":"        NaiveTime::from_hms_opt(hour, min, sec).map(|time| self.and_time(time))"},
{"lineNum":"  426","line":"    }"},
{"lineNum":"  427","line":""},
{"lineNum":"  428","line":"    /// Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond."},
{"lineNum":"  429","line":"    ///"},
{"lineNum":"  430","line":"    /// The millisecond part can exceed 1,000"},
{"lineNum":"  431","line":"    /// in order to represent the [leap second](../time/struct.NaiveTime.html#leap-second-what?)."},
{"lineNum":"  432","line":"    ///"},
{"lineNum":"  433","line":"    /// Panics on invalid hour, minute, second and/or millisecond."},
{"lineNum":"  434","line":"    ///"},
{"lineNum":"  435","line":"    /// # Example"},
{"lineNum":"  436","line":"    ///"},
{"lineNum":"  437","line":"    /// ~~~~"},
{"lineNum":"  438","line":"    /// use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};"},
{"lineNum":"  439","line":"    ///"},
{"lineNum":"  440","line":"    /// let d = NaiveDate::from_ymd(2015, 6, 3);"},
{"lineNum":"  441","line":"    ///"},
{"lineNum":"  442","line":"    /// let dt: NaiveDateTime = d.and_hms_milli(12, 34, 56, 789);"},
{"lineNum":"  443","line":"    /// assert_eq!(dt.year(), 2015);"},
{"lineNum":"  444","line":"    /// assert_eq!(dt.weekday(), Weekday::Wed);"},
{"lineNum":"  445","line":"    /// assert_eq!(dt.second(), 56);"},
{"lineNum":"  446","line":"    /// assert_eq!(dt.nanosecond(), 789_000_000);"},
{"lineNum":"  447","line":"    /// ~~~~"},
{"lineNum":"  448","line":"    #[inline]"},
{"lineNum":"  449","line":"    pub fn and_hms_milli(&self, hour: u32, min: u32, sec: u32, milli: u32) -> NaiveDateTime {"},
{"lineNum":"  450","line":"        self.and_hms_milli_opt(hour, min, sec, milli).expect(\"invalid time\")"},
{"lineNum":"  451","line":"    }"},
{"lineNum":"  452","line":""},
{"lineNum":"  453","line":"    /// Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond."},
{"lineNum":"  454","line":"    ///"},
{"lineNum":"  455","line":"    /// The millisecond part can exceed 1,000"},
{"lineNum":"  456","line":"    /// in order to represent the [leap second](../time/struct.NaiveTime.html#leap-second-what?)."},
{"lineNum":"  457","line":"    ///"},
{"lineNum":"  458","line":"    /// Returns `None` on invalid hour, minute, second and/or millisecond."},
{"lineNum":"  459","line":"    ///"},
{"lineNum":"  460","line":"    /// # Example"},
{"lineNum":"  461","line":"    ///"},
{"lineNum":"  462","line":"    /// ~~~~"},
{"lineNum":"  463","line":"    /// use chrono::NaiveDate;"},
{"lineNum":"  464","line":"    ///"},
{"lineNum":"  465","line":"    /// let d = NaiveDate::from_ymd(2015, 6, 3);"},
{"lineNum":"  466","line":"    /// assert!(d.and_hms_milli_opt(12, 34, 56,   789).is_some());"},
{"lineNum":"  467","line":"    /// assert!(d.and_hms_milli_opt(12, 34, 59, 1_789).is_some()); // leap second"},
{"lineNum":"  468","line":"    /// assert!(d.and_hms_milli_opt(12, 34, 59, 2_789).is_none());"},
{"lineNum":"  469","line":"    /// assert!(d.and_hms_milli_opt(12, 34, 60,   789).is_none());"},
{"lineNum":"  470","line":"    /// assert!(d.and_hms_milli_opt(12, 60, 56,   789).is_none());"},
{"lineNum":"  471","line":"    /// assert!(d.and_hms_milli_opt(24, 34, 56,   789).is_none());"},
{"lineNum":"  472","line":"    /// ~~~~"},
{"lineNum":"  473","line":"    #[inline]"},
{"lineNum":"  474","line":"    pub fn and_hms_milli_opt(&self, hour: u32, min: u32, sec: u32,"},
{"lineNum":"  475","line":"                             milli: u32) -> Option<NaiveDateTime> {"},
{"lineNum":"  476","line":"        NaiveTime::from_hms_milli_opt(hour, min, sec, milli).map(|time| self.and_time(time))"},
{"lineNum":"  477","line":"    }"},
{"lineNum":"  478","line":""},
{"lineNum":"  479","line":"    /// Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond."},
{"lineNum":"  480","line":"    ///"},
{"lineNum":"  481","line":"    /// The microsecond part can exceed 1,000,000"},
{"lineNum":"  482","line":"    /// in order to represent the [leap second](../time/struct.NaiveTime.html#leap-second-what?)."},
{"lineNum":"  483","line":"    ///"},
{"lineNum":"  484","line":"    /// Panics on invalid hour, minute, second and/or microsecond."},
{"lineNum":"  485","line":"    ///"},
{"lineNum":"  486","line":"    /// # Example"},
{"lineNum":"  487","line":"    ///"},
{"lineNum":"  488","line":"    /// ~~~~"},
{"lineNum":"  489","line":"    /// use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};"},
{"lineNum":"  490","line":"    ///"},
{"lineNum":"  491","line":"    /// let d = NaiveDate::from_ymd(2015, 6, 3);"},
{"lineNum":"  492","line":"    ///"},
{"lineNum":"  493","line":"    /// let dt: NaiveDateTime = d.and_hms_micro(12, 34, 56, 789_012);"},
{"lineNum":"  494","line":"    /// assert_eq!(dt.year(), 2015);"},
{"lineNum":"  495","line":"    /// assert_eq!(dt.weekday(), Weekday::Wed);"},
{"lineNum":"  496","line":"    /// assert_eq!(dt.second(), 56);"},
{"lineNum":"  497","line":"    /// assert_eq!(dt.nanosecond(), 789_012_000);"},
{"lineNum":"  498","line":"    /// ~~~~"},
{"lineNum":"  499","line":"    #[inline]"},
{"lineNum":"  500","line":"    pub fn and_hms_micro(&self, hour: u32, min: u32, sec: u32, micro: u32) -> NaiveDateTime {"},
{"lineNum":"  501","line":"        self.and_hms_micro_opt(hour, min, sec, micro).expect(\"invalid time\")"},
{"lineNum":"  502","line":"    }"},
{"lineNum":"  503","line":""},
{"lineNum":"  504","line":"    /// Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond."},
{"lineNum":"  505","line":"    ///"},
{"lineNum":"  506","line":"    /// The microsecond part can exceed 1,000,000"},
{"lineNum":"  507","line":"    /// in order to represent the [leap second](../time/struct.NaiveTime.html#leap-second-what?)."},
{"lineNum":"  508","line":"    ///"},
{"lineNum":"  509","line":"    /// Returns `None` on invalid hour, minute, second and/or microsecond."},
{"lineNum":"  510","line":"    ///"},
{"lineNum":"  511","line":"    /// # Example"},
{"lineNum":"  512","line":"    ///"},
{"lineNum":"  513","line":"    /// ~~~~"},
{"lineNum":"  514","line":"    /// use chrono::NaiveDate;"},
{"lineNum":"  515","line":"    ///"},
{"lineNum":"  516","line":"    /// let d = NaiveDate::from_ymd(2015, 6, 3);"},
{"lineNum":"  517","line":"    /// assert!(d.and_hms_micro_opt(12, 34, 56,   789_012).is_some());"},
{"lineNum":"  518","line":"    /// assert!(d.and_hms_micro_opt(12, 34, 59, 1_789_012).is_some()); // leap second"},
{"lineNum":"  519","line":"    /// assert!(d.and_hms_micro_opt(12, 34, 59, 2_789_012).is_none());"},
{"lineNum":"  520","line":"    /// assert!(d.and_hms_micro_opt(12, 34, 60,   789_012).is_none());"},
{"lineNum":"  521","line":"    /// assert!(d.and_hms_micro_opt(12, 60, 56,   789_012).is_none());"},
{"lineNum":"  522","line":"    /// assert!(d.and_hms_micro_opt(24, 34, 56,   789_012).is_none());"},
{"lineNum":"  523","line":"    /// ~~~~"},
{"lineNum":"  524","line":"    #[inline]"},
{"lineNum":"  525","line":"    pub fn and_hms_micro_opt(&self, hour: u32, min: u32, sec: u32,"},
{"lineNum":"  526","line":"                             micro: u32) -> Option<NaiveDateTime> {"},
{"lineNum":"  527","line":"        NaiveTime::from_hms_micro_opt(hour, min, sec, micro).map(|time| self.and_time(time))"},
{"lineNum":"  528","line":"    }"},
{"lineNum":"  529","line":""},
{"lineNum":"  530","line":"    /// Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond."},
{"lineNum":"  531","line":"    ///"},
{"lineNum":"  532","line":"    /// The nanosecond part can exceed 1,000,000,000"},
{"lineNum":"  533","line":"    /// in order to represent the [leap second](../time/struct.NaiveTime.html#leap-second-what?)."},
{"lineNum":"  534","line":"    ///"},
{"lineNum":"  535","line":"    /// Panics on invalid hour, minute, second and/or nanosecond."},
{"lineNum":"  536","line":"    ///"},
{"lineNum":"  537","line":"    /// # Example"},
{"lineNum":"  538","line":"    ///"},
{"lineNum":"  539","line":"    /// ~~~~"},
{"lineNum":"  540","line":"    /// use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};"},
{"lineNum":"  541","line":"    ///"},
{"lineNum":"  542","line":"    /// let d = NaiveDate::from_ymd(2015, 6, 3);"},
{"lineNum":"  543","line":"    ///"},
{"lineNum":"  544","line":"    /// let dt: NaiveDateTime = d.and_hms_nano(12, 34, 56, 789_012_345);"},
{"lineNum":"  545","line":"    /// assert_eq!(dt.year(), 2015);"},
{"lineNum":"  546","line":"    /// assert_eq!(dt.weekday(), Weekday::Wed);"},
{"lineNum":"  547","line":"    /// assert_eq!(dt.second(), 56);"},
{"lineNum":"  548","line":"    /// assert_eq!(dt.nanosecond(), 789_012_345);"},
{"lineNum":"  549","line":"    /// ~~~~"},
{"lineNum":"  550","line":"    #[inline]"},
{"lineNum":"  551","line":"    pub fn and_hms_nano(&self, hour: u32, min: u32, sec: u32, nano: u32) -> NaiveDateTime {"},
{"lineNum":"  552","line":"        self.and_hms_nano_opt(hour, min, sec, nano).expect(\"invalid time\")"},
{"lineNum":"  553","line":"    }"},
{"lineNum":"  554","line":""},
{"lineNum":"  555","line":"    /// Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond."},
{"lineNum":"  556","line":"    ///"},
{"lineNum":"  557","line":"    /// The nanosecond part can exceed 1,000,000,000"},
{"lineNum":"  558","line":"    /// in order to represent the [leap second](../time/struct.NaiveTime.html#leap-second-what?)."},
{"lineNum":"  559","line":"    ///"},
{"lineNum":"  560","line":"    /// Returns `None` on invalid hour, minute, second and/or nanosecond."},
{"lineNum":"  561","line":"    ///"},
{"lineNum":"  562","line":"    /// # Example"},
{"lineNum":"  563","line":"    ///"},
{"lineNum":"  564","line":"    /// ~~~~"},
{"lineNum":"  565","line":"    /// use chrono::NaiveDate;"},
{"lineNum":"  566","line":"    ///"},
{"lineNum":"  567","line":"    /// let d = NaiveDate::from_ymd(2015, 6, 3);"},
{"lineNum":"  568","line":"    /// assert!(d.and_hms_nano_opt(12, 34, 56,   789_012_345).is_some());"},
{"lineNum":"  569","line":"    /// assert!(d.and_hms_nano_opt(12, 34, 59, 1_789_012_345).is_some()); // leap second"},
{"lineNum":"  570","line":"    /// assert!(d.and_hms_nano_opt(12, 34, 59, 2_789_012_345).is_none());"},
{"lineNum":"  571","line":"    /// assert!(d.and_hms_nano_opt(12, 34, 60,   789_012_345).is_none());"},
{"lineNum":"  572","line":"    /// assert!(d.and_hms_nano_opt(12, 60, 56,   789_012_345).is_none());"},
{"lineNum":"  573","line":"    /// assert!(d.and_hms_nano_opt(24, 34, 56,   789_012_345).is_none());"},
{"lineNum":"  574","line":"    /// ~~~~"},
{"lineNum":"  575","line":"    #[inline]"},
{"lineNum":"  576","line":"    pub fn and_hms_nano_opt(&self, hour: u32, min: u32, sec: u32,"},
{"lineNum":"  577","line":"                            nano: u32) -> Option<NaiveDateTime> {"},
{"lineNum":"  578","line":"        NaiveTime::from_hms_nano_opt(hour, min, sec, nano).map(|time| self.and_time(time))"},
{"lineNum":"  579","line":"    }"},
{"lineNum":"  580","line":""},
{"lineNum":"  581","line":"    /// Returns the packed month-day-flags."},
{"lineNum":"  582","line":"    #[inline]"},
{"lineNum":"  583","line":"    fn mdf(&self) -> Mdf {"},
{"lineNum":"  584","line":"        self.of().to_mdf()"},
{"lineNum":"  585","line":"    }"},
{"lineNum":"  586","line":""},
{"lineNum":"  587","line":"    /// Returns the packed ordinal-flags."},
{"lineNum":"  588","line":"    #[inline]"},
{"lineNum":"  589","line":"    fn of(&self) -> Of {"},
{"lineNum":"  590","line":"        Of((self.ymdf & 0b1111_11111_1111) as u32)"},
{"lineNum":"  591","line":"    }"},
{"lineNum":"  592","line":""},
{"lineNum":"  593","line":"    /// Makes a new `NaiveDate` with the packed month-day-flags changed."},
{"lineNum":"  594","line":"    ///"},
{"lineNum":"  595","line":"    /// Returns `None` when the resulting `NaiveDate` would be invalid."},
{"lineNum":"  596","line":"    #[inline]"},
{"lineNum":"  597","line":"    fn with_mdf(&self, mdf: Mdf) -> Option<NaiveDate> {"},
{"lineNum":"  598","line":"        self.with_of(mdf.to_of())"},
{"lineNum":"  599","line":"    }"},
{"lineNum":"  600","line":""},
{"lineNum":"  601","line":"    /// Makes a new `NaiveDate` with the packed ordinal-flags changed."},
{"lineNum":"  602","line":"    ///"},
{"lineNum":"  603","line":"    /// Returns `None` when the resulting `NaiveDate` would be invalid."},
{"lineNum":"  604","line":"    #[inline]"},
{"lineNum":"  605","line":"    fn with_of(&self, of: Of) -> Option<NaiveDate> {"},
{"lineNum":"  606","line":"        if of.valid() {"},
{"lineNum":"  607","line":"            let Of(of) = of;"},
{"lineNum":"  608","line":"            Some(NaiveDate { ymdf: (self.ymdf & !0b111111111_1111) | of as DateImpl })"},
{"lineNum":"  609","line":"        } else {"},
{"lineNum":"  610","line":"            None"},
{"lineNum":"  611","line":"        }"},
{"lineNum":"  612","line":"    }"},
{"lineNum":"  613","line":""},
{"lineNum":"  614","line":"    /// Makes a new `NaiveDate` for the next date."},
{"lineNum":"  615","line":"    ///"},
{"lineNum":"  616","line":"    /// Panics when `self` is the last representable date."},
{"lineNum":"  617","line":"    ///"},
{"lineNum":"  618","line":"    /// # Example"},
{"lineNum":"  619","line":"    ///"},
{"lineNum":"  620","line":"    /// ~~~~"},
{"lineNum":"  621","line":"    /// use chrono::NaiveDate;"},
{"lineNum":"  622","line":"    ///"},
{"lineNum":"  623","line":"    /// assert_eq!(NaiveDate::from_ymd(2015,  6,  3).succ(), NaiveDate::from_ymd(2015, 6, 4));"},
{"lineNum":"  624","line":"    /// assert_eq!(NaiveDate::from_ymd(2015,  6, 30).succ(), NaiveDate::from_ymd(2015, 7, 1));"},
{"lineNum":"  625","line":"    /// assert_eq!(NaiveDate::from_ymd(2015, 12, 31).succ(), NaiveDate::from_ymd(2016, 1, 1));"},
{"lineNum":"  626","line":"    /// ~~~~"},
{"lineNum":"  627","line":"    #[inline]"},
{"lineNum":"  628","line":"    pub fn succ(&self) -> NaiveDate {"},
{"lineNum":"  629","line":"        self.succ_opt().expect(\"out of bound\")"},
{"lineNum":"  630","line":"    }"},
{"lineNum":"  631","line":""},
{"lineNum":"  632","line":"    /// Makes a new `NaiveDate` for the next date."},
{"lineNum":"  633","line":"    ///"},
{"lineNum":"  634","line":"    /// Returns `None` when `self` is the last representable date."},
{"lineNum":"  635","line":"    ///"},
{"lineNum":"  636","line":"    /// # Example"},
{"lineNum":"  637","line":"    ///"},
{"lineNum":"  638","line":"    /// ~~~~"},
{"lineNum":"  639","line":"    /// use chrono::NaiveDate;"},
{"lineNum":"  640","line":"    /// use chrono::naive::date::MAX;"},
{"lineNum":"  641","line":"    ///"},
{"lineNum":"  642","line":"    /// assert_eq!(NaiveDate::from_ymd(2015, 6, 3).succ_opt(),"},
{"lineNum":"  643","line":"    ///            Some(NaiveDate::from_ymd(2015, 6, 4)));"},
{"lineNum":"  644","line":"    /// assert_eq!(MAX.succ_opt(), None);"},
{"lineNum":"  645","line":"    /// ~~~~"},
{"lineNum":"  646","line":"    #[inline]"},
{"lineNum":"  647","line":"    pub fn succ_opt(&self) -> Option<NaiveDate> {"},
{"lineNum":"  648","line":"        self.with_of(self.of().succ()).or_else(|| NaiveDate::from_ymd_opt(self.year() + 1, 1, 1))"},
{"lineNum":"  649","line":"    }"},
{"lineNum":"  650","line":""},
{"lineNum":"  651","line":"    /// Makes a new `NaiveDate` for the prior date."},
{"lineNum":"  652","line":"    ///"},
{"lineNum":"  653","line":"    /// Panics when `self` is the first representable date."},
{"lineNum":"  654","line":"    ///"},
{"lineNum":"  655","line":"    /// # Example"},
{"lineNum":"  656","line":"    ///"},
{"lineNum":"  657","line":"    /// ~~~~"},
{"lineNum":"  658","line":"    /// use chrono::NaiveDate;"},
{"lineNum":"  659","line":"    ///"},
{"lineNum":"  660","line":"    /// assert_eq!(NaiveDate::from_ymd(2015, 6, 3).pred(), NaiveDate::from_ymd(2015,  6,  2));"},
{"lineNum":"  661","line":"    /// assert_eq!(NaiveDate::from_ymd(2015, 6, 1).pred(), NaiveDate::from_ymd(2015,  5, 31));"},
{"lineNum":"  662","line":"    /// assert_eq!(NaiveDate::from_ymd(2015, 1, 1).pred(), NaiveDate::from_ymd(2014, 12, 31));"},
{"lineNum":"  663","line":"    /// ~~~~"},
{"lineNum":"  664","line":"    #[inline]"},
{"lineNum":"  665","line":"    pub fn pred(&self) -> NaiveDate {"},
{"lineNum":"  666","line":"        self.pred_opt().expect(\"out of bound\")"},
{"lineNum":"  667","line":"    }"},
{"lineNum":"  668","line":""},
{"lineNum":"  669","line":"    /// Makes a new `NaiveDate` for the prior date."},
{"lineNum":"  670","line":"    ///"},
{"lineNum":"  671","line":"    /// Returns `None` when `self` is the first representable date."},
{"lineNum":"  672","line":"    ///"},
{"lineNum":"  673","line":"    /// # Example"},
{"lineNum":"  674","line":"    ///"},
{"lineNum":"  675","line":"    /// ~~~~"},
{"lineNum":"  676","line":"    /// use chrono::NaiveDate;"},
{"lineNum":"  677","line":"    /// use chrono::naive::date::MIN;"},
{"lineNum":"  678","line":"    ///"},
{"lineNum":"  679","line":"    /// assert_eq!(NaiveDate::from_ymd(2015, 6, 3).pred_opt(),"},
{"lineNum":"  680","line":"    ///            Some(NaiveDate::from_ymd(2015, 6, 2)));"},
{"lineNum":"  681","line":"    /// assert_eq!(MIN.pred_opt(), None);"},
{"lineNum":"  682","line":"    /// ~~~~"},
{"lineNum":"  683","line":"    #[inline]"},
{"lineNum":"  684","line":"    pub fn pred_opt(&self) -> Option<NaiveDate> {"},
{"lineNum":"  685","line":"        self.with_of(self.of().pred()).or_else(|| NaiveDate::from_ymd_opt(self.year() - 1, 12, 31))"},
{"lineNum":"  686","line":"    }"},
{"lineNum":"  687","line":""},
{"lineNum":"  688","line":"    /// Adds the `days` part of given `Duration` to the current date."},
{"lineNum":"  689","line":"    ///"},
{"lineNum":"  690","line":"    /// Returns `None` when it will result in overflow."},
{"lineNum":"  691","line":"    ///"},
{"lineNum":"  692","line":"    /// # Example"},
{"lineNum":"  693","line":"    ///"},
{"lineNum":"  694","line":"    /// ~~~~"},
{"lineNum":"  695","line":"    /// use chrono::{NaiveDate, Duration};"},
{"lineNum":"  696","line":"    /// use chrono::naive::date::MAX;"},
{"lineNum":"  697","line":"    ///"},
{"lineNum":"  698","line":"    /// let d = NaiveDate::from_ymd(2015, 9, 5);"},
{"lineNum":"  699","line":"    /// assert_eq!(d.checked_add(Duration::days(40)), Some(NaiveDate::from_ymd(2015, 10, 15)));"},
{"lineNum":"  700","line":"    /// assert_eq!(d.checked_add(Duration::days(-40)), Some(NaiveDate::from_ymd(2015, 7, 27)));"},
{"lineNum":"  701","line":"    /// assert_eq!(d.checked_add(Duration::days(1000_000_000)), None);"},
{"lineNum":"  702","line":"    /// assert_eq!(d.checked_add(Duration::days(-1000_000_000)), None);"},
{"lineNum":"  703","line":"    /// assert_eq!(MAX.checked_add(Duration::days(1)), None);"},
{"lineNum":"  704","line":"    /// ~~~~"},
{"lineNum":"  705","line":"    pub fn checked_add(self, rhs: Duration) -> Option<NaiveDate> {"},
{"lineNum":"  706","line":"        let year = self.year();"},
{"lineNum":"  707","line":"        let (mut year_div_400, year_mod_400) = div_mod_floor(year, 400);"},
{"lineNum":"  708","line":"        let cycle = internals::yo_to_cycle(year_mod_400 as u32, self.of().ordinal());"},
{"lineNum":"  709","line":"        let cycle = try_opt!((cycle as i32).checked_add(try_opt!(rhs.num_days().to_i32())));"},
{"lineNum":"  710","line":"        let (cycle_div_400y, cycle) = div_mod_floor(cycle, 146097);"},
{"lineNum":"  711","line":"        year_div_400 += cycle_div_400y;"},
{"lineNum":"  712","line":""},
{"lineNum":"  713","line":"        let (year_mod_400, ordinal) = internals::cycle_to_yo(cycle as u32);"},
{"lineNum":"  714","line":"        let flags = YearFlags::from_year_mod_400(year_mod_400 as i32);"},
{"lineNum":"  715","line":"        NaiveDate::from_of(year_div_400 * 400 + year_mod_400 as i32,"},
{"lineNum":"  716","line":"                           Of::new(ordinal, flags))"},
{"lineNum":"  717","line":"    }"},
{"lineNum":"  718","line":""},
{"lineNum":"  719","line":"    /// Subtracts the `days` part of given `Duration` from the current date."},
{"lineNum":"  720","line":"    ///"},
{"lineNum":"  721","line":"    /// Returns `None` when it will result in overflow."},
{"lineNum":"  722","line":"    ///"},
{"lineNum":"  723","line":"    /// # Example"},
{"lineNum":"  724","line":"    ///"},
{"lineNum":"  725","line":"    /// ~~~~"},
{"lineNum":"  726","line":"    /// use chrono::{NaiveDate, Duration};"},
{"lineNum":"  727","line":"    /// use chrono::naive::date::MIN;"},
{"lineNum":"  728","line":"    ///"},
{"lineNum":"  729","line":"    /// let d = NaiveDate::from_ymd(2015, 9, 5);"},
{"lineNum":"  730","line":"    /// assert_eq!(d.checked_sub(Duration::days(40)), Some(NaiveDate::from_ymd(2015, 7, 27)));"},
{"lineNum":"  731","line":"    /// assert_eq!(d.checked_sub(Duration::days(-40)), Some(NaiveDate::from_ymd(2015, 10, 15)));"},
{"lineNum":"  732","line":"    /// assert_eq!(d.checked_sub(Duration::days(1000_000_000)), None);"},
{"lineNum":"  733","line":"    /// assert_eq!(d.checked_sub(Duration::days(-1000_000_000)), None);"},
{"lineNum":"  734","line":"    /// assert_eq!(MIN.checked_sub(Duration::days(1)), None);"},
{"lineNum":"  735","line":"    /// ~~~~"},
{"lineNum":"  736","line":"    pub fn checked_sub(self, rhs: Duration) -> Option<NaiveDate> {"},
{"lineNum":"  737","line":"        let year = self.year();"},
{"lineNum":"  738","line":"        let (mut year_div_400, year_mod_400) = div_mod_floor(year, 400);"},
{"lineNum":"  739","line":"        let cycle = internals::yo_to_cycle(year_mod_400 as u32, self.of().ordinal());"},
{"lineNum":"  740","line":"        let cycle = try_opt!((cycle as i32).checked_sub(try_opt!(rhs.num_days().to_i32())));"},
{"lineNum":"  741","line":"        let (cycle_div_400y, cycle) = div_mod_floor(cycle, 146097);"},
{"lineNum":"  742","line":"        year_div_400 += cycle_div_400y;"},
{"lineNum":"  743","line":""},
{"lineNum":"  744","line":"        let (year_mod_400, ordinal) = internals::cycle_to_yo(cycle as u32);"},
{"lineNum":"  745","line":"        let flags = YearFlags::from_year_mod_400(year_mod_400 as i32);"},
{"lineNum":"  746","line":"        NaiveDate::from_of(year_div_400 * 400 + year_mod_400 as i32,"},
{"lineNum":"  747","line":"                           Of::new(ordinal, flags))"},
{"lineNum":"  748","line":"    }"},
{"lineNum":"  749","line":""},
{"lineNum":"  750","line":"    /// Formats the date with the specified formatting items."},
{"lineNum":"  751","line":"    /// Otherwise it is same to the ordinary `format` method."},
{"lineNum":"  752","line":"    ///"},
{"lineNum":"  753","line":"    /// The `Iterator` of items should be `Clone`able,"},
{"lineNum":"  754","line":"    /// since the resulting `DelayedFormat` value may be formatted multiple times."},
{"lineNum":"  755","line":"    ///"},
{"lineNum":"  756","line":"    /// # Example"},
{"lineNum":"  757","line":"    ///"},
{"lineNum":"  758","line":"    /// ~~~~"},
{"lineNum":"  759","line":"    /// use chrono::NaiveDate;"},
{"lineNum":"  760","line":"    /// use chrono::format::strftime::StrftimeItems;"},
{"lineNum":"  761","line":"    ///"},
{"lineNum":"  762","line":"    /// let fmt = StrftimeItems::new(\"%Y-%m-%d\");"},
{"lineNum":"  763","line":"    /// let d = NaiveDate::from_ymd(2015, 9, 5);"},
{"lineNum":"  764","line":"    /// assert_eq!(d.format_with_items(fmt.clone()).to_string(), \"2015-09-05\");"},
{"lineNum":"  765","line":"    /// assert_eq!(d.format(\"%Y-%m-%d\").to_string(), \"2015-09-05\");"},
{"lineNum":"  766","line":"    /// ~~~~"},
{"lineNum":"  767","line":"    #[inline]"},
{"lineNum":"  768","line":"    pub fn format_with_items<\'a, I>(&self, items: I) -> DelayedFormat<I>"},
{"lineNum":"  769","line":"            where I: Iterator<Item=Item<\'a>> + Clone {"},
{"lineNum":"  770","line":"        DelayedFormat::new(Some(self.clone()), None, items)"},
{"lineNum":"  771","line":"    }"},
{"lineNum":"  772","line":""},
{"lineNum":"  773","line":"    /// Formats the date with the specified format string."},
{"lineNum":"  774","line":"    /// See the [`format::strftime` module](../../format/strftime/index.html)"},
{"lineNum":"  775","line":"    /// on the supported escape sequences."},
{"lineNum":"  776","line":"    ///"},
{"lineNum":"  777","line":"    /// This returns a `DelayedFormat`,"},
{"lineNum":"  778","line":"    /// which gets converted to a string only when actual formatting happens."},
{"lineNum":"  779","line":"    /// You may use the `to_string` method to get a `String`,"},
{"lineNum":"  780","line":"    /// or just feed it into `print!` and other formatting macros."},
{"lineNum":"  781","line":"    /// (In this way it avoids the redundant memory allocation.)"},
{"lineNum":"  782","line":"    ///"},
{"lineNum":"  783","line":"    /// A wrong format string does *not* issue an error immediately."},
{"lineNum":"  784","line":"    /// Rather, converting or formatting the `DelayedFormat` fails."},
{"lineNum":"  785","line":"    /// You are recommended to immediately use `DelayedFormat` for this reason."},
{"lineNum":"  786","line":"    ///"},
{"lineNum":"  787","line":"    /// # Example"},
{"lineNum":"  788","line":"    ///"},
{"lineNum":"  789","line":"    /// ~~~~"},
{"lineNum":"  790","line":"    /// use chrono::NaiveDate;"},
{"lineNum":"  791","line":"    ///"},
{"lineNum":"  792","line":"    /// let d = NaiveDate::from_ymd(2015, 9, 5);"},
{"lineNum":"  793","line":"    /// assert_eq!(d.format(\"%Y-%m-%d\").to_string(), \"2015-09-05\");"},
{"lineNum":"  794","line":"    /// assert_eq!(d.format(\"%A, %-d %B, %C%y\").to_string(), \"Saturday, 5 September, 2015\");"},
{"lineNum":"  795","line":"    /// ~~~~"},
{"lineNum":"  796","line":"    #[inline]"},
{"lineNum":"  797","line":"    pub fn format<\'a>(&self, fmt: &\'a str) -> DelayedFormat<StrftimeItems<\'a>> {"},
{"lineNum":"  798","line":"        self.format_with_items(StrftimeItems::new(fmt))"},
{"lineNum":"  799","line":"    }"},
{"lineNum":"  800","line":"}"},
{"lineNum":"  801","line":""},
{"lineNum":"  802","line":"impl Datelike for NaiveDate {"},
{"lineNum":"  803","line":"    #[inline] fn year(&self) -> i32 { self.ymdf >> 13 }"},
{"lineNum":"  804","line":"    #[inline] fn month(&self) -> u32 { self.mdf().month() }"},
{"lineNum":"  805","line":"    #[inline] fn month0(&self) -> u32 { self.mdf().month() - 1 }"},
{"lineNum":"  806","line":"    #[inline] fn day(&self) -> u32 { self.mdf().day() }"},
{"lineNum":"  807","line":"    #[inline] fn day0(&self) -> u32 { self.mdf().day() - 1 }"},
{"lineNum":"  808","line":"    #[inline] fn ordinal(&self) -> u32 { self.of().ordinal() }"},
{"lineNum":"  809","line":"    #[inline] fn ordinal0(&self) -> u32 { self.of().ordinal() - 1 }"},
{"lineNum":"  810","line":"    #[inline] fn weekday(&self) -> Weekday { self.of().weekday() }"},
{"lineNum":"  811","line":""},
{"lineNum":"  812","line":"    fn isoweekdate(&self) -> (i32, u32, Weekday) {"},
{"lineNum":"  813","line":"        let of = self.of();"},
{"lineNum":"  814","line":"        let year = self.year();"},
{"lineNum":"  815","line":"        let (rawweek, weekday) = of.isoweekdate_raw();"},
{"lineNum":"  816","line":"        if rawweek < 1 { // previous year"},
{"lineNum":"  817","line":"            let prevlastweek = YearFlags::from_year(year - 1).nisoweeks();"},
{"lineNum":"  818","line":"            (year - 1, prevlastweek, weekday)"},
{"lineNum":"  819","line":"        } else {"},
{"lineNum":"  820","line":"            let lastweek = of.flags().nisoweeks();"},
{"lineNum":"  821","line":"            if rawweek > lastweek { // next year"},
{"lineNum":"  822","line":"                (year + 1, 1, weekday)"},
{"lineNum":"  823","line":"            } else {"},
{"lineNum":"  824","line":"                (year, rawweek, weekday)"},
{"lineNum":"  825","line":"            }"},
{"lineNum":"  826","line":"        }"},
{"lineNum":"  827","line":"    }"},
{"lineNum":"  828","line":""},
{"lineNum":"  829","line":"    #[inline]"},
{"lineNum":"  830","line":"    fn with_year(&self, year: i32) -> Option<NaiveDate> {"},
{"lineNum":"  831","line":"        // we need to operate with `mdf` since we should keep the month and day number as is"},
{"lineNum":"  832","line":"        let mdf = self.mdf();"},
{"lineNum":"  833","line":""},
{"lineNum":"  834","line":"        // adjust the flags as needed"},
{"lineNum":"  835","line":"        let flags = YearFlags::from_year(year);"},
{"lineNum":"  836","line":"        let mdf = mdf.with_flags(flags);"},
{"lineNum":"  837","line":""},
{"lineNum":"  838","line":"        NaiveDate::from_mdf(year, mdf)"},
{"lineNum":"  839","line":"    }"},
{"lineNum":"  840","line":""},
{"lineNum":"  841","line":"    #[inline]"},
{"lineNum":"  842","line":"    fn with_month(&self, month: u32) -> Option<NaiveDate> {"},
{"lineNum":"  843","line":"        self.with_mdf(self.mdf().with_month(month))"},
{"lineNum":"  844","line":"    }"},
{"lineNum":"  845","line":""},
{"lineNum":"  846","line":"    #[inline]"},
{"lineNum":"  847","line":"    fn with_month0(&self, month0: u32) -> Option<NaiveDate> {"},
{"lineNum":"  848","line":"        self.with_mdf(self.mdf().with_month(month0 + 1))"},
{"lineNum":"  849","line":"    }"},
{"lineNum":"  850","line":""},
{"lineNum":"  851","line":"    #[inline]"},
{"lineNum":"  852","line":"    fn with_day(&self, day: u32) -> Option<NaiveDate> {"},
{"lineNum":"  853","line":"        self.with_mdf(self.mdf().with_day(day))"},
{"lineNum":"  854","line":"    }"},
{"lineNum":"  855","line":""},
{"lineNum":"  856","line":"    #[inline]"},
{"lineNum":"  857","line":"    fn with_day0(&self, day0: u32) -> Option<NaiveDate> {"},
{"lineNum":"  858","line":"        self.with_mdf(self.mdf().with_day(day0 + 1))"},
{"lineNum":"  859","line":"    }"},
{"lineNum":"  860","line":""},
{"lineNum":"  861","line":"    #[inline]"},
{"lineNum":"  862","line":"    fn with_ordinal(&self, ordinal: u32) -> Option<NaiveDate> {"},
{"lineNum":"  863","line":"        self.with_of(self.of().with_ordinal(ordinal))"},
{"lineNum":"  864","line":"    }"},
{"lineNum":"  865","line":""},
{"lineNum":"  866","line":"    #[inline]"},
{"lineNum":"  867","line":"    fn with_ordinal0(&self, ordinal0: u32) -> Option<NaiveDate> {"},
{"lineNum":"  868","line":"        self.with_of(self.of().with_ordinal(ordinal0 + 1))"},
{"lineNum":"  869","line":"    }"},
{"lineNum":"  870","line":"}"},
{"lineNum":"  871","line":""},
{"lineNum":"  872","line":"impl hash::Hash for NaiveDate {"},
{"lineNum":"  873","line":"    fn hash<H: hash::Hasher>(&self, state: &mut H) { self.ymdf.hash(state) }"},
{"lineNum":"  874","line":"}"},
{"lineNum":"  875","line":""},
{"lineNum":"  876","line":"/// An addition of `Duration` to `NaiveDate` discards the fractional days,"},
{"lineNum":"  877","line":"/// rounding to the closest integral number of days towards `Duration::zero()`."},
{"lineNum":"  878","line":"///"},
{"lineNum":"  879","line":"/// Panics on underflow or overflow."},
{"lineNum":"  880","line":"/// Use `NaiveDate::checked_add` for detecting that."},
{"lineNum":"  881","line":"///"},
{"lineNum":"  882","line":"/// # Example"},
{"lineNum":"  883","line":"///"},
{"lineNum":"  884","line":"/// ~~~~"},
{"lineNum":"  885","line":"/// use chrono::{NaiveDate, Duration};"},
{"lineNum":"  886","line":"///"},
{"lineNum":"  887","line":"/// let ymd = |y,m,d| NaiveDate::from_ymd(y, m, d);"},
{"lineNum":"  888","line":"/// assert_eq!(ymd(2014, 1, 1) + Duration::zero(),             ymd(2014, 1, 1));"},
{"lineNum":"  889","line":"/// assert_eq!(ymd(2014, 1, 1) + Duration::seconds(86399),     ymd(2014, 1, 1));"},
{"lineNum":"  890","line":"/// assert_eq!(ymd(2014, 1, 1) + Duration::seconds(-86399),    ymd(2014, 1, 1));"},
{"lineNum":"  891","line":"/// assert_eq!(ymd(2014, 1, 1) + Duration::days(1),            ymd(2014, 1, 2));"},
{"lineNum":"  892","line":"/// assert_eq!(ymd(2014, 1, 1) + Duration::days(-1),           ymd(2013, 12, 31));"},
{"lineNum":"  893","line":"/// assert_eq!(ymd(2014, 1, 1) + Duration::days(364),          ymd(2014, 12, 31));"},
{"lineNum":"  894","line":"/// assert_eq!(ymd(2014, 1, 1) + Duration::days(365*4 + 1),    ymd(2018, 1, 1));"},
{"lineNum":"  895","line":"/// assert_eq!(ymd(2014, 1, 1) + Duration::days(365*400 + 97), ymd(2414, 1, 1));"},
{"lineNum":"  896","line":"/// ~~~~"},
{"lineNum":"  897","line":"impl Add<Duration> for NaiveDate {"},
{"lineNum":"  898","line":"    type Output = NaiveDate;"},
{"lineNum":"  899","line":""},
{"lineNum":"  900","line":"    #[inline]"},
{"lineNum":"  901","line":"    fn add(self, rhs: Duration) -> NaiveDate {"},
{"lineNum":"  902","line":"        self.checked_add(rhs).expect(\"`NaiveDate + Duration` overflowed\")"},
{"lineNum":"  903","line":"    }"},
{"lineNum":"  904","line":"}"},
{"lineNum":"  905","line":""},
{"lineNum":"  906","line":"/// A subtraction of `NaiveDate` from `NaiveDate` yields a `Duration` of integral numbers,"},
{"lineNum":"  907","line":"/// and does not overflow or underflow at all."},
{"lineNum":"  908","line":"///"},
{"lineNum":"  909","line":"/// # Example"},
{"lineNum":"  910","line":"///"},
{"lineNum":"  911","line":"/// ~~~~"},
{"lineNum":"  912","line":"/// use chrono::{NaiveDate, Duration};"},
{"lineNum":"  913","line":"///"},
{"lineNum":"  914","line":"/// let ymd = |y,m,d| NaiveDate::from_ymd(y, m, d);"},
{"lineNum":"  915","line":"/// assert_eq!(ymd(2014, 1, 1) - ymd(2014, 1, 1),   Duration::zero());"},
{"lineNum":"  916","line":"/// assert_eq!(ymd(2014, 1, 1) - ymd(2013, 12, 31), Duration::days(1));"},
{"lineNum":"  917","line":"/// assert_eq!(ymd(2014, 1, 1) - ymd(2014, 1, 2),   Duration::days(-1));"},
{"lineNum":"  918","line":"/// assert_eq!(ymd(2014, 1, 1) - ymd(2013, 9, 23),  Duration::days(100));"},
{"lineNum":"  919","line":"/// assert_eq!(ymd(2014, 1, 1) - ymd(2013, 1, 1),   Duration::days(365));"},
{"lineNum":"  920","line":"/// assert_eq!(ymd(2014, 1, 1) - ymd(2010, 1, 1),   Duration::days(365*4 + 1));"},
{"lineNum":"  921","line":"/// assert_eq!(ymd(2014, 1, 1) - ymd(1614, 1, 1),   Duration::days(365*400 + 97));"},
{"lineNum":"  922","line":"/// ~~~~"},
{"lineNum":"  923","line":"impl Sub<NaiveDate> for NaiveDate {"},
{"lineNum":"  924","line":"    type Output = Duration;"},
{"lineNum":"  925","line":""},
{"lineNum":"  926","line":"    fn sub(self, rhs: NaiveDate) -> Duration {"},
{"lineNum":"  927","line":"        let year1 = self.year();"},
{"lineNum":"  928","line":"        let year2 = rhs.year();"},
{"lineNum":"  929","line":"        let (year1_div_400, year1_mod_400) = div_mod_floor(year1, 400);"},
{"lineNum":"  930","line":"        let (year2_div_400, year2_mod_400) = div_mod_floor(year2, 400);"},
{"lineNum":"  931","line":"        let cycle1 = internals::yo_to_cycle(year1_mod_400 as u32, self.of().ordinal()) as i64;"},
{"lineNum":"  932","line":"        let cycle2 = internals::yo_to_cycle(year2_mod_400 as u32, rhs.of().ordinal()) as i64;"},
{"lineNum":"  933","line":"        Duration::days((year1_div_400 as i64 - year2_div_400 as i64) * 146097 + (cycle1 - cycle2))"},
{"lineNum":"  934","line":"    }"},
{"lineNum":"  935","line":"}"},
{"lineNum":"  936","line":""},
{"lineNum":"  937","line":"/// A subtraction of `Duration` from `NaiveDate` discards the fractional days,"},
{"lineNum":"  938","line":"/// rounding to the closest integral number of days towards `Duration::zero()`."},
{"lineNum":"  939","line":"///"},
{"lineNum":"  940","line":"/// Panics on underflow or overflow."},
{"lineNum":"  941","line":"/// Use `NaiveDate::checked_sub` for detecting that."},
{"lineNum":"  942","line":"///"},
{"lineNum":"  943","line":"/// # Example"},
{"lineNum":"  944","line":"///"},
{"lineNum":"  945","line":"/// ~~~~"},
{"lineNum":"  946","line":"/// use chrono::{NaiveDate, Duration};"},
{"lineNum":"  947","line":"///"},
{"lineNum":"  948","line":"/// let ymd = |y,m,d| NaiveDate::from_ymd(y, m, d);"},
{"lineNum":"  949","line":"/// assert_eq!(ymd(2014, 1, 1) - Duration::zero(),             ymd(2014, 1, 1));"},
{"lineNum":"  950","line":"/// assert_eq!(ymd(2014, 1, 1) - Duration::seconds(86399),     ymd(2014, 1, 1));"},
{"lineNum":"  951","line":"/// assert_eq!(ymd(2014, 1, 1) - Duration::seconds(-86399),    ymd(2014, 1, 1));"},
{"lineNum":"  952","line":"/// assert_eq!(ymd(2014, 1, 1) - Duration::days(1),            ymd(2013, 12, 31));"},
{"lineNum":"  953","line":"/// assert_eq!(ymd(2014, 1, 1) - Duration::days(-1),           ymd(2014, 1, 2));"},
{"lineNum":"  954","line":"/// assert_eq!(ymd(2014, 1, 1) - Duration::days(364),          ymd(2013, 1, 2));"},
{"lineNum":"  955","line":"/// assert_eq!(ymd(2014, 1, 1) - Duration::days(365*4 + 1),    ymd(2010, 1, 1));"},
{"lineNum":"  956","line":"/// assert_eq!(ymd(2014, 1, 1) - Duration::days(365*400 + 97), ymd(1614, 1, 1));"},
{"lineNum":"  957","line":"/// ~~~~"},
{"lineNum":"  958","line":"impl Sub<Duration> for NaiveDate {"},
{"lineNum":"  959","line":"    type Output = NaiveDate;"},
{"lineNum":"  960","line":""},
{"lineNum":"  961","line":"    #[inline]"},
{"lineNum":"  962","line":"    fn sub(self, rhs: Duration) -> NaiveDate {"},
{"lineNum":"  963","line":"        self.checked_sub(rhs).expect(\"`NaiveDate - Duration` overflowed\")"},
{"lineNum":"  964","line":"    }"},
{"lineNum":"  965","line":"}"},
{"lineNum":"  966","line":""},
{"lineNum":"  967","line":"/// The `Debug` output of the naive date `d` is same to `d.format(\"%Y-%m-%d\")`."},
{"lineNum":"  968","line":"/// Note that ISO 8601 requires an explicit sign for years before 1 BCE or after 9999 CE."},
{"lineNum":"  969","line":"///"},
{"lineNum":"  970","line":"/// The string printed can be readily parsed via the `parse` method on `str`."},
{"lineNum":"  971","line":"///"},
{"lineNum":"  972","line":"/// # Example"},
{"lineNum":"  973","line":"///"},
{"lineNum":"  974","line":"/// ~~~~"},
{"lineNum":"  975","line":"/// use chrono::NaiveDate;"},
{"lineNum":"  976","line":"///"},
{"lineNum":"  977","line":"/// assert_eq!(format!(\"{:?}\", NaiveDate::from_ymd(2015,  9,  5)), \"2015-09-05\");"},
{"lineNum":"  978","line":"/// assert_eq!(format!(\"{:?}\", NaiveDate::from_ymd(   0,  1,  1)), \"0000-01-01\");"},
{"lineNum":"  979","line":"/// assert_eq!(format!(\"{:?}\", NaiveDate::from_ymd(9999, 12, 31)), \"9999-12-31\");"},
{"lineNum":"  980","line":"///"},
{"lineNum":"  981","line":"/// // examples of an explicit year sign"},
{"lineNum":"  982","line":"/// assert_eq!(format!(\"{:?}\", NaiveDate::from_ymd(   -1,  1,  1)),  \"-0001-01-01\");"},
{"lineNum":"  983","line":"/// assert_eq!(format!(\"{:?}\", NaiveDate::from_ymd(10000, 12, 31)), \"+10000-12-31\");"},
{"lineNum":"  984","line":"/// ~~~~"},
{"lineNum":"  985","line":"impl fmt::Debug for NaiveDate {"},
{"lineNum":"  986","line":"    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"},
{"lineNum":"  987","line":"        let year = self.year();"},
{"lineNum":"  988","line":"        let mdf = self.mdf();"},
{"lineNum":"  989","line":"        if 0 <= year && year <= 9999 {"},
{"lineNum":"  990","line":"            write!(f, \"{:04}-{:02}-{:02}\", year, mdf.month(), mdf.day())"},
{"lineNum":"  991","line":"        } else {"},
{"lineNum":"  992","line":"            // ISO 8601 requires the explicit sign for out-of-range years"},
{"lineNum":"  993","line":"            write!(f, \"{:+05}-{:02}-{:02}\", year, mdf.month(), mdf.day())"},
{"lineNum":"  994","line":"        }"},
{"lineNum":"  995","line":"    }"},
{"lineNum":"  996","line":"}"},
{"lineNum":"  997","line":""},
{"lineNum":"  998","line":"/// The `Display` output of the naive date `d` is same to `d.format(\"%Y-%m-%d\")`."},
{"lineNum":"  999","line":"/// Note that ISO 8601 requires an explicit sign for years before 1 BCE or after 9999 CE."},
{"lineNum":" 1000","line":"///"},
{"lineNum":" 1001","line":"/// The string printed can be readily parsed via the `parse` method on `str`."},
{"lineNum":" 1002","line":"///"},
{"lineNum":" 1003","line":"/// # Example"},
{"lineNum":" 1004","line":"///"},
{"lineNum":" 1005","line":"/// ~~~~"},
{"lineNum":" 1006","line":"/// use chrono::NaiveDate;"},
{"lineNum":" 1007","line":"///"},
{"lineNum":" 1008","line":"/// assert_eq!(format!(\"{}\", NaiveDate::from_ymd(2015,  9,  5)), \"2015-09-05\");"},
{"lineNum":" 1009","line":"/// assert_eq!(format!(\"{}\", NaiveDate::from_ymd(   0,  1,  1)), \"0000-01-01\");"},
{"lineNum":" 1010","line":"/// assert_eq!(format!(\"{}\", NaiveDate::from_ymd(9999, 12, 31)), \"9999-12-31\");"},
{"lineNum":" 1011","line":"///"},
{"lineNum":" 1012","line":"/// // examples of an explicit year sign"},
{"lineNum":" 1013","line":"/// assert_eq!(format!(\"{}\", NaiveDate::from_ymd(   -1,  1,  1)),  \"-0001-01-01\");"},
{"lineNum":" 1014","line":"/// assert_eq!(format!(\"{}\", NaiveDate::from_ymd(10000, 12, 31)), \"+10000-12-31\");"},
{"lineNum":" 1015","line":"/// ~~~~"},
{"lineNum":" 1016","line":"impl fmt::Display for NaiveDate {"},
{"lineNum":" 1017","line":"    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result { fmt::Debug::fmt(self, f) }"},
{"lineNum":" 1018","line":"}"},
{"lineNum":" 1019","line":""},
{"lineNum":" 1020","line":"/// Parsing a str into a `NaiveDate` uses the same format, `%Y-%m-%d`, as `Debug` and `Display`."},
{"lineNum":" 1021","line":"///"},
{"lineNum":" 1022","line":"/// # Example"},
{"lineNum":" 1023","line":"///"},
{"lineNum":" 1024","line":"/// ~~~~"},
{"lineNum":" 1025","line":"/// use chrono::NaiveDate;"},
{"lineNum":" 1026","line":"///"},
{"lineNum":" 1027","line":"/// let d = NaiveDate::from_ymd(2015, 9, 18);"},
{"lineNum":" 1028","line":"/// assert_eq!(format!(\"{}\", d).parse::<NaiveDate>(), Ok(d));"},
{"lineNum":" 1029","line":"///"},
{"lineNum":" 1030","line":"/// let d = NaiveDate::from_ymd(12345, 6, 7);"},
{"lineNum":" 1031","line":"/// assert_eq!(format!(\"{}\", d).parse::<NaiveDate>(), Ok(d));"},
{"lineNum":" 1032","line":"///"},
{"lineNum":" 1033","line":"/// assert!(\"foo\".parse::<NaiveDate>().is_err());"},
{"lineNum":" 1034","line":"/// ~~~~"},
{"lineNum":" 1035","line":"impl str::FromStr for NaiveDate {"},
{"lineNum":" 1036","line":"    type Err = ParseError;"},
{"lineNum":" 1037","line":""},
{"lineNum":" 1038","line":"    fn from_str(s: &str) -> ParseResult<NaiveDate> {"},
{"lineNum":" 1039","line":"        const ITEMS: &\'static [Item<\'static>] = &["},
{"lineNum":" 1040","line":"            Item::Space(\"\"), Item::Numeric(Numeric::Year, Pad::Zero),"},
{"lineNum":" 1041","line":"            Item::Space(\"\"), Item::Literal(\"-\"),"},
{"lineNum":" 1042","line":"            Item::Space(\"\"), Item::Numeric(Numeric::Month, Pad::Zero),"},
{"lineNum":" 1043","line":"            Item::Space(\"\"), Item::Literal(\"-\"),"},
{"lineNum":" 1044","line":"            Item::Space(\"\"), Item::Numeric(Numeric::Day, Pad::Zero),"},
{"lineNum":" 1045","line":"            Item::Space(\"\"),"},
{"lineNum":" 1046","line":"        ];"},
{"lineNum":" 1047","line":""},
{"lineNum":" 1048","line":"        let mut parsed = Parsed::new();"},
{"lineNum":" 1049","line":"        try!(parse(&mut parsed, s, ITEMS.iter().cloned()));"},
{"lineNum":" 1050","line":"        parsed.to_naive_date()"},
{"lineNum":" 1051","line":"    }"},
{"lineNum":" 1052","line":"}"},
{"lineNum":" 1053","line":""},
{"lineNum":" 1054","line":""},
{"lineNum":" 1055","line":"#[cfg(feature = \"serde\")]"},
{"lineNum":" 1056","line":"mod serde {"},
{"lineNum":" 1057","line":"    use super::NaiveDate;"},
{"lineNum":" 1058","line":"    use serde::{ser, de};"},
{"lineNum":" 1059","line":""},
{"lineNum":" 1060","line":"    impl ser::Serialize for NaiveDate {"},
{"lineNum":" 1061","line":"        fn serialize<S>(&self, serializer: &mut S) -> Result<(), S::Error>"},
{"lineNum":" 1062","line":"            where S: ser::Serializer"},
{"lineNum":" 1063","line":"        {"},
{"lineNum":" 1064","line":"            serializer.visit_str(&format!(\"{:?}\", self))"},
{"lineNum":" 1065","line":"        }"},
{"lineNum":" 1066","line":"    }"},
{"lineNum":" 1067","line":""},
{"lineNum":" 1068","line":"    struct NaiveDateVisitor;"},
{"lineNum":" 1069","line":""},
{"lineNum":" 1070","line":"    impl de::Visitor for NaiveDateVisitor {"},
{"lineNum":" 1071","line":"        type Value = NaiveDate;"},
{"lineNum":" 1072","line":""},
{"lineNum":" 1073","line":"        fn visit_str<E>(&mut self, value: &str) -> Result<NaiveDate, E>"},
{"lineNum":" 1074","line":"            where E: de::Error"},
{"lineNum":" 1075","line":"        {"},
{"lineNum":" 1076","line":"            value.parse().map_err(|err| E::syntax(&format!(\"{}\", err)))"},
{"lineNum":" 1077","line":"        }"},
{"lineNum":" 1078","line":"    }"},
{"lineNum":" 1079","line":""},
{"lineNum":" 1080","line":"    impl de::Deserialize for NaiveDate {"},
{"lineNum":" 1081","line":"        fn deserialize<D>(deserializer: &mut D) -> Result<Self, D::Error>"},
{"lineNum":" 1082","line":"            where D: de::Deserializer"},
{"lineNum":" 1083","line":"        {"},
{"lineNum":" 1084","line":"            deserializer.visit(NaiveDateVisitor)"},
{"lineNum":" 1085","line":"        }"},
{"lineNum":" 1086","line":"    }"},
{"lineNum":" 1087","line":"}"},
{"lineNum":" 1088","line":""},
{"lineNum":" 1089","line":"#[cfg(test)]"},
{"lineNum":" 1090","line":"mod tests {"},
{"lineNum":" 1091","line":"    use super::NaiveDate;"},
{"lineNum":" 1092","line":"    use super::{MIN, MIN_YEAR, MIN_DAYS_FROM_YEAR_0};"},
{"lineNum":" 1093","line":"    use super::{MAX, MAX_YEAR, MAX_DAYS_FROM_YEAR_0};"},
{"lineNum":" 1094","line":"    use {Datelike, Weekday};"},
{"lineNum":" 1095","line":"    use duration::Duration;"},
{"lineNum":" 1096","line":"    use std::{i32, u32};"},
{"lineNum":" 1097","line":""},
{"lineNum":" 1098","line":"     // TODO replace with range notion and adapters"},
{"lineNum":" 1099","line":"    use num::iter::{range_inclusive, range_step_inclusive};"},
{"lineNum":" 1100","line":""},
{"lineNum":" 1101","line":"    #[test]"},
{"lineNum":" 1102","line":"    fn test_date_from_ymd() {"},
{"lineNum":" 1103","line":"        let ymd_opt = |y,m,d| NaiveDate::from_ymd_opt(y, m, d);"},
{"lineNum":" 1104","line":""},
{"lineNum":" 1105","line":"        assert!(ymd_opt(2012, 0, 1).is_none());"},
{"lineNum":" 1106","line":"        assert!(ymd_opt(2012, 1, 1).is_some());"},
{"lineNum":" 1107","line":"        assert!(ymd_opt(2012, 2, 29).is_some());"},
{"lineNum":" 1108","line":"        assert!(ymd_opt(2014, 2, 29).is_none());"},
{"lineNum":" 1109","line":"        assert!(ymd_opt(2014, 3, 0).is_none());"},
{"lineNum":" 1110","line":"        assert!(ymd_opt(2014, 3, 1).is_some());"},
{"lineNum":" 1111","line":"        assert!(ymd_opt(2014, 3, 31).is_some());"},
{"lineNum":" 1112","line":"        assert!(ymd_opt(2014, 3, 32).is_none());"},
{"lineNum":" 1113","line":"        assert!(ymd_opt(2014, 12, 31).is_some());"},
{"lineNum":" 1114","line":"        assert!(ymd_opt(2014, 13, 1).is_none());"},
{"lineNum":" 1115","line":"    }"},
{"lineNum":" 1116","line":""},
{"lineNum":" 1117","line":"    #[test]"},
{"lineNum":" 1118","line":"    fn test_date_from_yo() {"},
{"lineNum":" 1119","line":"        let yo_opt = |y,o| NaiveDate::from_yo_opt(y, o);"},
{"lineNum":" 1120","line":"        let ymd = |y,m,d| NaiveDate::from_ymd(y, m, d);"},
{"lineNum":" 1121","line":""},
{"lineNum":" 1122","line":"        assert_eq!(yo_opt(2012, 0), None);"},
{"lineNum":" 1123","line":"        assert_eq!(yo_opt(2012, 1), Some(ymd(2012, 1, 1)));"},
{"lineNum":" 1124","line":"        assert_eq!(yo_opt(2012, 2), Some(ymd(2012, 1, 2)));"},
{"lineNum":" 1125","line":"        assert_eq!(yo_opt(2012, 32), Some(ymd(2012, 2, 1)));"},
{"lineNum":" 1126","line":"        assert_eq!(yo_opt(2012, 60), Some(ymd(2012, 2, 29)));"},
{"lineNum":" 1127","line":"        assert_eq!(yo_opt(2012, 61), Some(ymd(2012, 3, 1)));"},
{"lineNum":" 1128","line":"        assert_eq!(yo_opt(2012, 100), Some(ymd(2012, 4, 9)));"},
{"lineNum":" 1129","line":"        assert_eq!(yo_opt(2012, 200), Some(ymd(2012, 7, 18)));"},
{"lineNum":" 1130","line":"        assert_eq!(yo_opt(2012, 300), Some(ymd(2012, 10, 26)));"},
{"lineNum":" 1131","line":"        assert_eq!(yo_opt(2012, 366), Some(ymd(2012, 12, 31)));"},
{"lineNum":" 1132","line":"        assert_eq!(yo_opt(2012, 367), None);"},
{"lineNum":" 1133","line":""},
{"lineNum":" 1134","line":"        assert_eq!(yo_opt(2014, 0), None);"},
{"lineNum":" 1135","line":"        assert_eq!(yo_opt(2014, 1), Some(ymd(2014, 1, 1)));"},
{"lineNum":" 1136","line":"        assert_eq!(yo_opt(2014, 2), Some(ymd(2014, 1, 2)));"},
{"lineNum":" 1137","line":"        assert_eq!(yo_opt(2014, 32), Some(ymd(2014, 2, 1)));"},
{"lineNum":" 1138","line":"        assert_eq!(yo_opt(2014, 59), Some(ymd(2014, 2, 28)));"},
{"lineNum":" 1139","line":"        assert_eq!(yo_opt(2014, 60), Some(ymd(2014, 3, 1)));"},
{"lineNum":" 1140","line":"        assert_eq!(yo_opt(2014, 100), Some(ymd(2014, 4, 10)));"},
{"lineNum":" 1141","line":"        assert_eq!(yo_opt(2014, 200), Some(ymd(2014, 7, 19)));"},
{"lineNum":" 1142","line":"        assert_eq!(yo_opt(2014, 300), Some(ymd(2014, 10, 27)));"},
{"lineNum":" 1143","line":"        assert_eq!(yo_opt(2014, 365), Some(ymd(2014, 12, 31)));"},
{"lineNum":" 1144","line":"        assert_eq!(yo_opt(2014, 366), None);"},
{"lineNum":" 1145","line":"    }"},
{"lineNum":" 1146","line":""},
{"lineNum":" 1147","line":"    #[test]"},
{"lineNum":" 1148","line":"    fn test_date_from_isoywd() {"},
{"lineNum":" 1149","line":"        let isoywd_opt = |y,w,d| NaiveDate::from_isoywd_opt(y, w, d);"},
{"lineNum":" 1150","line":"        let ymd = |y,m,d| NaiveDate::from_ymd(y, m, d);"},
{"lineNum":" 1151","line":""},
{"lineNum":" 1152","line":"        assert_eq!(isoywd_opt(2004, 0, Weekday::Sun), None);"},
{"lineNum":" 1153","line":"        assert_eq!(isoywd_opt(2004, 1, Weekday::Mon), Some(ymd(2003, 12, 29)));"},
{"lineNum":" 1154","line":"        assert_eq!(isoywd_opt(2004, 1, Weekday::Sun), Some(ymd(2004, 1, 4)));"},
{"lineNum":" 1155","line":"        assert_eq!(isoywd_opt(2004, 2, Weekday::Mon), Some(ymd(2004, 1, 5)));"},
{"lineNum":" 1156","line":"        assert_eq!(isoywd_opt(2004, 2, Weekday::Sun), Some(ymd(2004, 1, 11)));"},
{"lineNum":" 1157","line":"        assert_eq!(isoywd_opt(2004, 52, Weekday::Mon), Some(ymd(2004, 12, 20)));"},
{"lineNum":" 1158","line":"        assert_eq!(isoywd_opt(2004, 52, Weekday::Sun), Some(ymd(2004, 12, 26)));"},
{"lineNum":" 1159","line":"        assert_eq!(isoywd_opt(2004, 53, Weekday::Mon), Some(ymd(2004, 12, 27)));"},
{"lineNum":" 1160","line":"        assert_eq!(isoywd_opt(2004, 53, Weekday::Sun), Some(ymd(2005, 1, 2)));"},
{"lineNum":" 1161","line":"        assert_eq!(isoywd_opt(2004, 54, Weekday::Mon), None);"},
{"lineNum":" 1162","line":""},
{"lineNum":" 1163","line":"        assert_eq!(isoywd_opt(2011, 0, Weekday::Sun), None);"},
{"lineNum":" 1164","line":"        assert_eq!(isoywd_opt(2011, 1, Weekday::Mon), Some(ymd(2011, 1, 3)));"},
{"lineNum":" 1165","line":"        assert_eq!(isoywd_opt(2011, 1, Weekday::Sun), Some(ymd(2011, 1, 9)));"},
{"lineNum":" 1166","line":"        assert_eq!(isoywd_opt(2011, 2, Weekday::Mon), Some(ymd(2011, 1, 10)));"},
{"lineNum":" 1167","line":"        assert_eq!(isoywd_opt(2011, 2, Weekday::Sun), Some(ymd(2011, 1, 16)));"},
{"lineNum":" 1168","line":""},
{"lineNum":" 1169","line":"        assert_eq!(isoywd_opt(2018, 51, Weekday::Mon), Some(ymd(2018, 12, 17)));"},
{"lineNum":" 1170","line":"        assert_eq!(isoywd_opt(2018, 51, Weekday::Sun), Some(ymd(2018, 12, 23)));"},
{"lineNum":" 1171","line":"        assert_eq!(isoywd_opt(2018, 52, Weekday::Mon), Some(ymd(2018, 12, 24)));"},
{"lineNum":" 1172","line":"        assert_eq!(isoywd_opt(2018, 52, Weekday::Sun), Some(ymd(2018, 12, 30)));"},
{"lineNum":" 1173","line":"        assert_eq!(isoywd_opt(2018, 53, Weekday::Mon), None);"},
{"lineNum":" 1174","line":"    }"},
{"lineNum":" 1175","line":""},
{"lineNum":" 1176","line":"    #[test]"},
{"lineNum":" 1177","line":"    fn test_date_from_isoymd_and_isoweekdate() {"},
{"lineNum":" 1178","line":"        for year in range_inclusive(2000i32, 2400) {"},
{"lineNum":" 1179","line":"            for week in range_inclusive(1u32, 53) {"},
{"lineNum":" 1180","line":"                for &weekday in [Weekday::Mon, Weekday::Tue, Weekday::Wed, Weekday::Thu,"},
{"lineNum":" 1181","line":"                                 Weekday::Fri, Weekday::Sat, Weekday::Sun].iter() {"},
{"lineNum":" 1182","line":"                    let d = NaiveDate::from_isoywd_opt(year, week, weekday);"},
{"lineNum":" 1183","line":"                    if d.is_some() {"},
{"lineNum":" 1184","line":"                        let d = d.unwrap();"},
{"lineNum":" 1185","line":"                        assert_eq!(d.weekday(), weekday);"},
{"lineNum":" 1186","line":"                        let (year_, week_, weekday_) = d.isoweekdate();"},
{"lineNum":" 1187","line":"                        assert_eq!(year_, year);"},
{"lineNum":" 1188","line":"                        assert_eq!(week_, week);"},
{"lineNum":" 1189","line":"                        assert_eq!(weekday_, weekday);"},
{"lineNum":" 1190","line":"                    }"},
{"lineNum":" 1191","line":"                }"},
{"lineNum":" 1192","line":"            }"},
{"lineNum":" 1193","line":"        }"},
{"lineNum":" 1194","line":""},
{"lineNum":" 1195","line":"        for year in range_inclusive(2000i32, 2400) {"},
{"lineNum":" 1196","line":"            for month in range_inclusive(1u32, 12) {"},
{"lineNum":" 1197","line":"                for day in range_inclusive(1u32, 31) {"},
{"lineNum":" 1198","line":"                    let d = NaiveDate::from_ymd_opt(year, month, day);"},
{"lineNum":" 1199","line":"                    if d.is_some() {"},
{"lineNum":" 1200","line":"                        let d = d.unwrap();"},
{"lineNum":" 1201","line":"                        let (year_, week_, weekday_) = d.isoweekdate();"},
{"lineNum":" 1202","line":"                        let d_ = NaiveDate::from_isoywd(year_, week_, weekday_);"},
{"lineNum":" 1203","line":"                        assert_eq!(d, d_);"},
{"lineNum":" 1204","line":"                    }"},
{"lineNum":" 1205","line":"                }"},
{"lineNum":" 1206","line":"            }"},
{"lineNum":" 1207","line":"        }"},
{"lineNum":" 1208","line":"    }"},
{"lineNum":" 1209","line":""},
{"lineNum":" 1210","line":"    #[test]"},
{"lineNum":" 1211","line":"    fn test_date_from_num_days_from_ce() {"},
{"lineNum":" 1212","line":"        let from_ndays_from_ce = |days| NaiveDate::from_num_days_from_ce_opt(days);"},
{"lineNum":" 1213","line":"        assert_eq!(from_ndays_from_ce(1), Some(NaiveDate::from_ymd(1, 1, 1)));"},
{"lineNum":" 1214","line":"        assert_eq!(from_ndays_from_ce(2), Some(NaiveDate::from_ymd(1, 1, 2)));"},
{"lineNum":" 1215","line":"        assert_eq!(from_ndays_from_ce(31), Some(NaiveDate::from_ymd(1, 1, 31)));"},
{"lineNum":" 1216","line":"        assert_eq!(from_ndays_from_ce(32), Some(NaiveDate::from_ymd(1, 2, 1)));"},
{"lineNum":" 1217","line":"        assert_eq!(from_ndays_from_ce(59), Some(NaiveDate::from_ymd(1, 2, 28)));"},
{"lineNum":" 1218","line":"        assert_eq!(from_ndays_from_ce(60), Some(NaiveDate::from_ymd(1, 3, 1)));"},
{"lineNum":" 1219","line":"        assert_eq!(from_ndays_from_ce(365), Some(NaiveDate::from_ymd(1, 12, 31)));"},
{"lineNum":" 1220","line":"        assert_eq!(from_ndays_from_ce(365*1 + 1), Some(NaiveDate::from_ymd(2, 1, 1)));"},
{"lineNum":" 1221","line":"        assert_eq!(from_ndays_from_ce(365*2 + 1), Some(NaiveDate::from_ymd(3, 1, 1)));"},
{"lineNum":" 1222","line":"        assert_eq!(from_ndays_from_ce(365*3 + 1), Some(NaiveDate::from_ymd(4, 1, 1)));"},
{"lineNum":" 1223","line":"        assert_eq!(from_ndays_from_ce(365*4 + 2), Some(NaiveDate::from_ymd(5, 1, 1)));"},
{"lineNum":" 1224","line":"        assert_eq!(from_ndays_from_ce(146097 + 1), Some(NaiveDate::from_ymd(401, 1, 1)));"},
{"lineNum":" 1225","line":"        assert_eq!(from_ndays_from_ce(146097*5 + 1), Some(NaiveDate::from_ymd(2001, 1, 1)));"},
{"lineNum":" 1226","line":"        assert_eq!(from_ndays_from_ce(719163), Some(NaiveDate::from_ymd(1970, 1, 1)));"},
{"lineNum":" 1227","line":"        assert_eq!(from_ndays_from_ce(0), Some(NaiveDate::from_ymd(0, 12, 31))); // 1 BCE"},
{"lineNum":" 1228","line":"        assert_eq!(from_ndays_from_ce(-365), Some(NaiveDate::from_ymd(0, 1, 1)));"},
{"lineNum":" 1229","line":"        assert_eq!(from_ndays_from_ce(-366), Some(NaiveDate::from_ymd(-1, 12, 31))); // 2 BCE"},
{"lineNum":" 1230","line":""},
{"lineNum":" 1231","line":"        for days in range_step_inclusive(-999900i32, 1000000, 100) {"},
{"lineNum":" 1232","line":"            assert_eq!(from_ndays_from_ce(days).map(|d| d.num_days_from_ce()), Some(days));"},
{"lineNum":" 1233","line":"        }"},
{"lineNum":" 1234","line":""},
{"lineNum":" 1235","line":"        assert_eq!(from_ndays_from_ce(MIN.num_days_from_ce()), Some(MIN));"},
{"lineNum":" 1236","line":"        assert_eq!(from_ndays_from_ce(MIN.num_days_from_ce() - 1), None);"},
{"lineNum":" 1237","line":"        assert_eq!(from_ndays_from_ce(MAX.num_days_from_ce()), Some(MAX));"},
{"lineNum":" 1238","line":"        assert_eq!(from_ndays_from_ce(MAX.num_days_from_ce() + 1), None);"},
{"lineNum":" 1239","line":"    }"},
{"lineNum":" 1240","line":""},
{"lineNum":" 1241","line":"    #[test]"},
{"lineNum":" 1242","line":"    fn test_date_fields() {"},
{"lineNum":" 1243","line":"        fn check(year: i32, month: u32, day: u32, ordinal: u32) {"},
{"lineNum":" 1244","line":"            let d1 = NaiveDate::from_ymd(year, month, day);"},
{"lineNum":" 1245","line":"            assert_eq!(d1.year(), year);"},
{"lineNum":" 1246","line":"            assert_eq!(d1.month(), month);"},
{"lineNum":" 1247","line":"            assert_eq!(d1.day(), day);"},
{"lineNum":" 1248","line":"            assert_eq!(d1.ordinal(), ordinal);"},
{"lineNum":" 1249","line":""},
{"lineNum":" 1250","line":"            let d2 = NaiveDate::from_yo(year, ordinal);"},
{"lineNum":" 1251","line":"            assert_eq!(d2.year(), year);"},
{"lineNum":" 1252","line":"            assert_eq!(d2.month(), month);"},
{"lineNum":" 1253","line":"            assert_eq!(d2.day(), day);"},
{"lineNum":" 1254","line":"            assert_eq!(d2.ordinal(), ordinal);"},
{"lineNum":" 1255","line":""},
{"lineNum":" 1256","line":"            assert_eq!(d1, d2);"},
{"lineNum":" 1257","line":"        }"},
{"lineNum":" 1258","line":""},
{"lineNum":" 1259","line":"        check(2012, 1, 1, 1);"},
{"lineNum":" 1260","line":"        check(2012, 1, 2, 2);"},
{"lineNum":" 1261","line":"        check(2012, 2, 1, 32);"},
{"lineNum":" 1262","line":"        check(2012, 2, 29, 60);"},
{"lineNum":" 1263","line":"        check(2012, 3, 1, 61);"},
{"lineNum":" 1264","line":"        check(2012, 4, 9, 100);"},
{"lineNum":" 1265","line":"        check(2012, 7, 18, 200);"},
{"lineNum":" 1266","line":"        check(2012, 10, 26, 300);"},
{"lineNum":" 1267","line":"        check(2012, 12, 31, 366);"},
{"lineNum":" 1268","line":""},
{"lineNum":" 1269","line":"        check(2014, 1, 1, 1);"},
{"lineNum":" 1270","line":"        check(2014, 1, 2, 2);"},
{"lineNum":" 1271","line":"        check(2014, 2, 1, 32);"},
{"lineNum":" 1272","line":"        check(2014, 2, 28, 59);"},
{"lineNum":" 1273","line":"        check(2014, 3, 1, 60);"},
{"lineNum":" 1274","line":"        check(2014, 4, 10, 100);"},
{"lineNum":" 1275","line":"        check(2014, 7, 19, 200);"},
{"lineNum":" 1276","line":"        check(2014, 10, 27, 300);"},
{"lineNum":" 1277","line":"        check(2014, 12, 31, 365);"},
{"lineNum":" 1278","line":"    }"},
{"lineNum":" 1279","line":""},
{"lineNum":" 1280","line":"    #[test]"},
{"lineNum":" 1281","line":"    fn test_date_weekday() {"},
{"lineNum":" 1282","line":"        assert_eq!(NaiveDate::from_ymd(1582, 10, 15).weekday(), Weekday::Fri);"},
{"lineNum":" 1283","line":"        // May 20, 1875 = ISO 8601 reference date"},
{"lineNum":" 1284","line":"        assert_eq!(NaiveDate::from_ymd(1875, 5, 20).weekday(), Weekday::Thu);"},
{"lineNum":" 1285","line":"        assert_eq!(NaiveDate::from_ymd(2000, 1, 1).weekday(), Weekday::Sat);"},
{"lineNum":" 1286","line":"    }"},
{"lineNum":" 1287","line":""},
{"lineNum":" 1288","line":"    #[test]"},
{"lineNum":" 1289","line":"    fn test_date_with_fields() {"},
{"lineNum":" 1290","line":"        let d = NaiveDate::from_ymd(2000, 2, 29);"},
{"lineNum":" 1291","line":"        assert_eq!(d.with_year(-400), Some(NaiveDate::from_ymd(-400, 2, 29)));"},
{"lineNum":" 1292","line":"        assert_eq!(d.with_year(-100), None);"},
{"lineNum":" 1293","line":"        assert_eq!(d.with_year(1600), Some(NaiveDate::from_ymd(1600, 2, 29)));"},
{"lineNum":" 1294","line":"        assert_eq!(d.with_year(1900), None);"},
{"lineNum":" 1295","line":"        assert_eq!(d.with_year(2000), Some(NaiveDate::from_ymd(2000, 2, 29)));"},
{"lineNum":" 1296","line":"        assert_eq!(d.with_year(2001), None);"},
{"lineNum":" 1297","line":"        assert_eq!(d.with_year(2004), Some(NaiveDate::from_ymd(2004, 2, 29)));"},
{"lineNum":" 1298","line":"        assert_eq!(d.with_year(i32::MAX), None);"},
{"lineNum":" 1299","line":""},
{"lineNum":" 1300","line":"        let d = NaiveDate::from_ymd(2000, 4, 30);"},
{"lineNum":" 1301","line":"        assert_eq!(d.with_month(0), None);"},
{"lineNum":" 1302","line":"        assert_eq!(d.with_month(1), Some(NaiveDate::from_ymd(2000, 1, 30)));"},
{"lineNum":" 1303","line":"        assert_eq!(d.with_month(2), None);"},
{"lineNum":" 1304","line":"        assert_eq!(d.with_month(3), Some(NaiveDate::from_ymd(2000, 3, 30)));"},
{"lineNum":" 1305","line":"        assert_eq!(d.with_month(4), Some(NaiveDate::from_ymd(2000, 4, 30)));"},
{"lineNum":" 1306","line":"        assert_eq!(d.with_month(12), Some(NaiveDate::from_ymd(2000, 12, 30)));"},
{"lineNum":" 1307","line":"        assert_eq!(d.with_month(13), None);"},
{"lineNum":" 1308","line":"        assert_eq!(d.with_month(u32::MAX), None);"},
{"lineNum":" 1309","line":""},
{"lineNum":" 1310","line":"        let d = NaiveDate::from_ymd(2000, 2, 8);"},
{"lineNum":" 1311","line":"        assert_eq!(d.with_day(0), None);"},
{"lineNum":" 1312","line":"        assert_eq!(d.with_day(1), Some(NaiveDate::from_ymd(2000, 2, 1)));"},
{"lineNum":" 1313","line":"        assert_eq!(d.with_day(29), Some(NaiveDate::from_ymd(2000, 2, 29)));"},
{"lineNum":" 1314","line":"        assert_eq!(d.with_day(30), None);"},
{"lineNum":" 1315","line":"        assert_eq!(d.with_day(u32::MAX), None);"},
{"lineNum":" 1316","line":""},
{"lineNum":" 1317","line":"        let d = NaiveDate::from_ymd(2000, 5, 5);"},
{"lineNum":" 1318","line":"        assert_eq!(d.with_ordinal(0), None);"},
{"lineNum":" 1319","line":"        assert_eq!(d.with_ordinal(1), Some(NaiveDate::from_ymd(2000, 1, 1)));"},
{"lineNum":" 1320","line":"        assert_eq!(d.with_ordinal(60), Some(NaiveDate::from_ymd(2000, 2, 29)));"},
{"lineNum":" 1321","line":"        assert_eq!(d.with_ordinal(61), Some(NaiveDate::from_ymd(2000, 3, 1)));"},
{"lineNum":" 1322","line":"        assert_eq!(d.with_ordinal(366), Some(NaiveDate::from_ymd(2000, 12, 31)));"},
{"lineNum":" 1323","line":"        assert_eq!(d.with_ordinal(367), None);"},
{"lineNum":" 1324","line":"        assert_eq!(d.with_ordinal(u32::MAX), None);"},
{"lineNum":" 1325","line":"    }"},
{"lineNum":" 1326","line":""},
{"lineNum":" 1327","line":"    #[test]"},
{"lineNum":" 1328","line":"    fn test_date_num_days_from_ce() {"},
{"lineNum":" 1329","line":"        assert_eq!(NaiveDate::from_ymd(1, 1, 1).num_days_from_ce(), 1);"},
{"lineNum":" 1330","line":""},
{"lineNum":" 1331","line":"        for year in range_inclusive(-9999i32, 10000) {"},
{"lineNum":" 1332","line":"            assert_eq!(NaiveDate::from_ymd(year, 1, 1).num_days_from_ce(),"},
{"lineNum":" 1333","line":"                       NaiveDate::from_ymd(year - 1, 12, 31).num_days_from_ce() + 1);"},
{"lineNum":" 1334","line":"        }"},
{"lineNum":" 1335","line":"    }"},
{"lineNum":" 1336","line":""},
{"lineNum":" 1337","line":"    #[test]"},
{"lineNum":" 1338","line":"    fn test_date_succ() {"},
{"lineNum":" 1339","line":"        let ymd = |y,m,d| NaiveDate::from_ymd(y, m, d);"},
{"lineNum":" 1340","line":"        assert_eq!(ymd(2014, 5, 6).succ_opt(), Some(ymd(2014, 5, 7)));"},
{"lineNum":" 1341","line":"        assert_eq!(ymd(2014, 5, 31).succ_opt(), Some(ymd(2014, 6, 1)));"},
{"lineNum":" 1342","line":"        assert_eq!(ymd(2014, 12, 31).succ_opt(), Some(ymd(2015, 1, 1)));"},
{"lineNum":" 1343","line":"        assert_eq!(ymd(2016, 2, 28).succ_opt(), Some(ymd(2016, 2, 29)));"},
{"lineNum":" 1344","line":"        assert_eq!(ymd(MAX.year(), 12, 31).succ_opt(), None);"},
{"lineNum":" 1345","line":"    }"},
{"lineNum":" 1346","line":""},
{"lineNum":" 1347","line":"    #[test]"},
{"lineNum":" 1348","line":"    fn test_date_pred() {"},
{"lineNum":" 1349","line":"        let ymd = |y,m,d| NaiveDate::from_ymd(y, m, d);"},
{"lineNum":" 1350","line":"        assert_eq!(ymd(2016, 3, 1).pred_opt(), Some(ymd(2016, 2, 29)));"},
{"lineNum":" 1351","line":"        assert_eq!(ymd(2015, 1, 1).pred_opt(), Some(ymd(2014, 12, 31)));"},
{"lineNum":" 1352","line":"        assert_eq!(ymd(2014, 6, 1).pred_opt(), Some(ymd(2014, 5, 31)));"},
{"lineNum":" 1353","line":"        assert_eq!(ymd(2014, 5, 7).pred_opt(), Some(ymd(2014, 5, 6)));"},
{"lineNum":" 1354","line":"        assert_eq!(ymd(MIN.year(), 1, 1).pred_opt(), None);"},
{"lineNum":" 1355","line":"    }"},
{"lineNum":" 1356","line":""},
{"lineNum":" 1357","line":"    #[test]"},
{"lineNum":" 1358","line":"    fn test_date_add() {"},
{"lineNum":" 1359","line":"        fn check((y1,m1,d1): (i32, u32, u32), rhs: Duration, ymd: Option<(i32, u32, u32)>) {"},
{"lineNum":" 1360","line":"            let lhs = NaiveDate::from_ymd(y1, m1, d1);"},
{"lineNum":" 1361","line":"            let sum = ymd.map(|(y,m,d)| NaiveDate::from_ymd(y, m, d));"},
{"lineNum":" 1362","line":"            assert_eq!(lhs.checked_add(rhs), sum);"},
{"lineNum":" 1363","line":"            assert_eq!(lhs.checked_sub(-rhs), sum);"},
{"lineNum":" 1364","line":"        }"},
{"lineNum":" 1365","line":""},
{"lineNum":" 1366","line":"        check((2014, 1, 1), Duration::zero(), Some((2014, 1, 1)));"},
{"lineNum":" 1367","line":"        check((2014, 1, 1), Duration::seconds(86399), Some((2014, 1, 1)));"},
{"lineNum":" 1368","line":"        // always round towards zero"},
{"lineNum":" 1369","line":"        check((2014, 1, 1), Duration::seconds(-86399), Some((2014, 1, 1)));"},
{"lineNum":" 1370","line":"        check((2014, 1, 1), Duration::days(1), Some((2014, 1, 2)));"},
{"lineNum":" 1371","line":"        check((2014, 1, 1), Duration::days(-1), Some((2013, 12, 31)));"},
{"lineNum":" 1372","line":"        check((2014, 1, 1), Duration::days(364), Some((2014, 12, 31)));"},
{"lineNum":" 1373","line":"        check((2014, 1, 1), Duration::days(365*4 + 1), Some((2018, 1, 1)));"},
{"lineNum":" 1374","line":"        check((2014, 1, 1), Duration::days(365*400 + 97), Some((2414, 1, 1)));"},
{"lineNum":" 1375","line":""},
{"lineNum":" 1376","line":"        check((-7, 1, 1), Duration::days(365*12 + 3), Some((5, 1, 1)));"},
{"lineNum":" 1377","line":""},
{"lineNum":" 1378","line":"        // overflow check"},
{"lineNum":" 1379","line":"        check((0, 1, 1), Duration::days(MAX_DAYS_FROM_YEAR_0 as i64), Some((MAX_YEAR, 12, 31)));"},
{"lineNum":" 1380","line":"        check((0, 1, 1), Duration::days(MAX_DAYS_FROM_YEAR_0 as i64 + 1), None);"},
{"lineNum":" 1381","line":"        check((0, 1, 1), Duration::max_value(), None);"},
{"lineNum":" 1382","line":"        check((0, 1, 1), Duration::days(MIN_DAYS_FROM_YEAR_0 as i64), Some((MIN_YEAR, 1, 1)));"},
{"lineNum":" 1383","line":"        check((0, 1, 1), Duration::days(MIN_DAYS_FROM_YEAR_0 as i64 - 1), None);"},
{"lineNum":" 1384","line":"        check((0, 1, 1), Duration::min_value(), None);"},
{"lineNum":" 1385","line":"    }"},
{"lineNum":" 1386","line":""},
{"lineNum":" 1387","line":"    #[test]"},
{"lineNum":" 1388","line":"    fn test_date_sub() {"},
{"lineNum":" 1389","line":"        fn check((y1,m1,d1): (i32, u32, u32), (y2,m2,d2): (i32, u32, u32), diff: Duration) {"},
{"lineNum":" 1390","line":"            let lhs = NaiveDate::from_ymd(y1, m1, d1);"},
{"lineNum":" 1391","line":"            let rhs = NaiveDate::from_ymd(y2, m2, d2);"},
{"lineNum":" 1392","line":"            assert_eq!(lhs - rhs, diff);"},
{"lineNum":" 1393","line":"            assert_eq!(rhs - lhs, -diff);"},
{"lineNum":" 1394","line":"        }"},
{"lineNum":" 1395","line":""},
{"lineNum":" 1396","line":"        check((2014, 1, 1), (2014, 1, 1), Duration::zero());"},
{"lineNum":" 1397","line":"        check((2014, 1, 2), (2014, 1, 1), Duration::days(1));"},
{"lineNum":" 1398","line":"        check((2014, 12, 31), (2014, 1, 1), Duration::days(364));"},
{"lineNum":" 1399","line":"        check((2015, 1, 3), (2014, 1, 1), Duration::days(365 + 2));"},
{"lineNum":" 1400","line":"        check((2018, 1, 1), (2014, 1, 1), Duration::days(365*4 + 1));"},
{"lineNum":" 1401","line":"        check((2414, 1, 1), (2014, 1, 1), Duration::days(365*400 + 97));"},
{"lineNum":" 1402","line":""},
{"lineNum":" 1403","line":"        check((MAX_YEAR, 12, 31), (0, 1, 1), Duration::days(MAX_DAYS_FROM_YEAR_0 as i64));"},
{"lineNum":" 1404","line":"        check((MIN_YEAR, 1, 1), (0, 1, 1), Duration::days(MIN_DAYS_FROM_YEAR_0 as i64));"},
{"lineNum":" 1405","line":"    }"},
{"lineNum":" 1406","line":""},
{"lineNum":" 1407","line":"    #[test]"},
{"lineNum":" 1408","line":"    fn test_date_fmt() {"},
{"lineNum":" 1409","line":"        assert_eq!(format!(\"{:?}\", NaiveDate::from_ymd(2012,  3, 4)),   \"2012-03-04\");"},
{"lineNum":" 1410","line":"        assert_eq!(format!(\"{:?}\", NaiveDate::from_ymd(0,     3, 4)),   \"0000-03-04\");"},
{"lineNum":" 1411","line":"        assert_eq!(format!(\"{:?}\", NaiveDate::from_ymd(-307,  3, 4)),  \"-0307-03-04\");"},
{"lineNum":" 1412","line":"        assert_eq!(format!(\"{:?}\", NaiveDate::from_ymd(12345, 3, 4)), \"+12345-03-04\");"},
{"lineNum":" 1413","line":""},
{"lineNum":" 1414","line":"        assert_eq!(NaiveDate::from_ymd(2012,  3, 4).to_string(),   \"2012-03-04\");"},
{"lineNum":" 1415","line":"        assert_eq!(NaiveDate::from_ymd(0,     3, 4).to_string(),   \"0000-03-04\");"},
{"lineNum":" 1416","line":"        assert_eq!(NaiveDate::from_ymd(-307,  3, 4).to_string(),  \"-0307-03-04\");"},
{"lineNum":" 1417","line":"        assert_eq!(NaiveDate::from_ymd(12345, 3, 4).to_string(), \"+12345-03-04\");"},
{"lineNum":" 1418","line":""},
{"lineNum":" 1419","line":"        // the format specifier should have no effect on `NaiveTime`"},
{"lineNum":" 1420","line":"        assert_eq!(format!(\"{:+30?}\", NaiveDate::from_ymd(1234, 5, 6)), \"1234-05-06\");"},
{"lineNum":" 1421","line":"        assert_eq!(format!(\"{:30?}\", NaiveDate::from_ymd(12345, 6, 7)), \"+12345-06-07\");"},
{"lineNum":" 1422","line":"    }"},
{"lineNum":" 1423","line":""},
{"lineNum":" 1424","line":"    #[test]"},
{"lineNum":" 1425","line":"    fn test_date_from_str() {"},
{"lineNum":" 1426","line":"        // valid cases"},
{"lineNum":" 1427","line":"        let valid = ["},
{"lineNum":" 1428","line":"            \"-0000000123456-1-2\","},
{"lineNum":" 1429","line":"            \"    -123456 - 1 - 2    \","},
{"lineNum":" 1430","line":"            \"-12345-1-2\","},
{"lineNum":" 1431","line":"            \"-1234-12-31\","},
{"lineNum":" 1432","line":"            \"-7-6-5\","},
{"lineNum":" 1433","line":"            \"350-2-28\","},
{"lineNum":" 1434","line":"            \"360-02-29\","},
{"lineNum":" 1435","line":"            \"0360-02-29\","},
{"lineNum":" 1436","line":"            \"2015-2 -18\","},
{"lineNum":" 1437","line":"            \"+70-2-18\","},
{"lineNum":" 1438","line":"            \"+70000-2-18\","},
{"lineNum":" 1439","line":"            \"+00007-2-18\","},
{"lineNum":" 1440","line":"        ];"},
{"lineNum":" 1441","line":"        for &s in &valid {"},
{"lineNum":" 1442","line":"            let d = match s.parse::<NaiveDate>() {"},
{"lineNum":" 1443","line":"                Ok(d) => d,"},
{"lineNum":" 1444","line":"                Err(e) => panic!(\"parsing `{}` has failed: {}\", s, e)"},
{"lineNum":" 1445","line":"            };"},
{"lineNum":" 1446","line":"            let s_ = format!(\"{:?}\", d);"},
{"lineNum":" 1447","line":"            // `s` and `s_` may differ, but `s.parse()` and `s_.parse()` must be same"},
{"lineNum":" 1448","line":"            let d_ = match s_.parse::<NaiveDate>() {"},
{"lineNum":" 1449","line":"                Ok(d) => d,"},
{"lineNum":" 1450","line":"                Err(e) => panic!(\"`{}` is parsed into `{:?}`, but reparsing that has failed: {}\","},
{"lineNum":" 1451","line":"                                 s, d, e)"},
{"lineNum":" 1452","line":"            };"},
{"lineNum":" 1453","line":"            assert!(d == d_, \"`{}` is parsed into `{:?}`, but reparsed result \\"},
{"lineNum":" 1454","line":"                              `{:?}` does not match\", s, d, d_);"},
{"lineNum":" 1455","line":"        }"},
{"lineNum":" 1456","line":""},
{"lineNum":" 1457","line":"        // some invalid cases"},
{"lineNum":" 1458","line":"        // since `ParseErrorKind` is private, all we can do is to check if there was an error"},
{"lineNum":" 1459","line":"        assert!(\"\".parse::<NaiveDate>().is_err());"},
{"lineNum":" 1460","line":"        assert!(\"x\".parse::<NaiveDate>().is_err());"},
{"lineNum":" 1461","line":"        assert!(\"2014\".parse::<NaiveDate>().is_err());"},
{"lineNum":" 1462","line":"        assert!(\"2014-01\".parse::<NaiveDate>().is_err());"},
{"lineNum":" 1463","line":"        assert!(\"2014-01-00\".parse::<NaiveDate>().is_err());"},
{"lineNum":" 1464","line":"        assert!(\"2014-13-57\".parse::<NaiveDate>().is_err());"},
{"lineNum":" 1465","line":"        assert!(\"9999999-9-9\".parse::<NaiveDate>().is_err()); // out-of-bounds"},
{"lineNum":" 1466","line":"    }"},
{"lineNum":" 1467","line":""},
{"lineNum":" 1468","line":"    #[test]"},
{"lineNum":" 1469","line":"    fn test_date_parse_from_str() {"},
{"lineNum":" 1470","line":"        let ymd = |y,m,d| NaiveDate::from_ymd(y,m,d);"},
{"lineNum":" 1471","line":"        assert_eq!(NaiveDate::parse_from_str(\"2014-5-7T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),"},
{"lineNum":" 1472","line":"                   Ok(ymd(2014, 5, 7))); // ignore time and offset"},
{"lineNum":" 1473","line":"        assert_eq!(NaiveDate::parse_from_str(\"2015-W06-1=2015-033\", \"%G-W%V-%u = %Y-%j\"),"},
{"lineNum":" 1474","line":"                   Ok(ymd(2015, 2, 2)));"},
{"lineNum":" 1475","line":"        assert_eq!(NaiveDate::parse_from_str(\"Fri, 09 Aug 13\", \"%a, %d %b %y\"),"},
{"lineNum":" 1476","line":"                   Ok(ymd(2013, 8, 9)));"},
{"lineNum":" 1477","line":"        assert!(NaiveDate::parse_from_str(\"Sat, 09 Aug 2013\", \"%a, %d %b %Y\").is_err());"},
{"lineNum":" 1478","line":"        assert!(NaiveDate::parse_from_str(\"2014-57\", \"%Y-%m-%d\").is_err());"},
{"lineNum":" 1479","line":"        assert!(NaiveDate::parse_from_str(\"2014\", \"%Y\").is_err()); // insufficient"},
{"lineNum":" 1480","line":"    }"},
{"lineNum":" 1481","line":""},
{"lineNum":" 1482","line":"    #[test]"},
{"lineNum":" 1483","line":"    fn test_date_format() {"},
{"lineNum":" 1484","line":"        let d = NaiveDate::from_ymd(2012, 3, 4);"},
{"lineNum":" 1485","line":"        assert_eq!(d.format(\"%Y,%C,%y,%G,%g\").to_string(), \"2012,20,12,2012,12\");"},
{"lineNum":" 1486","line":"        assert_eq!(d.format(\"%m,%b,%h,%B\").to_string(), \"03,Mar,Mar,March\");"},
{"lineNum":" 1487","line":"        assert_eq!(d.format(\"%d,%e\").to_string(), \"04, 4\");"},
{"lineNum":" 1488","line":"        assert_eq!(d.format(\"%U,%W,%V\").to_string(), \"10,09,09\");"},
{"lineNum":" 1489","line":"        assert_eq!(d.format(\"%a,%A,%w,%u\").to_string(), \"Sun,Sunday,0,7\");"},
{"lineNum":" 1490","line":"        assert_eq!(d.format(\"%j\").to_string(), \"064\"); // since 2012 is a leap year"},
{"lineNum":" 1491","line":"        assert_eq!(d.format(\"%D,%x\").to_string(), \"03/04/12,03/04/12\");"},
{"lineNum":" 1492","line":"        assert_eq!(d.format(\"%F\").to_string(), \"2012-03-04\");"},
{"lineNum":" 1493","line":"        assert_eq!(d.format(\"%v\").to_string(), \" 4-Mar-2012\");"},
{"lineNum":" 1494","line":"        assert_eq!(d.format(\"%t%n%%%n%t\").to_string(), \"\\t\\n%\\n\\t\");"},
{"lineNum":" 1495","line":""},
{"lineNum":" 1496","line":"        // non-four-digit years"},
{"lineNum":" 1497","line":"        assert_eq!(NaiveDate::from_ymd(12345,  1, 1).format(\"%Y\").to_string(), \"+12345\");"},
{"lineNum":" 1498","line":"        assert_eq!(NaiveDate::from_ymd(1234,   1, 1).format(\"%Y\").to_string(), \"1234\");"},
{"lineNum":" 1499","line":"        assert_eq!(NaiveDate::from_ymd(123,    1, 1).format(\"%Y\").to_string(), \"0123\");"},
{"lineNum":" 1500","line":"        assert_eq!(NaiveDate::from_ymd(12,     1, 1).format(\"%Y\").to_string(), \"0012\");"},
{"lineNum":" 1501","line":"        assert_eq!(NaiveDate::from_ymd(1,      1, 1).format(\"%Y\").to_string(), \"0001\");"},
{"lineNum":" 1502","line":"        assert_eq!(NaiveDate::from_ymd(0,      1, 1).format(\"%Y\").to_string(), \"0000\");"},
{"lineNum":" 1503","line":"        assert_eq!(NaiveDate::from_ymd(-1,     1, 1).format(\"%Y\").to_string(), \"-0001\");"},
{"lineNum":" 1504","line":"        assert_eq!(NaiveDate::from_ymd(-12,    1, 1).format(\"%Y\").to_string(), \"-0012\");"},
{"lineNum":" 1505","line":"        assert_eq!(NaiveDate::from_ymd(-123,   1, 1).format(\"%Y\").to_string(), \"-0123\");"},
{"lineNum":" 1506","line":"        assert_eq!(NaiveDate::from_ymd(-1234,  1, 1).format(\"%Y\").to_string(), \"-1234\");"},
{"lineNum":" 1507","line":"        assert_eq!(NaiveDate::from_ymd(-12345, 1, 1).format(\"%Y\").to_string(), \"-12345\");"},
{"lineNum":" 1508","line":""},
{"lineNum":" 1509","line":"        // corner cases"},
{"lineNum":" 1510","line":"        assert_eq!(NaiveDate::from_ymd(2007, 12, 31).format(\"%G,%g,%U,%W,%V\").to_string(),"},
{"lineNum":" 1511","line":"                   \"2008,08,53,53,01\");"},
{"lineNum":" 1512","line":"        assert_eq!(NaiveDate::from_ymd(2010, 1, 3).format(\"%G,%g,%U,%W,%V\").to_string(),"},
{"lineNum":" 1513","line":"                   \"2009,09,01,00,53\");"},
{"lineNum":" 1514","line":"    }"},
{"lineNum":" 1515","line":""},
{"lineNum":" 1516","line":"    #[cfg(feature = \"serde\")]"},
{"lineNum":" 1517","line":"    extern crate serde_json;"},
{"lineNum":" 1518","line":""},
{"lineNum":" 1519","line":"    #[cfg(feature = \"serde\")]"},
{"lineNum":" 1520","line":"    #[test]"},
{"lineNum":" 1521","line":"    fn test_serde_serialize() {"},
{"lineNum":" 1522","line":"        use self::serde_json::to_string;"},
{"lineNum":" 1523","line":""},
{"lineNum":" 1524","line":"        let date = NaiveDate::from_ymd(2014, 7, 24);"},
{"lineNum":" 1525","line":"        let serialized = to_string(&date).unwrap();"},
{"lineNum":" 1526","line":""},
{"lineNum":" 1527","line":"        assert_eq!(serialized, \"\\\"2014-07-24\\\"\");"},
{"lineNum":" 1528","line":"    }"},
{"lineNum":" 1529","line":""},
{"lineNum":" 1530","line":"    #[cfg(feature = \"serde\")]"},
{"lineNum":" 1531","line":"    #[test]"},
{"lineNum":" 1532","line":"    fn test_serde_deserialize() {"},
{"lineNum":" 1533","line":"        use self::serde_json::from_str;"},
{"lineNum":" 1534","line":""},
{"lineNum":" 1535","line":"        let date = NaiveDate::from_ymd(2014, 7, 24);"},
{"lineNum":" 1536","line":"        let deserialized: NaiveDate = from_str(\"\\\"2014-07-24\\\"\").unwrap();"},
{"lineNum":" 1537","line":""},
{"lineNum":" 1538","line":"        assert_eq!(deserialized, date);"},
{"lineNum":" 1539","line":"    }"},
{"lineNum":" 1540","line":"}"},
{"lineNum":" 1541","line":""},
{"lineNum":" 1542","line":"/**"},
{"lineNum":" 1543","line":" * The internal implementation of the calendar and ordinal date."},
{"lineNum":" 1544","line":" *"},
{"lineNum":" 1545","line":" * The current implementation is optimized for determining year, month, day and day of week."},
{"lineNum":" 1546","line":" * 4-bit `YearFlags` map to one of 14 possible classes of year in the Gregorian calendar,"},
{"lineNum":" 1547","line":" * which are included in every packed `NaiveDate` instance."},
{"lineNum":" 1548","line":" * The conversion between the packed calendar date (`Mdf`) and the ordinal date (`Of`) is"},
{"lineNum":" 1549","line":" * based on the moderately-sized lookup table (~1.5KB)"},
{"lineNum":" 1550","line":" * and the packed representation is chosen for the efficient lookup."},
{"lineNum":" 1551","line":" * Every internal data structure does not validate its input,"},
{"lineNum":" 1552","line":" * but the conversion keeps the valid value valid and the invalid value invalid"},
{"lineNum":" 1553","line":" * so that the user-facing `NaiveDate` can validate the input as late as possible."},
{"lineNum":" 1554","line":" */"},
{"lineNum":" 1555","line":"#[allow(dead_code)] // some internal methods have been left for consistency"},
{"lineNum":" 1556","line":"mod internals {"},
{"lineNum":" 1557","line":"    use std::{i32, fmt};"},
{"lineNum":" 1558","line":"    use num::traits::FromPrimitive;"},
{"lineNum":" 1559","line":"    use Weekday;"},
{"lineNum":" 1560","line":"    use div::{div_rem, mod_floor};"},
{"lineNum":" 1561","line":""},
{"lineNum":" 1562","line":"    /// The internal date representation. This also includes the packed `Mdf` value."},
{"lineNum":" 1563","line":"    pub type DateImpl = i32;"},
{"lineNum":" 1564","line":""},
{"lineNum":" 1565","line":"    pub const MAX_YEAR: DateImpl = i32::MAX >> 13;"},
{"lineNum":" 1566","line":"    pub const MIN_YEAR: DateImpl = i32::MIN >> 13;"},
{"lineNum":" 1567","line":""},
{"lineNum":" 1568","line":"    /// The year flags (aka the dominical letter)."},
{"lineNum":" 1569","line":"    ///"},
{"lineNum":" 1570","line":"    /// There are 14 possible classes of year in the Gregorian calendar:"},
{"lineNum":" 1571","line":"    /// common and leap years starting with Monday through Sunday."},
{"lineNum":" 1572","line":"    /// The `YearFlags` stores this information into 4 bits `abbb`,"},
{"lineNum":" 1573","line":"    /// where `a` is `1` for the common year (simplifies the `Of` validation)"},
{"lineNum":" 1574","line":"    /// and `bbb` is a non-zero `Weekday` (mapping `Mon` to 7) of the last day in the past year"},
{"lineNum":" 1575","line":"    /// (simplifies the day of week calculation from the 1-based ordinal)."},
{"lineNum":" 1576","line":"    #[derive(PartialEq, Eq, Copy, Clone)]"},
{"lineNum":" 1577","line":"    #[cfg_attr(feature = \"rustc-serialize\", derive(RustcEncodable, RustcDecodable))]"},
{"lineNum":" 1578","line":"    pub struct YearFlags(pub u8);"},
{"lineNum":" 1579","line":""},
{"lineNum":" 1580","line":"    pub const A: YearFlags = YearFlags(0o15); pub const AG: YearFlags = YearFlags(0o05);"},
{"lineNum":" 1581","line":"    pub const B: YearFlags = YearFlags(0o14); pub const BA: YearFlags = YearFlags(0o04);"},
{"lineNum":" 1582","line":"    pub const C: YearFlags = YearFlags(0o13); pub const CB: YearFlags = YearFlags(0o03);"},
{"lineNum":" 1583","line":"    pub const D: YearFlags = YearFlags(0o12); pub const DC: YearFlags = YearFlags(0o02);"},
{"lineNum":" 1584","line":"    pub const E: YearFlags = YearFlags(0o11); pub const ED: YearFlags = YearFlags(0o01);"},
{"lineNum":" 1585","line":"    pub const F: YearFlags = YearFlags(0o17); pub const FE: YearFlags = YearFlags(0o07);"},
{"lineNum":" 1586","line":"    pub const G: YearFlags = YearFlags(0o16); pub const GF: YearFlags = YearFlags(0o06);"},
{"lineNum":" 1587","line":""},
{"lineNum":" 1588","line":"    static YEAR_TO_FLAGS: [YearFlags; 400] = ["},
{"lineNum":" 1589","line":"        BA, G, F, E, DC, B, A, G, FE, D, C, B, AG, F, E, D, CB, A, G, F,"},
{"lineNum":" 1590","line":"        ED, C, B, A, GF, E, D, C, BA, G, F, E, DC, B, A, G, FE, D, C, B,"},
{"lineNum":" 1591","line":"        AG, F, E, D, CB, A, G, F, ED, C, B, A, GF, E, D, C, BA, G, F, E,"},
{"lineNum":" 1592","line":"        DC, B, A, G, FE, D, C, B, AG, F, E, D, CB, A, G, F, ED, C, B, A,"},
{"lineNum":" 1593","line":"        GF, E, D, C, BA, G, F, E, DC, B, A, G, FE, D, C, B, AG, F, E, D, // 100"},
{"lineNum":" 1594","line":"        C,  B, A, G, FE, D, C, B, AG, F, E, D, CB, A, G, F, ED, C, B, A,"},
{"lineNum":" 1595","line":"        GF, E, D, C, BA, G, F, E, DC, B, A, G, FE, D, C, B, AG, F, E, D,"},
{"lineNum":" 1596","line":"        CB, A, G, F, ED, C, B, A, GF, E, D, C, BA, G, F, E, DC, B, A, G,"},
{"lineNum":" 1597","line":"        FE, D, C, B, AG, F, E, D, CB, A, G, F, ED, C, B, A, GF, E, D, C,"},
{"lineNum":" 1598","line":"        BA, G, F, E, DC, B, A, G, FE, D, C, B, AG, F, E, D, CB, A, G, F, // 200"},
{"lineNum":" 1599","line":"        E,  D, C, B, AG, F, E, D, CB, A, G, F, ED, C, B, A, GF, E, D, C,"},
{"lineNum":" 1600","line":"        BA, G, F, E, DC, B, A, G, FE, D, C, B, AG, F, E, D, CB, A, G, F,"},
{"lineNum":" 1601","line":"        ED, C, B, A, GF, E, D, C, BA, G, F, E, DC, B, A, G, FE, D, C, B,"},
{"lineNum":" 1602","line":"        AG, F, E, D, CB, A, G, F, ED, C, B, A, GF, E, D, C, BA, G, F, E,"},
{"lineNum":" 1603","line":"        DC, B, A, G, FE, D, C, B, AG, F, E, D, CB, A, G, F, ED, C, B, A, // 300"},
{"lineNum":" 1604","line":"        G,  F, E, D, CB, A, G, F, ED, C, B, A, GF, E, D, C, BA, G, F, E,"},
{"lineNum":" 1605","line":"        DC, B, A, G, FE, D, C, B, AG, F, E, D, CB, A, G, F, ED, C, B, A,"},
{"lineNum":" 1606","line":"        GF, E, D, C, BA, G, F, E, DC, B, A, G, FE, D, C, B, AG, F, E, D,"},
{"lineNum":" 1607","line":"        CB, A, G, F, ED, C, B, A, GF, E, D, C, BA, G, F, E, DC, B, A, G,"},
{"lineNum":" 1608","line":"        FE, D, C, B, AG, F, E, D, CB, A, G, F, ED, C, B, A, GF, E, D, C, // 400"},
{"lineNum":" 1609","line":"    ];"},
{"lineNum":" 1610","line":""},
{"lineNum":" 1611","line":"    static YEAR_DELTAS: [u8; 401] = ["},
{"lineNum":" 1612","line":"         0,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,"},
{"lineNum":" 1613","line":"         5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10,"},
{"lineNum":" 1614","line":"        10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15,"},
{"lineNum":" 1615","line":"        15, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20,"},
{"lineNum":" 1616","line":"        20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, // 100"},
{"lineNum":" 1617","line":"        25, 25, 25, 25, 25, 26, 26, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 29, 29, 29,"},
{"lineNum":" 1618","line":"        29, 30, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34,"},
{"lineNum":" 1619","line":"        34, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39,"},
{"lineNum":" 1620","line":"        39, 40, 40, 40, 40, 41, 41, 41, 41, 42, 42, 42, 42, 43, 43, 43, 43, 44, 44, 44,"},
{"lineNum":" 1621","line":"        44, 45, 45, 45, 45, 46, 46, 46, 46, 47, 47, 47, 47, 48, 48, 48, 48, 49, 49, 49, // 200"},
{"lineNum":" 1622","line":"        49, 49, 49, 49, 49, 50, 50, 50, 50, 51, 51, 51, 51, 52, 52, 52, 52, 53, 53, 53,"},
{"lineNum":" 1623","line":"        53, 54, 54, 54, 54, 55, 55, 55, 55, 56, 56, 56, 56, 57, 57, 57, 57, 58, 58, 58,"},
{"lineNum":" 1624","line":"        58, 59, 59, 59, 59, 60, 60, 60, 60, 61, 61, 61, 61, 62, 62, 62, 62, 63, 63, 63,"},
{"lineNum":" 1625","line":"        63, 64, 64, 64, 64, 65, 65, 65, 65, 66, 66, 66, 66, 67, 67, 67, 67, 68, 68, 68,"},
{"lineNum":" 1626","line":"        68, 69, 69, 69, 69, 70, 70, 70, 70, 71, 71, 71, 71, 72, 72, 72, 72, 73, 73, 73, // 300"},
{"lineNum":" 1627","line":"        73, 73, 73, 73, 73, 74, 74, 74, 74, 75, 75, 75, 75, 76, 76, 76, 76, 77, 77, 77,"},
{"lineNum":" 1628","line":"        77, 78, 78, 78, 78, 79, 79, 79, 79, 80, 80, 80, 80, 81, 81, 81, 81, 82, 82, 82,"},
{"lineNum":" 1629","line":"        82, 83, 83, 83, 83, 84, 84, 84, 84, 85, 85, 85, 85, 86, 86, 86, 86, 87, 87, 87,"},
{"lineNum":" 1630","line":"        87, 88, 88, 88, 88, 89, 89, 89, 89, 90, 90, 90, 90, 91, 91, 91, 91, 92, 92, 92,"},
{"lineNum":" 1631","line":"        92, 93, 93, 93, 93, 94, 94, 94, 94, 95, 95, 95, 95, 96, 96, 96, 96, 97, 97, 97, 97 // 400+1"},
{"lineNum":" 1632","line":"    ];"},
{"lineNum":" 1633","line":""},
{"lineNum":" 1634","line":"    pub fn cycle_to_yo(cycle: u32) -> (u32, u32) {","class":"lineCov","hits":"1","order":"521",},
{"lineNum":" 1635","line":"        let (mut year_mod_400, mut ordinal0) = div_rem(cycle, 365);","class":"lineCov","hits":"1","order":"523",},
{"lineNum":" 1636","line":"        let delta = YEAR_DELTAS[year_mod_400 as usize] as u32;","class":"lineCov","hits":"1","order":"525",},
{"lineNum":" 1637","line":"        if ordinal0 < delta {","class":"lineCov","hits":"1","order":"527",},
{"lineNum":" 1638","line":"            year_mod_400 -= 1;","class":"lineNoCov","hits":"0",},
{"lineNum":" 1639","line":"            ordinal0 += 365 - YEAR_DELTAS[year_mod_400 as usize] as u32;","class":"lineNoCov","hits":"0",},
{"lineNum":" 1640","line":"        } else {"},
{"lineNum":" 1641","line":"            ordinal0 -= delta;","class":"lineCov","hits":"1","order":"529",},
{"lineNum":" 1642","line":"        }"},
{"lineNum":" 1643","line":"        (year_mod_400, ordinal0 + 1)","class":"lineCov","hits":"1","order":"532",},
{"lineNum":" 1644","line":"    }","class":"lineCov","hits":"1","order":"534",},
{"lineNum":" 1645","line":""},
{"lineNum":" 1646","line":"    pub fn yo_to_cycle(year_mod_400: u32, ordinal: u32) -> u32 {"},
{"lineNum":" 1647","line":"        year_mod_400 * 365 + YEAR_DELTAS[year_mod_400 as usize] as u32 + ordinal - 1"},
{"lineNum":" 1648","line":"    }"},
{"lineNum":" 1649","line":""},
{"lineNum":" 1650","line":"    impl YearFlags {"},
{"lineNum":" 1651","line":"        #[inline]"},
{"lineNum":" 1652","line":"        pub fn from_year(year: i32) -> YearFlags {"},
{"lineNum":" 1653","line":"            let year = mod_floor(year, 400);"},
{"lineNum":" 1654","line":"            YearFlags::from_year_mod_400(year)"},
{"lineNum":" 1655","line":"        }"},
{"lineNum":" 1656","line":""},
{"lineNum":" 1657","line":"        #[inline]"},
{"lineNum":" 1658","line":"        pub fn from_year_mod_400(year: i32) -> YearFlags {","class":"lineCov","hits":"1","order":"504",},
{"lineNum":" 1659","line":"            YEAR_TO_FLAGS[year as usize]","class":"lineCov","hits":"1","order":"506",},
{"lineNum":" 1660","line":"        }","class":"lineCov","hits":"1","order":"508",},
{"lineNum":" 1661","line":""},
{"lineNum":" 1662","line":"        #[inline]"},
{"lineNum":" 1663","line":"        pub fn ndays(&self) -> u32 {"},
{"lineNum":" 1664","line":"            let YearFlags(flags) = *self;"},
{"lineNum":" 1665","line":"            366 - (flags >> 3) as u32"},
{"lineNum":" 1666","line":"        }"},
{"lineNum":" 1667","line":""},
{"lineNum":" 1668","line":"        #[inline]"},
{"lineNum":" 1669","line":"        pub fn isoweek_delta(&self) -> u32 {"},
{"lineNum":" 1670","line":"            let YearFlags(flags) = *self;"},
{"lineNum":" 1671","line":"            let mut delta = flags as u32 & 0b111;"},
{"lineNum":" 1672","line":"            if delta < 3 { delta += 7; }"},
{"lineNum":" 1673","line":"            delta"},
{"lineNum":" 1674","line":"        }"},
{"lineNum":" 1675","line":""},
{"lineNum":" 1676","line":"        #[inline]"},
{"lineNum":" 1677","line":"        pub fn nisoweeks(&self) -> u32 {"},
{"lineNum":" 1678","line":"            let YearFlags(flags) = *self;"},
{"lineNum":" 1679","line":"            52 + ((0b00000100_00000110 >> flags as usize) & 1)"},
{"lineNum":" 1680","line":"        }"},
{"lineNum":" 1681","line":"    }"},
{"lineNum":" 1682","line":""},
{"lineNum":" 1683","line":"    impl fmt::Debug for YearFlags {"},
{"lineNum":" 1684","line":"        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"},
{"lineNum":" 1685","line":"            let YearFlags(flags) = *self;"},
{"lineNum":" 1686","line":"            match flags {"},
{"lineNum":" 1687","line":"                0o15 => \"A\".fmt(f),  0o05 => \"AG\".fmt(f),"},
{"lineNum":" 1688","line":"                0o14 => \"B\".fmt(f),  0o04 => \"BA\".fmt(f),"},
{"lineNum":" 1689","line":"                0o13 => \"C\".fmt(f),  0o03 => \"CB\".fmt(f),"},
{"lineNum":" 1690","line":"                0o12 => \"D\".fmt(f),  0o02 => \"DC\".fmt(f),"},
{"lineNum":" 1691","line":"                0o11 => \"E\".fmt(f),  0o01 => \"ED\".fmt(f),"},
{"lineNum":" 1692","line":"                0o10 => \"F?\".fmt(f), 0o00 => \"FE?\".fmt(f), // non-canonical"},
{"lineNum":" 1693","line":"                0o17 => \"F\".fmt(f),  0o07 => \"FE\".fmt(f),"},
{"lineNum":" 1694","line":"                0o16 => \"G\".fmt(f),  0o06 => \"GF\".fmt(f),"},
{"lineNum":" 1695","line":"                _ => write!(f, \"YearFlags({})\", flags),"},
{"lineNum":" 1696","line":"            }"},
{"lineNum":" 1697","line":"        }"},
{"lineNum":" 1698","line":"    }"},
{"lineNum":" 1699","line":""},
{"lineNum":" 1700","line":"    pub const MIN_OL: u32 = 1 << 1;"},
{"lineNum":" 1701","line":"    pub const MAX_OL: u32 = 366 << 1; // larger than the non-leap last day `(365 << 1) | 1`"},
{"lineNum":" 1702","line":"    pub const MIN_MDL: u32 = (1 << 6) | (1 << 1);"},
{"lineNum":" 1703","line":"    pub const MAX_MDL: u32 = (12 << 6) | (31 << 1) | 1;"},
{"lineNum":" 1704","line":""},
{"lineNum":" 1705","line":"    const XX: i8 = -128;"},
{"lineNum":" 1706","line":"    static MDL_TO_OL: [i8; (MAX_MDL as usize + 1)] = ["},
{"lineNum":" 1707","line":"         XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX,"},
{"lineNum":" 1708","line":"         XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX,"},
{"lineNum":" 1709","line":"         XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX,"},
{"lineNum":" 1710","line":"         XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, // 0"},
{"lineNum":" 1711","line":"         XX, XX, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,"},
{"lineNum":" 1712","line":"         64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,"},
{"lineNum":" 1713","line":"         64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,"},
{"lineNum":" 1714","line":"         64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, // 1"},
{"lineNum":" 1715","line":"         XX, XX, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66,"},
{"lineNum":" 1716","line":"         66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66,"},
{"lineNum":" 1717","line":"         66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66,"},
{"lineNum":" 1718","line":"         66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, XX, XX, XX, XX, XX, // 2"},
{"lineNum":" 1719","line":"         XX, XX, 72, 74, 72, 74, 72, 74, 72, 74, 72, 74, 72, 74, 72, 74,"},
{"lineNum":" 1720","line":"         72, 74, 72, 74, 72, 74, 72, 74, 72, 74, 72, 74, 72, 74, 72, 74,"},
{"lineNum":" 1721","line":"         72, 74, 72, 74, 72, 74, 72, 74, 72, 74, 72, 74, 72, 74, 72, 74,"},
{"lineNum":" 1722","line":"         72, 74, 72, 74, 72, 74, 72, 74, 72, 74, 72, 74, 72, 74, 72, 74, // 3"},
{"lineNum":" 1723","line":"         XX, XX, 74, 76, 74, 76, 74, 76, 74, 76, 74, 76, 74, 76, 74, 76,"},
{"lineNum":" 1724","line":"         74, 76, 74, 76, 74, 76, 74, 76, 74, 76, 74, 76, 74, 76, 74, 76,"},
{"lineNum":" 1725","line":"         74, 76, 74, 76, 74, 76, 74, 76, 74, 76, 74, 76, 74, 76, 74, 76,"},
{"lineNum":" 1726","line":"         74, 76, 74, 76, 74, 76, 74, 76, 74, 76, 74, 76, 74, 76, XX, XX, // 4"},
{"lineNum":" 1727","line":"         XX, XX, 78, 80, 78, 80, 78, 80, 78, 80, 78, 80, 78, 80, 78, 80,"},
{"lineNum":" 1728","line":"         78, 80, 78, 80, 78, 80, 78, 80, 78, 80, 78, 80, 78, 80, 78, 80,"},
{"lineNum":" 1729","line":"         78, 80, 78, 80, 78, 80, 78, 80, 78, 80, 78, 80, 78, 80, 78, 80,"},
{"lineNum":" 1730","line":"         78, 80, 78, 80, 78, 80, 78, 80, 78, 80, 78, 80, 78, 80, 78, 80, // 5"},
{"lineNum":" 1731","line":"         XX, XX, 80, 82, 80, 82, 80, 82, 80, 82, 80, 82, 80, 82, 80, 82,"},
{"lineNum":" 1732","line":"         80, 82, 80, 82, 80, 82, 80, 82, 80, 82, 80, 82, 80, 82, 80, 82,"},
{"lineNum":" 1733","line":"         80, 82, 80, 82, 80, 82, 80, 82, 80, 82, 80, 82, 80, 82, 80, 82,"},
{"lineNum":" 1734","line":"         80, 82, 80, 82, 80, 82, 80, 82, 80, 82, 80, 82, 80, 82, XX, XX, // 6"},
{"lineNum":" 1735","line":"         XX, XX, 84, 86, 84, 86, 84, 86, 84, 86, 84, 86, 84, 86, 84, 86,"},
{"lineNum":" 1736","line":"         84, 86, 84, 86, 84, 86, 84, 86, 84, 86, 84, 86, 84, 86, 84, 86,"},
{"lineNum":" 1737","line":"         84, 86, 84, 86, 84, 86, 84, 86, 84, 86, 84, 86, 84, 86, 84, 86,"},
{"lineNum":" 1738","line":"         84, 86, 84, 86, 84, 86, 84, 86, 84, 86, 84, 86, 84, 86, 84, 86, // 7"},
{"lineNum":" 1739","line":"         XX, XX, 86, 88, 86, 88, 86, 88, 86, 88, 86, 88, 86, 88, 86, 88,"},
{"lineNum":" 1740","line":"         86, 88, 86, 88, 86, 88, 86, 88, 86, 88, 86, 88, 86, 88, 86, 88,"},
{"lineNum":" 1741","line":"         86, 88, 86, 88, 86, 88, 86, 88, 86, 88, 86, 88, 86, 88, 86, 88,"},
{"lineNum":" 1742","line":"         86, 88, 86, 88, 86, 88, 86, 88, 86, 88, 86, 88, 86, 88, 86, 88, // 8"},
{"lineNum":" 1743","line":"         XX, XX, 88, 90, 88, 90, 88, 90, 88, 90, 88, 90, 88, 90, 88, 90,"},
{"lineNum":" 1744","line":"         88, 90, 88, 90, 88, 90, 88, 90, 88, 90, 88, 90, 88, 90, 88, 90,"},
{"lineNum":" 1745","line":"         88, 90, 88, 90, 88, 90, 88, 90, 88, 90, 88, 90, 88, 90, 88, 90,"},
{"lineNum":" 1746","line":"         88, 90, 88, 90, 88, 90, 88, 90, 88, 90, 88, 90, 88, 90, XX, XX, // 9"},
{"lineNum":" 1747","line":"         XX, XX, 92, 94, 92, 94, 92, 94, 92, 94, 92, 94, 92, 94, 92, 94,"},
{"lineNum":" 1748","line":"         92, 94, 92, 94, 92, 94, 92, 94, 92, 94, 92, 94, 92, 94, 92, 94,"},
{"lineNum":" 1749","line":"         92, 94, 92, 94, 92, 94, 92, 94, 92, 94, 92, 94, 92, 94, 92, 94,"},
{"lineNum":" 1750","line":"         92, 94, 92, 94, 92, 94, 92, 94, 92, 94, 92, 94, 92, 94, 92, 94, // 10"},
{"lineNum":" 1751","line":"         XX, XX, 94, 96, 94, 96, 94, 96, 94, 96, 94, 96, 94, 96, 94, 96,"},
{"lineNum":" 1752","line":"         94, 96, 94, 96, 94, 96, 94, 96, 94, 96, 94, 96, 94, 96, 94, 96,"},
{"lineNum":" 1753","line":"         94, 96, 94, 96, 94, 96, 94, 96, 94, 96, 94, 96, 94, 96, 94, 96,"},
{"lineNum":" 1754","line":"         94, 96, 94, 96, 94, 96, 94, 96, 94, 96, 94, 96, 94, 96, XX, XX, // 11"},
{"lineNum":" 1755","line":"         XX, XX, 98,100, 98,100, 98,100, 98,100, 98,100, 98,100, 98,100,"},
{"lineNum":" 1756","line":"         98,100, 98,100, 98,100, 98,100, 98,100, 98,100, 98,100, 98,100,"},
{"lineNum":" 1757","line":"         98,100, 98,100, 98,100, 98,100, 98,100, 98,100, 98,100, 98,100,"},
{"lineNum":" 1758","line":"         98,100, 98,100, 98,100, 98,100, 98,100, 98,100, 98,100, 98,100, // 12"},
{"lineNum":" 1759","line":"    ];"},
{"lineNum":" 1760","line":""},
{"lineNum":" 1761","line":"    static OL_TO_MDL: [u8; (MAX_OL as usize + 1)] = ["},
{"lineNum":" 1762","line":"          0,  0,                                                         // 0"},
{"lineNum":" 1763","line":"         64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,"},
{"lineNum":" 1764","line":"         64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,"},
{"lineNum":" 1765","line":"         64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,"},
{"lineNum":" 1766","line":"         64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,         // 1"},
{"lineNum":" 1767","line":"         66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66,"},
{"lineNum":" 1768","line":"         66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66,"},
{"lineNum":" 1769","line":"         66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66,"},
{"lineNum":" 1770","line":"         66, 66, 66, 66, 66, 66, 66, 66, 66,                             // 2"},
{"lineNum":" 1771","line":"             74, 72, 74, 72, 74, 72, 74, 72, 74, 72, 74, 72, 74, 72, 74,"},
{"lineNum":" 1772","line":"         72, 74, 72, 74, 72, 74, 72, 74, 72, 74, 72, 74, 72, 74, 72, 74,"},
{"lineNum":" 1773","line":"         72, 74, 72, 74, 72, 74, 72, 74, 72, 74, 72, 74, 72, 74, 72, 74,"},
{"lineNum":" 1774","line":"         72, 74, 72, 74, 72, 74, 72, 74, 72, 74, 72, 74, 72, 74, 72,     // 3"},
{"lineNum":" 1775","line":"             76, 74, 76, 74, 76, 74, 76, 74, 76, 74, 76, 74, 76, 74, 76,"},
{"lineNum":" 1776","line":"         74, 76, 74, 76, 74, 76, 74, 76, 74, 76, 74, 76, 74, 76, 74, 76,"},
{"lineNum":" 1777","line":"         74, 76, 74, 76, 74, 76, 74, 76, 74, 76, 74, 76, 74, 76, 74, 76,"},
{"lineNum":" 1778","line":"         74, 76, 74, 76, 74, 76, 74, 76, 74, 76, 74, 76, 74,             // 4"},
{"lineNum":" 1779","line":"             80, 78, 80, 78, 80, 78, 80, 78, 80, 78, 80, 78, 80, 78, 80,"},
{"lineNum":" 1780","line":"         78, 80, 78, 80, 78, 80, 78, 80, 78, 80, 78, 80, 78, 80, 78, 80,"},
{"lineNum":" 1781","line":"         78, 80, 78, 80, 78, 80, 78, 80, 78, 80, 78, 80, 78, 80, 78, 80,"},
{"lineNum":" 1782","line":"         78, 80, 78, 80, 78, 80, 78, 80, 78, 80, 78, 80, 78, 80, 78,     // 5"},
{"lineNum":" 1783","line":"             82, 80, 82, 80, 82, 80, 82, 80, 82, 80, 82, 80, 82, 80, 82,"},
{"lineNum":" 1784","line":"         80, 82, 80, 82, 80, 82, 80, 82, 80, 82, 80, 82, 80, 82, 80, 82,"},
{"lineNum":" 1785","line":"         80, 82, 80, 82, 80, 82, 80, 82, 80, 82, 80, 82, 80, 82, 80, 82,"},
{"lineNum":" 1786","line":"         80, 82, 80, 82, 80, 82, 80, 82, 80, 82, 80, 82, 80,             // 6"},
{"lineNum":" 1787","line":"             86, 84, 86, 84, 86, 84, 86, 84, 86, 84, 86, 84, 86, 84, 86,"},
{"lineNum":" 1788","line":"         84, 86, 84, 86, 84, 86, 84, 86, 84, 86, 84, 86, 84, 86, 84, 86,"},
{"lineNum":" 1789","line":"         84, 86, 84, 86, 84, 86, 84, 86, 84, 86, 84, 86, 84, 86, 84, 86,"},
{"lineNum":" 1790","line":"         84, 86, 84, 86, 84, 86, 84, 86, 84, 86, 84, 86, 84, 86, 84,     // 7"},
{"lineNum":" 1791","line":"             88, 86, 88, 86, 88, 86, 88, 86, 88, 86, 88, 86, 88, 86, 88,"},
{"lineNum":" 1792","line":"         86, 88, 86, 88, 86, 88, 86, 88, 86, 88, 86, 88, 86, 88, 86, 88,"},
{"lineNum":" 1793","line":"         86, 88, 86, 88, 86, 88, 86, 88, 86, 88, 86, 88, 86, 88, 86, 88,"},
{"lineNum":" 1794","line":"         86, 88, 86, 88, 86, 88, 86, 88, 86, 88, 86, 88, 86, 88, 86,     // 8"},
{"lineNum":" 1795","line":"             90, 88, 90, 88, 90, 88, 90, 88, 90, 88, 90, 88, 90, 88, 90,"},
{"lineNum":" 1796","line":"         88, 90, 88, 90, 88, 90, 88, 90, 88, 90, 88, 90, 88, 90, 88, 90,"},
{"lineNum":" 1797","line":"         88, 90, 88, 90, 88, 90, 88, 90, 88, 90, 88, 90, 88, 90, 88, 90,"},
{"lineNum":" 1798","line":"         88, 90, 88, 90, 88, 90, 88, 90, 88, 90, 88, 90, 88,             // 9"},
{"lineNum":" 1799","line":"             94, 92, 94, 92, 94, 92, 94, 92, 94, 92, 94, 92, 94, 92, 94,"},
{"lineNum":" 1800","line":"         92, 94, 92, 94, 92, 94, 92, 94, 92, 94, 92, 94, 92, 94, 92, 94,"},
{"lineNum":" 1801","line":"         92, 94, 92, 94, 92, 94, 92, 94, 92, 94, 92, 94, 92, 94, 92, 94,"},
{"lineNum":" 1802","line":"         92, 94, 92, 94, 92, 94, 92, 94, 92, 94, 92, 94, 92, 94, 92,     // 10"},
{"lineNum":" 1803","line":"             96, 94, 96, 94, 96, 94, 96, 94, 96, 94, 96, 94, 96, 94, 96,"},
{"lineNum":" 1804","line":"         94, 96, 94, 96, 94, 96, 94, 96, 94, 96, 94, 96, 94, 96, 94, 96,"},
{"lineNum":" 1805","line":"         94, 96, 94, 96, 94, 96, 94, 96, 94, 96, 94, 96, 94, 96, 94, 96,"},
{"lineNum":" 1806","line":"         94, 96, 94, 96, 94, 96, 94, 96, 94, 96, 94, 96, 94,             // 11"},
{"lineNum":" 1807","line":"            100, 98,100, 98,100, 98,100, 98,100, 98,100, 98,100, 98,100,"},
{"lineNum":" 1808","line":"         98,100, 98,100, 98,100, 98,100, 98,100, 98,100, 98,100, 98,100,"},
{"lineNum":" 1809","line":"         98,100, 98,100, 98,100, 98,100, 98,100, 98,100, 98,100, 98,100,"},
{"lineNum":" 1810","line":"         98,100, 98,100, 98,100, 98,100, 98,100, 98,100, 98,100, 98,     // 12"},
{"lineNum":" 1811","line":"    ];"},
{"lineNum":" 1812","line":""},
{"lineNum":" 1813","line":"    /// Ordinal (day of year) and year flags: `(ordinal << 4) | flags`."},
{"lineNum":" 1814","line":"    ///"},
{"lineNum":" 1815","line":"    /// The whole bits except for the least 3 bits are referred as `Ol` (ordinal and leap flag),"},
{"lineNum":" 1816","line":"    /// which is an index to the `OL_TO_MDL` lookup table."},
{"lineNum":" 1817","line":"    #[derive(PartialEq, PartialOrd, Copy, Clone)]"},
{"lineNum":" 1818","line":"    #[cfg_attr(feature = \"rustc-serialize\", derive(RustcEncodable, RustcDecodable))]"},
{"lineNum":" 1819","line":"    pub struct Of(pub u32);"},
{"lineNum":" 1820","line":""},
{"lineNum":" 1821","line":"    impl Of {"},
{"lineNum":" 1822","line":"        #[inline]"},
{"lineNum":" 1823","line":"        fn clamp_ordinal(ordinal: u32) -> u32 {","class":"lineCov","hits":"1","order":"522",},
{"lineNum":" 1824","line":"            if ordinal > 366 {0} else {ordinal}","class":"lineCov","hits":"1","order":"524",},
{"lineNum":" 1825","line":"        }","class":"lineCov","hits":"1","order":"526",},
{"lineNum":" 1826","line":""},
{"lineNum":" 1827","line":"        #[inline]"},
{"lineNum":" 1828","line":"        pub fn new(ordinal: u32, YearFlags(flags): YearFlags) -> Of {","class":"lineCov","hits":"1","order":"528",},
{"lineNum":" 1829","line":"            let ordinal = Of::clamp_ordinal(ordinal);","class":"lineCov","hits":"1","order":"530",},
{"lineNum":" 1830","line":"            Of((ordinal << 4) | (flags as u32))","class":"lineCov","hits":"1","order":"531",},
{"lineNum":" 1831","line":"        }","class":"lineCov","hits":"1","order":"533",},
{"lineNum":" 1832","line":""},
{"lineNum":" 1833","line":"        #[inline]"},
{"lineNum":" 1834","line":"        pub fn from_mdf(Mdf(mdf): Mdf) -> Of {"},
{"lineNum":" 1835","line":"            let mdl = mdf >> 3;"},
{"lineNum":" 1836","line":"            match MDL_TO_OL.get(mdl as usize) {"},
{"lineNum":" 1837","line":"                Some(&v) => Of(mdf.wrapping_sub((v as i32 as u32 & 0x3ff) << 3)),"},
{"lineNum":" 1838","line":"                None => Of(0)"},
{"lineNum":" 1839","line":"            }"},
{"lineNum":" 1840","line":"        }"},
{"lineNum":" 1841","line":""},
{"lineNum":" 1842","line":"        #[inline]"},
{"lineNum":" 1843","line":"        pub fn valid(&self) -> bool {","class":"lineCov","hits":"1","order":"501",},
{"lineNum":" 1844","line":"            let Of(of) = *self;","class":"lineCov","hits":"1","order":"502",},
{"lineNum":" 1845","line":"            let ol = of >> 3;","class":"lineCov","hits":"1","order":"503",},
{"lineNum":" 1846","line":"            MIN_OL <= ol && ol <= MAX_OL","class":"lineCov","hits":"1","order":"505",},
{"lineNum":" 1847","line":"        }","class":"lineCov","hits":"1","order":"507",},
{"lineNum":" 1848","line":""},
{"lineNum":" 1849","line":"        #[inline]"},
{"lineNum":" 1850","line":"        pub fn ordinal(&self) -> u32 {"},
{"lineNum":" 1851","line":"            let Of(of) = *self;"},
{"lineNum":" 1852","line":"            of >> 4"},
{"lineNum":" 1853","line":"        }"},
{"lineNum":" 1854","line":""},
{"lineNum":" 1855","line":"        #[inline]"},
{"lineNum":" 1856","line":"        pub fn with_ordinal(&self, ordinal: u32) -> Of {"},
{"lineNum":" 1857","line":"            let ordinal = Of::clamp_ordinal(ordinal);"},
{"lineNum":" 1858","line":"            let Of(of) = *self;"},
{"lineNum":" 1859","line":"            Of((of & 0b1111) | (ordinal << 4))"},
{"lineNum":" 1860","line":"        }"},
{"lineNum":" 1861","line":""},
{"lineNum":" 1862","line":"        #[inline]"},
{"lineNum":" 1863","line":"        pub fn flags(&self) -> YearFlags {"},
{"lineNum":" 1864","line":"            let Of(of) = *self;"},
{"lineNum":" 1865","line":"            YearFlags((of & 0b1111) as u8)"},
{"lineNum":" 1866","line":"        }"},
{"lineNum":" 1867","line":""},
{"lineNum":" 1868","line":"        #[inline]"},
{"lineNum":" 1869","line":"        pub fn with_flags(&self, YearFlags(flags): YearFlags) -> Of {"},
{"lineNum":" 1870","line":"            let Of(of) = *self;"},
{"lineNum":" 1871","line":"            Of((of & !0b1111) | (flags as u32))"},
{"lineNum":" 1872","line":"        }"},
{"lineNum":" 1873","line":""},
{"lineNum":" 1874","line":"        #[inline]"},
{"lineNum":" 1875","line":"        pub fn weekday(&self) -> Weekday {"},
{"lineNum":" 1876","line":"            let Of(of) = *self;"},
{"lineNum":" 1877","line":"            Weekday::from_u32(((of >> 4) + (of & 0b111)) % 7).unwrap()"},
{"lineNum":" 1878","line":"        }"},
{"lineNum":" 1879","line":""},
{"lineNum":" 1880","line":"        #[inline]"},
{"lineNum":" 1881","line":"        pub fn isoweekdate_raw(&self) -> (u32, Weekday) {"},
{"lineNum":" 1882","line":"            // week ordinal = ordinal + delta"},
{"lineNum":" 1883","line":"            let Of(of) = *self;"},
{"lineNum":" 1884","line":"            let weekord = (of >> 4).wrapping_add(self.flags().isoweek_delta());"},
{"lineNum":" 1885","line":"            (weekord / 7, Weekday::from_u32(weekord % 7).unwrap())"},
{"lineNum":" 1886","line":"        }"},
{"lineNum":" 1887","line":""},
{"lineNum":" 1888","line":"        #[inline]"},
{"lineNum":" 1889","line":"        pub fn to_mdf(&self) -> Mdf {"},
{"lineNum":" 1890","line":"            Mdf::from_of(*self)"},
{"lineNum":" 1891","line":"        }"},
{"lineNum":" 1892","line":""},
{"lineNum":" 1893","line":"        #[inline]"},
{"lineNum":" 1894","line":"        pub fn succ(&self) -> Of {"},
{"lineNum":" 1895","line":"            let Of(of) = *self;"},
{"lineNum":" 1896","line":"            Of(of + (1 << 4))"},
{"lineNum":" 1897","line":"        }"},
{"lineNum":" 1898","line":""},
{"lineNum":" 1899","line":"        #[inline]"},
{"lineNum":" 1900","line":"        pub fn pred(&self) -> Of {"},
{"lineNum":" 1901","line":"            let Of(of) = *self;"},
{"lineNum":" 1902","line":"            Of(of - (1 << 4))"},
{"lineNum":" 1903","line":"        }"},
{"lineNum":" 1904","line":"    }"},
{"lineNum":" 1905","line":""},
{"lineNum":" 1906","line":"    impl fmt::Debug for Of {"},
{"lineNum":" 1907","line":"        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"},
{"lineNum":" 1908","line":"            let Of(of) = *self;"},
{"lineNum":" 1909","line":"            write!(f, \"Of(({} << 4) | {:#04o} /*{:?}*/)\","},
{"lineNum":" 1910","line":"                   of >> 4, of & 0b1111, YearFlags((of & 0b1111) as u8))"},
{"lineNum":" 1911","line":"        }"},
{"lineNum":" 1912","line":"    }"},
{"lineNum":" 1913","line":""},
{"lineNum":" 1914","line":"    /// Month, day of month and year flags: `(month << 9) | (day << 4) | flags`"},
{"lineNum":" 1915","line":"    ///"},
{"lineNum":" 1916","line":"    /// The whole bits except for the least 3 bits are referred as `Mdl`"},
{"lineNum":" 1917","line":"    /// (month, day of month and leap flag),"},
{"lineNum":" 1918","line":"    /// which is an index to the `MDL_TO_OL` lookup table."},
{"lineNum":" 1919","line":"    #[derive(PartialEq, PartialOrd, Copy, Clone)]"},
{"lineNum":" 1920","line":"    #[cfg_attr(feature = \"rustc-serialize\", derive(RustcEncodable, RustcDecodable))]"},
{"lineNum":" 1921","line":"    pub struct Mdf(pub u32);"},
{"lineNum":" 1922","line":""},
{"lineNum":" 1923","line":"    impl Mdf {"},
{"lineNum":" 1924","line":"        #[inline]"},
{"lineNum":" 1925","line":"        fn clamp_month(month: u32) -> u32 {"},
{"lineNum":" 1926","line":"            if month > 12 {0} else {month}"},
{"lineNum":" 1927","line":"        }"},
{"lineNum":" 1928","line":""},
{"lineNum":" 1929","line":"        #[inline]"},
{"lineNum":" 1930","line":"        fn clamp_day(day: u32) -> u32 {"},
{"lineNum":" 1931","line":"            if day > 31 {0} else {day}"},
{"lineNum":" 1932","line":"        }"},
{"lineNum":" 1933","line":""},
{"lineNum":" 1934","line":"        #[inline]"},
{"lineNum":" 1935","line":"        pub fn new(month: u32, day: u32, YearFlags(flags): YearFlags) -> Mdf {"},
{"lineNum":" 1936","line":"            let month = Mdf::clamp_month(month);"},
{"lineNum":" 1937","line":"            let day = Mdf::clamp_day(day);"},
{"lineNum":" 1938","line":"            Mdf((month << 9) | (day << 4) | (flags as u32))"},
{"lineNum":" 1939","line":"        }"},
{"lineNum":" 1940","line":""},
{"lineNum":" 1941","line":"        #[inline]"},
{"lineNum":" 1942","line":"        pub fn from_of(Of(of): Of) -> Mdf {"},
{"lineNum":" 1943","line":"            let ol = of >> 3;"},
{"lineNum":" 1944","line":"            match OL_TO_MDL.get(ol as usize) {"},
{"lineNum":" 1945","line":"                Some(&v) => Mdf(of + ((v as u32) << 3)),"},
{"lineNum":" 1946","line":"                None => Mdf(0)"},
{"lineNum":" 1947","line":"            }"},
{"lineNum":" 1948","line":"        }"},
{"lineNum":" 1949","line":""},
{"lineNum":" 1950","line":"        #[inline]"},
{"lineNum":" 1951","line":"        pub fn valid(&self) -> bool {"},
{"lineNum":" 1952","line":"            let Mdf(mdf) = *self;"},
{"lineNum":" 1953","line":"            let mdl = mdf >> 3;"},
{"lineNum":" 1954","line":"            match MDL_TO_OL.get(mdl as usize) {"},
{"lineNum":" 1955","line":"                Some(&v) => v >= 0,"},
{"lineNum":" 1956","line":"                None => false"},
{"lineNum":" 1957","line":"            }"},
{"lineNum":" 1958","line":"        }"},
{"lineNum":" 1959","line":""},
{"lineNum":" 1960","line":"        #[inline]"},
{"lineNum":" 1961","line":"        pub fn month(&self) -> u32 {"},
{"lineNum":" 1962","line":"            let Mdf(mdf) = *self;"},
{"lineNum":" 1963","line":"            mdf >> 9"},
{"lineNum":" 1964","line":"        }"},
{"lineNum":" 1965","line":""},
{"lineNum":" 1966","line":"        #[inline]"},
{"lineNum":" 1967","line":"        pub fn with_month(&self, month: u32) -> Mdf {"},
{"lineNum":" 1968","line":"            let month = Mdf::clamp_month(month);"},
{"lineNum":" 1969","line":"            let Mdf(mdf) = *self;"},
{"lineNum":" 1970","line":"            Mdf((mdf & 0b11111_1111) | (month << 9))"},
{"lineNum":" 1971","line":"        }"},
{"lineNum":" 1972","line":""},
{"lineNum":" 1973","line":"        #[inline]"},
{"lineNum":" 1974","line":"        pub fn day(&self) -> u32 {"},
{"lineNum":" 1975","line":"            let Mdf(mdf) = *self;"},
{"lineNum":" 1976","line":"            (mdf >> 4) & 0b11111"},
{"lineNum":" 1977","line":"        }"},
{"lineNum":" 1978","line":""},
{"lineNum":" 1979","line":"        #[inline]"},
{"lineNum":" 1980","line":"        pub fn with_day(&self, day: u32) -> Mdf {"},
{"lineNum":" 1981","line":"            let day = Mdf::clamp_day(day);"},
{"lineNum":" 1982","line":"            let Mdf(mdf) = *self;"},
{"lineNum":" 1983","line":"            Mdf((mdf & !0b11111_0000) | (day << 4))"},
{"lineNum":" 1984","line":"        }"},
{"lineNum":" 1985","line":""},
{"lineNum":" 1986","line":"        #[inline]"},
{"lineNum":" 1987","line":"        pub fn flags(&self) -> YearFlags {"},
{"lineNum":" 1988","line":"            let Mdf(mdf) = *self;"},
{"lineNum":" 1989","line":"            YearFlags((mdf & 0b1111) as u8)"},
{"lineNum":" 1990","line":"        }"},
{"lineNum":" 1991","line":""},
{"lineNum":" 1992","line":"        #[inline]"},
{"lineNum":" 1993","line":"        pub fn with_flags(&self, YearFlags(flags): YearFlags) -> Mdf {"},
{"lineNum":" 1994","line":"            let Mdf(mdf) = *self;"},
{"lineNum":" 1995","line":"            Mdf((mdf & !0b1111) | (flags as u32))"},
{"lineNum":" 1996","line":"        }"},
{"lineNum":" 1997","line":""},
{"lineNum":" 1998","line":"        #[inline]"},
{"lineNum":" 1999","line":"        pub fn to_of(&self) -> Of {"},
{"lineNum":" 2000","line":"            Of::from_mdf(*self)"},
{"lineNum":" 2001","line":"        }"},
{"lineNum":" 2002","line":"    }"},
{"lineNum":" 2003","line":""},
{"lineNum":" 2004","line":"    impl fmt::Debug for Mdf {"},
{"lineNum":" 2005","line":"        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"},
{"lineNum":" 2006","line":"            let Mdf(mdf) = *self;"},
{"lineNum":" 2007","line":"            write!(f, \"Mdf(({} << 9) | ({} << 4) | {:#04o} /*{:?}*/)\","},
{"lineNum":" 2008","line":"                   mdf >> 9, (mdf >> 4) & 0b11111, mdf & 0b1111, YearFlags((mdf & 0b1111) as u8))"},
{"lineNum":" 2009","line":"        }"},
{"lineNum":" 2010","line":"    }"},
{"lineNum":" 2011","line":""},
{"lineNum":" 2012","line":"    #[cfg(test)]"},
{"lineNum":" 2013","line":"    mod tests {"},
{"lineNum":" 2014","line":"        #[cfg(bench)] extern crate test;"},
{"lineNum":" 2015","line":""},
{"lineNum":" 2016","line":"        use Weekday;"},
{"lineNum":" 2017","line":"        use super::{Of, Mdf};"},
{"lineNum":" 2018","line":"        use super::{YearFlags, A, B, C, D, E, F, G, AG, BA, CB, DC, ED, FE, GF};"},
{"lineNum":" 2019","line":"        use num::iter::range_inclusive;"},
{"lineNum":" 2020","line":"        use std::u32;"},
{"lineNum":" 2021","line":""},
{"lineNum":" 2022","line":"        const NONLEAP_FLAGS: [YearFlags; 7] = [A, B, C, D, E, F, G];"},
{"lineNum":" 2023","line":"        const LEAP_FLAGS: [YearFlags; 7] = [AG, BA, CB, DC, ED, FE, GF];"},
{"lineNum":" 2024","line":"        const FLAGS: [YearFlags; 14] = [A, B, C, D, E, F, G, AG, BA, CB, DC, ED, FE, GF];"},
{"lineNum":" 2025","line":""},
{"lineNum":" 2026","line":"        #[test]"},
{"lineNum":" 2027","line":"        fn test_year_flags_ndays_from_year() {"},
{"lineNum":" 2028","line":"            assert_eq!(YearFlags::from_year(2014).ndays(), 365);"},
{"lineNum":" 2029","line":"            assert_eq!(YearFlags::from_year(2012).ndays(), 366);"},
{"lineNum":" 2030","line":"            assert_eq!(YearFlags::from_year(2000).ndays(), 366);"},
{"lineNum":" 2031","line":"            assert_eq!(YearFlags::from_year(1900).ndays(), 365);"},
{"lineNum":" 2032","line":"            assert_eq!(YearFlags::from_year(1600).ndays(), 366);"},
{"lineNum":" 2033","line":"            assert_eq!(YearFlags::from_year(   1).ndays(), 365);"},
{"lineNum":" 2034","line":"            assert_eq!(YearFlags::from_year(   0).ndays(), 366); // 1 BCE (proleptic Gregorian)"},
{"lineNum":" 2035","line":"            assert_eq!(YearFlags::from_year(  -1).ndays(), 365); // 2 BCE"},
{"lineNum":" 2036","line":"            assert_eq!(YearFlags::from_year(  -4).ndays(), 366); // 5 BCE"},
{"lineNum":" 2037","line":"            assert_eq!(YearFlags::from_year( -99).ndays(), 365); // 100 BCE"},
{"lineNum":" 2038","line":"            assert_eq!(YearFlags::from_year(-100).ndays(), 365); // 101 BCE"},
{"lineNum":" 2039","line":"            assert_eq!(YearFlags::from_year(-399).ndays(), 365); // 400 BCE"},
{"lineNum":" 2040","line":"            assert_eq!(YearFlags::from_year(-400).ndays(), 366); // 401 BCE"},
{"lineNum":" 2041","line":"        }"},
{"lineNum":" 2042","line":""},
{"lineNum":" 2043","line":"        #[test]"},
{"lineNum":" 2044","line":"        fn test_year_flags_nisoweeks() {"},
{"lineNum":" 2045","line":"            assert_eq!(A.nisoweeks(), 52);"},
{"lineNum":" 2046","line":"            assert_eq!(B.nisoweeks(), 52);"},
{"lineNum":" 2047","line":"            assert_eq!(C.nisoweeks(), 52);"},
{"lineNum":" 2048","line":"            assert_eq!(D.nisoweeks(), 53);"},
{"lineNum":" 2049","line":"            assert_eq!(E.nisoweeks(), 52);"},
{"lineNum":" 2050","line":"            assert_eq!(F.nisoweeks(), 52);"},
{"lineNum":" 2051","line":"            assert_eq!(G.nisoweeks(), 52);"},
{"lineNum":" 2052","line":"            assert_eq!(AG.nisoweeks(), 52);"},
{"lineNum":" 2053","line":"            assert_eq!(BA.nisoweeks(), 52);"},
{"lineNum":" 2054","line":"            assert_eq!(CB.nisoweeks(), 52);"},
{"lineNum":" 2055","line":"            assert_eq!(DC.nisoweeks(), 53);"},
{"lineNum":" 2056","line":"            assert_eq!(ED.nisoweeks(), 53);"},
{"lineNum":" 2057","line":"            assert_eq!(FE.nisoweeks(), 52);"},
{"lineNum":" 2058","line":"            assert_eq!(GF.nisoweeks(), 52);"},
{"lineNum":" 2059","line":"        }"},
{"lineNum":" 2060","line":""},
{"lineNum":" 2061","line":"        #[cfg(bench)]"},
{"lineNum":" 2062","line":"        #[bench]"},
{"lineNum":" 2063","line":"        fn bench_year_flags_from_year(bh: &mut test::Bencher) {"},
{"lineNum":" 2064","line":"            bh.iter(|| {"},
{"lineNum":" 2065","line":"                for year in -999i32..1000 {"},
{"lineNum":" 2066","line":"                    YearFlags::from_year(year);"},
{"lineNum":" 2067","line":"                }"},
{"lineNum":" 2068","line":"            });"},
{"lineNum":" 2069","line":"        }"},
{"lineNum":" 2070","line":""},
{"lineNum":" 2071","line":"        #[test]"},
{"lineNum":" 2072","line":"        fn test_of() {"},
{"lineNum":" 2073","line":"            fn check(expected: bool, flags: YearFlags, ordinal1: u32, ordinal2: u32) {"},
{"lineNum":" 2074","line":"                for ordinal in range_inclusive(ordinal1, ordinal2) {"},
{"lineNum":" 2075","line":"                    let of = Of::new(ordinal, flags);"},
{"lineNum":" 2076","line":"                    assert!(of.valid() == expected,"},
{"lineNum":" 2077","line":"                            \"ordinal {} = {:?} should be {} for dominical year {:?}\","},
{"lineNum":" 2078","line":"                            ordinal, of, if expected {\"valid\"} else {\"invalid\"}, flags);"},
{"lineNum":" 2079","line":"                }"},
{"lineNum":" 2080","line":"            }"},
{"lineNum":" 2081","line":""},
{"lineNum":" 2082","line":"            for &flags in NONLEAP_FLAGS.iter() {"},
{"lineNum":" 2083","line":"                check(false, flags, 0, 0);"},
{"lineNum":" 2084","line":"                check(true, flags, 1, 365);"},
{"lineNum":" 2085","line":"                check(false, flags, 366, 1024);"},
{"lineNum":" 2086","line":"                check(false, flags, u32::MAX, u32::MAX);"},
{"lineNum":" 2087","line":"            }"},
{"lineNum":" 2088","line":""},
{"lineNum":" 2089","line":"            for &flags in LEAP_FLAGS.iter() {"},
{"lineNum":" 2090","line":"                check(false, flags, 0, 0);"},
{"lineNum":" 2091","line":"                check(true, flags, 1, 366);"},
{"lineNum":" 2092","line":"                check(false, flags, 367, 1024);"},
{"lineNum":" 2093","line":"                check(false, flags, u32::MAX, u32::MAX);"},
{"lineNum":" 2094","line":"            }"},
{"lineNum":" 2095","line":"        }"},
{"lineNum":" 2096","line":""},
{"lineNum":" 2097","line":"        #[test]"},
{"lineNum":" 2098","line":"        fn test_mdf_valid() {"},
{"lineNum":" 2099","line":"            fn check(expected: bool, flags: YearFlags, month1: u32, day1: u32,"},
{"lineNum":" 2100","line":"                     month2: u32, day2: u32) {"},
{"lineNum":" 2101","line":"                for month in range_inclusive(month1, month2) {"},
{"lineNum":" 2102","line":"                    for day in range_inclusive(day1, day2) {"},
{"lineNum":" 2103","line":"                        let mdf = Mdf::new(month, day, flags);"},
{"lineNum":" 2104","line":"                        assert!(mdf.valid() == expected,"},
{"lineNum":" 2105","line":"                                \"month {} day {} = {:?} should be {} for dominical year {:?}\","},
{"lineNum":" 2106","line":"                                month, day, mdf, if expected {\"valid\"} else {\"invalid\"}, flags);"},
{"lineNum":" 2107","line":"                    }"},
{"lineNum":" 2108","line":"                }"},
{"lineNum":" 2109","line":"            }"},
{"lineNum":" 2110","line":""},
{"lineNum":" 2111","line":"            for &flags in NONLEAP_FLAGS.iter() {"},
{"lineNum":" 2112","line":"                check(false, flags, 0, 0, 0, 1024);"},
{"lineNum":" 2113","line":"                check(false, flags, 0, 0, 16, 0);"},
{"lineNum":" 2114","line":"                check(true, flags,  1, 1,  1, 31); check(false, flags,  1, 32,  1, 1024);"},
{"lineNum":" 2115","line":"                check(true, flags,  2, 1,  2, 28); check(false, flags,  2, 29,  2, 1024);"},
{"lineNum":" 2116","line":"                check(true, flags,  3, 1,  3, 31); check(false, flags,  3, 32,  3, 1024);"},
{"lineNum":" 2117","line":"                check(true, flags,  4, 1,  4, 30); check(false, flags,  4, 31,  4, 1024);"},
{"lineNum":" 2118","line":"                check(true, flags,  5, 1,  5, 31); check(false, flags,  5, 32,  5, 1024);"},
{"lineNum":" 2119","line":"                check(true, flags,  6, 1,  6, 30); check(false, flags,  6, 31,  6, 1024);"},
{"lineNum":" 2120","line":"                check(true, flags,  7, 1,  7, 31); check(false, flags,  7, 32,  7, 1024);"},
{"lineNum":" 2121","line":"                check(true, flags,  8, 1,  8, 31); check(false, flags,  8, 32,  8, 1024);"},
{"lineNum":" 2122","line":"                check(true, flags,  9, 1,  9, 30); check(false, flags,  9, 31,  9, 1024);"},
{"lineNum":" 2123","line":"                check(true, flags, 10, 1, 10, 31); check(false, flags, 10, 32, 10, 1024);"},
{"lineNum":" 2124","line":"                check(true, flags, 11, 1, 11, 30); check(false, flags, 11, 31, 11, 1024);"},
{"lineNum":" 2125","line":"                check(true, flags, 12, 1, 12, 31); check(false, flags, 12, 32, 12, 1024);"},
{"lineNum":" 2126","line":"                check(false, flags, 13, 0, 16, 1024);"},
{"lineNum":" 2127","line":"                check(false, flags, u32::MAX, 0, u32::MAX, 1024);"},
{"lineNum":" 2128","line":"                check(false, flags, 0, u32::MAX, 16, u32::MAX);"},
{"lineNum":" 2129","line":"                check(false, flags, u32::MAX, u32::MAX, u32::MAX, u32::MAX);"},
{"lineNum":" 2130","line":"            }"},
{"lineNum":" 2131","line":""},
{"lineNum":" 2132","line":"            for &flags in LEAP_FLAGS.iter() {"},
{"lineNum":" 2133","line":"                check(false, flags, 0, 0, 0, 1024);"},
{"lineNum":" 2134","line":"                check(false, flags, 0, 0, 16, 0);"},
{"lineNum":" 2135","line":"                check(true, flags,  1, 1,  1, 31); check(false, flags,  1, 32,  1, 1024);"},
{"lineNum":" 2136","line":"                check(true, flags,  2, 1,  2, 29); check(false, flags,  2, 30,  2, 1024);"},
{"lineNum":" 2137","line":"                check(true, flags,  3, 1,  3, 31); check(false, flags,  3, 32,  3, 1024);"},
{"lineNum":" 2138","line":"                check(true, flags,  4, 1,  4, 30); check(false, flags,  4, 31,  4, 1024);"},
{"lineNum":" 2139","line":"                check(true, flags,  5, 1,  5, 31); check(false, flags,  5, 32,  5, 1024);"},
{"lineNum":" 2140","line":"                check(true, flags,  6, 1,  6, 30); check(false, flags,  6, 31,  6, 1024);"},
{"lineNum":" 2141","line":"                check(true, flags,  7, 1,  7, 31); check(false, flags,  7, 32,  7, 1024);"},
{"lineNum":" 2142","line":"                check(true, flags,  8, 1,  8, 31); check(false, flags,  8, 32,  8, 1024);"},
{"lineNum":" 2143","line":"                check(true, flags,  9, 1,  9, 30); check(false, flags,  9, 31,  9, 1024);"},
{"lineNum":" 2144","line":"                check(true, flags, 10, 1, 10, 31); check(false, flags, 10, 32, 10, 1024);"},
{"lineNum":" 2145","line":"                check(true, flags, 11, 1, 11, 30); check(false, flags, 11, 31, 11, 1024);"},
{"lineNum":" 2146","line":"                check(true, flags, 12, 1, 12, 31); check(false, flags, 12, 32, 12, 1024);"},
{"lineNum":" 2147","line":"                check(false, flags, 13, 0, 16, 1024);"},
{"lineNum":" 2148","line":"                check(false, flags, u32::MAX, 0, u32::MAX, 1024);"},
{"lineNum":" 2149","line":"                check(false, flags, 0, u32::MAX, 16, u32::MAX);"},
{"lineNum":" 2150","line":"                check(false, flags, u32::MAX, u32::MAX, u32::MAX, u32::MAX);"},
{"lineNum":" 2151","line":"            }"},
{"lineNum":" 2152","line":"        }"},
{"lineNum":" 2153","line":""},
{"lineNum":" 2154","line":"        #[test]"},
{"lineNum":" 2155","line":"        fn test_of_fields() {"},
{"lineNum":" 2156","line":"            for &flags in FLAGS.iter() {"},
{"lineNum":" 2157","line":"                for ordinal in range_inclusive(1u32, 366) {"},
{"lineNum":" 2158","line":"                    let of = Of::new(ordinal, flags);"},
{"lineNum":" 2159","line":"                    if of.valid() {"},
{"lineNum":" 2160","line":"                        assert_eq!(of.ordinal(), ordinal);"},
{"lineNum":" 2161","line":"                    }"},
{"lineNum":" 2162","line":"                }"},
{"lineNum":" 2163","line":"            }"},
{"lineNum":" 2164","line":"        }"},
{"lineNum":" 2165","line":""},
{"lineNum":" 2166","line":"        #[test]"},
{"lineNum":" 2167","line":"        fn test_of_with_fields() {"},
{"lineNum":" 2168","line":"            fn check(flags: YearFlags, ordinal: u32) {"},
{"lineNum":" 2169","line":"                let of = Of::new(ordinal, flags);"},
{"lineNum":" 2170","line":""},
{"lineNum":" 2171","line":"                for ordinal in range_inclusive(0u32, 1024) {"},
{"lineNum":" 2172","line":"                    let of = of.with_ordinal(ordinal);"},
{"lineNum":" 2173","line":"                    assert_eq!(of.valid(), Of::new(ordinal, flags).valid());"},
{"lineNum":" 2174","line":"                    if of.valid() {"},
{"lineNum":" 2175","line":"                        assert_eq!(of.ordinal(), ordinal);"},
{"lineNum":" 2176","line":"                    }"},
{"lineNum":" 2177","line":"                }"},
{"lineNum":" 2178","line":"            }"},
{"lineNum":" 2179","line":""},
{"lineNum":" 2180","line":"            for &flags in NONLEAP_FLAGS.iter() {"},
{"lineNum":" 2181","line":"                check(flags, 1);"},
{"lineNum":" 2182","line":"                check(flags, 365);"},
{"lineNum":" 2183","line":"            }"},
{"lineNum":" 2184","line":"            for &flags in LEAP_FLAGS.iter() {"},
{"lineNum":" 2185","line":"                check(flags, 1);"},
{"lineNum":" 2186","line":"                check(flags, 366);"},
{"lineNum":" 2187","line":"            }"},
{"lineNum":" 2188","line":"        }"},
{"lineNum":" 2189","line":""},
{"lineNum":" 2190","line":"        #[test]"},
{"lineNum":" 2191","line":"        fn test_of_weekday() {"},
{"lineNum":" 2192","line":"            assert_eq!(Of::new(1, A).weekday(), Weekday::Sun);"},
{"lineNum":" 2193","line":"            assert_eq!(Of::new(1, B).weekday(), Weekday::Sat);"},
{"lineNum":" 2194","line":"            assert_eq!(Of::new(1, C).weekday(), Weekday::Fri);"},
{"lineNum":" 2195","line":"            assert_eq!(Of::new(1, D).weekday(), Weekday::Thu);"},
{"lineNum":" 2196","line":"            assert_eq!(Of::new(1, E).weekday(), Weekday::Wed);"},
{"lineNum":" 2197","line":"            assert_eq!(Of::new(1, F).weekday(), Weekday::Tue);"},
{"lineNum":" 2198","line":"            assert_eq!(Of::new(1, G).weekday(), Weekday::Mon);"},
{"lineNum":" 2199","line":"            assert_eq!(Of::new(1, AG).weekday(), Weekday::Sun);"},
{"lineNum":" 2200","line":"            assert_eq!(Of::new(1, BA).weekday(), Weekday::Sat);"},
{"lineNum":" 2201","line":"            assert_eq!(Of::new(1, CB).weekday(), Weekday::Fri);"},
{"lineNum":" 2202","line":"            assert_eq!(Of::new(1, DC).weekday(), Weekday::Thu);"},
{"lineNum":" 2203","line":"            assert_eq!(Of::new(1, ED).weekday(), Weekday::Wed);"},
{"lineNum":" 2204","line":"            assert_eq!(Of::new(1, FE).weekday(), Weekday::Tue);"},
{"lineNum":" 2205","line":"            assert_eq!(Of::new(1, GF).weekday(), Weekday::Mon);"},
{"lineNum":" 2206","line":""},
{"lineNum":" 2207","line":"            for &flags in FLAGS.iter() {"},
{"lineNum":" 2208","line":"                let mut prev = Of::new(1, flags).weekday();"},
{"lineNum":" 2209","line":"                for ordinal in range_inclusive(2u32, flags.ndays()) {"},
{"lineNum":" 2210","line":"                    let of = Of::new(ordinal, flags);"},
{"lineNum":" 2211","line":"                    let expected = prev.succ();"},
{"lineNum":" 2212","line":"                    assert_eq!(of.weekday(), expected);"},
{"lineNum":" 2213","line":"                    prev = expected;"},
{"lineNum":" 2214","line":"                }"},
{"lineNum":" 2215","line":"            }"},
{"lineNum":" 2216","line":"        }"},
{"lineNum":" 2217","line":""},
{"lineNum":" 2218","line":"        #[test]"},
{"lineNum":" 2219","line":"        fn test_mdf_fields() {"},
{"lineNum":" 2220","line":"            for &flags in FLAGS.iter() {"},
{"lineNum":" 2221","line":"                for month in range_inclusive(1u32, 12) {"},
{"lineNum":" 2222","line":"                    for day in range_inclusive(1u32, 31) {"},
{"lineNum":" 2223","line":"                        let mdf = Mdf::new(month, day, flags);"},
{"lineNum":" 2224","line":"                        if mdf.valid() {"},
{"lineNum":" 2225","line":"                            assert_eq!(mdf.month(), month);"},
{"lineNum":" 2226","line":"                            assert_eq!(mdf.day(), day);"},
{"lineNum":" 2227","line":"                        }"},
{"lineNum":" 2228","line":"                    }"},
{"lineNum":" 2229","line":"                }"},
{"lineNum":" 2230","line":"            }"},
{"lineNum":" 2231","line":"        }"},
{"lineNum":" 2232","line":""},
{"lineNum":" 2233","line":"        #[test]"},
{"lineNum":" 2234","line":"        fn test_mdf_with_fields() {"},
{"lineNum":" 2235","line":"            fn check(flags: YearFlags, month: u32, day: u32) {"},
{"lineNum":" 2236","line":"                let mdf = Mdf::new(month, day, flags);"},
{"lineNum":" 2237","line":""},
{"lineNum":" 2238","line":"                for month in range_inclusive(0u32, 16) {"},
{"lineNum":" 2239","line":"                    let mdf = mdf.with_month(month);"},
{"lineNum":" 2240","line":"                    assert_eq!(mdf.valid(), Mdf::new(month, day, flags).valid());"},
{"lineNum":" 2241","line":"                    if mdf.valid() {"},
{"lineNum":" 2242","line":"                        assert_eq!(mdf.month(), month);"},
{"lineNum":" 2243","line":"                        assert_eq!(mdf.day(), day);"},
{"lineNum":" 2244","line":"                    }"},
{"lineNum":" 2245","line":"                }"},
{"lineNum":" 2246","line":""},
{"lineNum":" 2247","line":"                for day in range_inclusive(0u32, 1024) {"},
{"lineNum":" 2248","line":"                    let mdf = mdf.with_day(day);"},
{"lineNum":" 2249","line":"                    assert_eq!(mdf.valid(), Mdf::new(month, day, flags).valid());"},
{"lineNum":" 2250","line":"                    if mdf.valid() {"},
{"lineNum":" 2251","line":"                        assert_eq!(mdf.month(), month);"},
{"lineNum":" 2252","line":"                        assert_eq!(mdf.day(), day);"},
{"lineNum":" 2253","line":"                    }"},
{"lineNum":" 2254","line":"                }"},
{"lineNum":" 2255","line":"            }"},
{"lineNum":" 2256","line":""},
{"lineNum":" 2257","line":"            for &flags in NONLEAP_FLAGS.iter() {"},
{"lineNum":" 2258","line":"                check(flags, 1, 1);"},
{"lineNum":" 2259","line":"                check(flags, 1, 31);"},
{"lineNum":" 2260","line":"                check(flags, 2, 1);"},
{"lineNum":" 2261","line":"                check(flags, 2, 28);"},
{"lineNum":" 2262","line":"                check(flags, 2, 29);"},
{"lineNum":" 2263","line":"                check(flags, 12, 31);"},
{"lineNum":" 2264","line":"            }"},
{"lineNum":" 2265","line":"            for &flags in LEAP_FLAGS.iter() {"},
{"lineNum":" 2266","line":"                check(flags, 1, 1);"},
{"lineNum":" 2267","line":"                check(flags, 1, 31);"},
{"lineNum":" 2268","line":"                check(flags, 2, 1);"},
{"lineNum":" 2269","line":"                check(flags, 2, 29);"},
{"lineNum":" 2270","line":"                check(flags, 2, 30);"},
{"lineNum":" 2271","line":"                check(flags, 12, 31);"},
{"lineNum":" 2272","line":"            }"},
{"lineNum":" 2273","line":"        }"},
{"lineNum":" 2274","line":""},
{"lineNum":" 2275","line":"        #[test]"},
{"lineNum":" 2276","line":"        fn test_of_isoweekdate_raw() {"},
{"lineNum":" 2277","line":"            for &flags in FLAGS.iter() {"},
{"lineNum":" 2278","line":"                // January 4 should be in the first week"},
{"lineNum":" 2279","line":"                let (week, _) = Of::new(4 /* January 4 */, flags).isoweekdate_raw();"},
{"lineNum":" 2280","line":"                assert_eq!(week, 1);"},
{"lineNum":" 2281","line":"            }"},
{"lineNum":" 2282","line":"        }"},
{"lineNum":" 2283","line":""},
{"lineNum":" 2284","line":"        #[test]"},
{"lineNum":" 2285","line":"        fn test_of_to_mdf() {"},
{"lineNum":" 2286","line":"            for i in range_inclusive(0u32, 8192) {"},
{"lineNum":" 2287","line":"                let of = Of(i);"},
{"lineNum":" 2288","line":"                assert_eq!(of.valid(), of.to_mdf().valid());"},
{"lineNum":" 2289","line":"            }"},
{"lineNum":" 2290","line":"        }"},
{"lineNum":" 2291","line":""},
{"lineNum":" 2292","line":"        #[test]"},
{"lineNum":" 2293","line":"        fn test_mdf_to_of() {"},
{"lineNum":" 2294","line":"            for i in range_inclusive(0u32, 8192) {"},
{"lineNum":" 2295","line":"                let mdf = Mdf(i);"},
{"lineNum":" 2296","line":"                assert_eq!(mdf.valid(), mdf.to_of().valid());"},
{"lineNum":" 2297","line":"            }"},
{"lineNum":" 2298","line":"        }"},
{"lineNum":" 2299","line":""},
{"lineNum":" 2300","line":"        #[test]"},
{"lineNum":" 2301","line":"        fn test_of_to_mdf_to_of() {"},
{"lineNum":" 2302","line":"            for i in range_inclusive(0u32, 8192) {"},
{"lineNum":" 2303","line":"                let of = Of(i);"},
{"lineNum":" 2304","line":"                if of.valid() {"},
{"lineNum":" 2305","line":"                    assert_eq!(of, of.to_mdf().to_of());"},
{"lineNum":" 2306","line":"                }"},
{"lineNum":" 2307","line":"            }"},
{"lineNum":" 2308","line":"        }"},
{"lineNum":" 2309","line":""},
{"lineNum":" 2310","line":"        #[test]"},
{"lineNum":" 2311","line":"        fn test_mdf_to_of_to_mdf() {"},
{"lineNum":" 2312","line":"            for i in range_inclusive(0u32, 8192) {"},
{"lineNum":" 2313","line":"                let mdf = Mdf(i);"},
{"lineNum":" 2314","line":"                if mdf.valid() {"},
{"lineNum":" 2315","line":"                    assert_eq!(mdf, mdf.to_of().to_mdf());"},
{"lineNum":" 2316","line":"                }"},
{"lineNum":" 2317","line":"            }"},
{"lineNum":" 2318","line":"        }"},
{"lineNum":" 2319","line":"    }"},
{"lineNum":" 2320","line":"}"},
{"lineNum":" 2321","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "tls-90dc0ae2bd2b42a3", "date" : "2016-01-27 10:29:19", "instrumented" : 38, "covered" : 36,};
var merged_data = [];
