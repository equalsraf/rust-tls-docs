var data = {lines:[
{"lineNum":"    1","line":"/* $OpenBSD: tls_util.c,v 1.2 2015/02/07 23:25:37 reyk Exp $ */"},
{"lineNum":"    2","line":"/*"},
{"lineNum":"    3","line":" * Copyright (c) 2014 Joel Sing <jsing@openbsd.org>"},
{"lineNum":"    4","line":" * Copyright (c) 2015 Reyk Floeter <reyk@openbsd.org>"},
{"lineNum":"    5","line":" *"},
{"lineNum":"    6","line":" * Permission to use, copy, modify, and distribute this software for any"},
{"lineNum":"    7","line":" * purpose with or without fee is hereby granted, provided that the above"},
{"lineNum":"    8","line":" * copyright notice and this permission notice appear in all copies."},
{"lineNum":"    9","line":" *"},
{"lineNum":"   10","line":" * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES"},
{"lineNum":"   11","line":" * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF"},
{"lineNum":"   12","line":" * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR"},
{"lineNum":"   13","line":" * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES"},
{"lineNum":"   14","line":" * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN"},
{"lineNum":"   15","line":" * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF"},
{"lineNum":"   16","line":" * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE."},
{"lineNum":"   17","line":" */"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"#include <sys/stat.h>"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"#include <stdlib.h>"},
{"lineNum":"   22","line":"#include <unistd.h>"},
{"lineNum":"   23","line":"#include <fcntl.h>"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"#include \"tls.h\""},
{"lineNum":"   26","line":"#include \"tls_internal.h\""},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"/*"},
{"lineNum":"   29","line":" * Extract the host and port from a colon separated value. For a literal IPv6"},
{"lineNum":"   30","line":" * address the address must be contained with square braces. If a host and"},
{"lineNum":"   31","line":" * port are successfully extracted, the function will return 0 and the"},
{"lineNum":"   32","line":" * caller is responsible for freeing the host and port. If no port is found"},
{"lineNum":"   33","line":" * then the function will return 1, with both host and port being NULL."},
{"lineNum":"   34","line":" * On memory allocation failure -1 will be returned."},
{"lineNum":"   35","line":" */"},
{"lineNum":"   36","line":"int"},
{"lineNum":"   37","line":"tls_host_port(const char *hostport, char **host, char **port)"},
{"lineNum":"   38","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   39","line":"\tchar *h, *p, *s;"},
{"lineNum":"   40","line":"\tint rv = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"\t*host = NULL;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   43","line":"\t*port = NULL;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"\tif ((s = strdup(hostport)) == NULL)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   46","line":"\t\tgoto fail;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"\th = p = s;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"\t/* See if this is an IPv6 literal with square braces. */"},
{"lineNum":"   51","line":"\tif (p[0] == \'[\') {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   52","line":"\t\th++;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   53","line":"\t\tif ((p = strchr(s, \']\')) == NULL)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   54","line":"\t\t\tgoto done;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   55","line":"\t\t*p++ = \'\\0\';","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   56","line":"\t}"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"\t/* Find the port seperator. */"},
{"lineNum":"   59","line":"\tif ((p = strchr(p, \':\')) == NULL)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   60","line":"\t\tgoto done;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"\t/* If there is another separator then we have issues. */"},
{"lineNum":"   63","line":"\tif (strchr(p + 1, \':\') != NULL)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   64","line":"\t\tgoto done;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"\t*p++ = \'\\0\';","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"\tif (asprintf(host, \"%s\", h) == -1)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   69","line":"\t\tgoto fail;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   70","line":"\tif (asprintf(port, \"%s\", p) == -1)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   71","line":"\t\tgoto fail;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"\trv = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   74","line":"\tgoto done;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":" fail:"},
{"lineNum":"   77","line":"\tfree(*host);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   78","line":"\t*host = NULL;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   79","line":"\tfree(*port);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   80","line":"\t*port = NULL;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   81","line":"\trv = -1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":" done:"},
{"lineNum":"   84","line":"\tfree(s);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"\treturn (rv);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   87","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"static int"},
{"lineNum":"   90","line":"tls_password_cb(char *buf, int size, int rwflag, void *u)"},
{"lineNum":"   91","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   92","line":"\tsize_t\tlen;"},
{"lineNum":"   93","line":"\tif (u == NULL) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   94","line":"\t\tmemset(buf, 0, size);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   95","line":"\t\treturn (0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   96","line":"\t}"},
{"lineNum":"   97","line":"\tif ((len = strlcpy(buf, u, size)) >= (size_t)size)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   98","line":"\t\treturn (0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   99","line":"\treturn (len);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  100","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"uint8_t *"},
{"lineNum":"  103","line":"tls_load_file(const char *name, size_t *len, char *password)"},
{"lineNum":"  104","line":"{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  105","line":"\tFILE *fp;"},
{"lineNum":"  106","line":"\tEVP_PKEY *key = NULL;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  107","line":"\tBIO *bio = NULL;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  108","line":"\tchar *data, *buf = NULL;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  109","line":"\tstruct stat st;"},
{"lineNum":"  110","line":"\tsize_t size;"},
{"lineNum":"  111","line":"\tint fd = -1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"\t*len = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"\tif ((fd = open(name, O_RDONLY)) == -1)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  116","line":"\t\treturn (NULL);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"\t/* Just load the file into memory without decryption */"},
{"lineNum":"  119","line":"\tif (password == NULL) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  120","line":"\t\tif (fstat(fd, &st) != 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  121","line":"\t\t\tgoto fail;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  122","line":"\t\tsize = (size_t)st.st_size;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  123","line":"\t\tif ((buf = calloc(1, size + 1)) == NULL)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  124","line":"\t\t\tgoto fail;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  125","line":"\t\tif (read(fd, buf, size) != size)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  126","line":"\t\t\tgoto fail;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  127","line":"\t\tclose(fd);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  128","line":"\t\tgoto done;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  129","line":"\t}"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"\t/* Or read the (possibly) encrypted key from file */"},
{"lineNum":"  132","line":"\tif ((fp = fdopen(fd, \"r\")) == NULL)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  133","line":"\t\tgoto fail;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  134","line":"\tfd = -1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"\tkey = PEM_read_PrivateKey(fp, NULL, tls_password_cb, password);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  137","line":"\tfclose(fp);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  138","line":"\tif (key == NULL)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  139","line":"\t\tgoto fail;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"\t/* Write unencrypted key to memory buffer */"},
{"lineNum":"  142","line":"\tif ((bio = BIO_new(BIO_s_mem())) == NULL)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  143","line":"\t\tgoto fail;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  144","line":"\tif (!PEM_write_bio_PrivateKey(bio, key, NULL, NULL, 0, NULL, NULL))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  145","line":"\t\tgoto fail;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  146","line":"\tif ((size = BIO_get_mem_data(bio, &data)) <= 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  147","line":"\t\tgoto fail;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  148","line":"\tif ((buf = calloc(1, size)) == NULL)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  149","line":"\t\tgoto fail;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  150","line":"\tmemcpy(buf, data, size);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"\tBIO_free_all(bio);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  153","line":"\tEVP_PKEY_free(key);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":" done:"},
{"lineNum":"  156","line":"\t*len = size;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  157","line":"\treturn (buf);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":" fail:"},
{"lineNum":"  160","line":"\tfree(buf);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  161","line":"\tif (fd != -1)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  162","line":"\t\tclose(fd);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  163","line":"\tif (bio != NULL)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  164","line":"\t\tBIO_free_all(bio);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  165","line":"\tif (key != NULL)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  166","line":"\t\tEVP_PKEY_free(key);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"\treturn (NULL);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  169","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test_server-f6d6b2b65b381795", "date" : "2016-03-15 18:08:19", "instrumented" : 86, "covered" : 0,};
var merged_data = [];
