var data = {lines:[
{"lineNum":"    1","line":"//! Rust bindings for [libressl](http://libressl.org)\'s libtls"},
{"lineNum":"    2","line":"//! For the authoritative source on the inner workings of libtls check","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"    3","line":"//! the [manpage](http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man3/tls_accept_fds.3?query=tls_init&sec=3)."},
{"lineNum":"    4","line":"//! The [raw](raw/index.html) module holds the bindings around libtls. A more idiomatic API"},
{"lineNum":"    5","line":"//! is provided here."},
{"lineNum":"    6","line":"//!"},
{"lineNum":"    7","line":"//! ## Client"},
{"lineNum":"    8","line":"//!"},
{"lineNum":"    9","line":"//! ```no_run"},
{"lineNum":"   10","line":"//! use std::io::Write;"},
{"lineNum":"   11","line":"//! use std::net::TcpStream;"},
{"lineNum":"   12","line":"//! let tcp = TcpStream::connect(\"google.com:443\").unwrap();"},
{"lineNum":"   13","line":"//! let mut client = telos::new_client()"},
{"lineNum":"   14","line":"//!     .connect(tcp, \"google.com\")"},
{"lineNum":"   15","line":"//!     .unwrap();"},
{"lineNum":"   16","line":"//! client.write(\"GET / HTTP/1.1\\n\\n\".as_bytes()).unwrap();"},
{"lineNum":"   17","line":"//! ```"},
{"lineNum":"   18","line":"//!"},
{"lineNum":"   19","line":"//! ## Server"},
{"lineNum":"   20","line":"//!"},
{"lineNum":"   21","line":"//! The library does not handle TCP listening and binding, you need to handle the"},
{"lineNum":"   22","line":"//! TCP server accept() and then call `TlsServer::accept`"},
{"lineNum":"   23","line":"//!"},
{"lineNum":"   24","line":"//! ```no_run"},
{"lineNum":"   25","line":"//! use std::net::TcpListener;"},
{"lineNum":"   26","line":"//! let srv = TcpListener::bind(\"127.0.0.1:0\").unwrap();"},
{"lineNum":"   27","line":"//! let addr = srv.local_addr().unwrap();"},
{"lineNum":"   28","line":"//! let mut tls_srv = telos::new_server()"},
{"lineNum":"   29","line":"//!     .key_file(\"tests/private_key.key\")"},
{"lineNum":"   30","line":"//!     .cert_file(\"tests/certificate.crt\")"},
{"lineNum":"   31","line":"//!     .bind().unwrap();"},
{"lineNum":"   32","line":"//! // Accept TCP connection, and then start TLS over it"},
{"lineNum":"   33","line":"//! let tcp_conn = srv.incoming().next().unwrap().unwrap();"},
{"lineNum":"   34","line":"//! let mut tls_conn = tls_srv.accept(tcp_conn).unwrap();"},
{"lineNum":"   35","line":"//! ```"},
{"lineNum":"   36","line":"//!"},
{"lineNum":"   37","line":"//! ## Certificate Verification"},
{"lineNum":"   38","line":"//!"},
{"lineNum":"   39","line":"//! By default libtls will verify certificates using the system certificate store (usually defined"},
{"lineNum":"   40","line":"//! as /etc/ssl/cert.pem). In some Linux flavours and in Windows this file does not exist and you"},
{"lineNum":"   41","line":"//! will need to use one of the appropriate methods to load the correct certificates for your"},
{"lineNum":"   42","line":"//! system - check the Builder classes for the ca methods."},
{"lineNum":"   43","line":"//!"},
{"lineNum":"   44","line":"//! ## Connection Lifetime"},
{"lineNum":"   45","line":"//!"},
{"lineNum":"   46","line":"//! By default `connect()` and `accept()` take ownership of the underlying"},
{"lineNum":"   47","line":"//! sockets, to ensure they are not closed while still in use."},
{"lineNum":"   48","line":"//!"},
{"lineNum":"   49","line":"//! If you want to keep ownership, `connect_socket()` and `accept_socket()`"},
{"lineNum":"   50","line":"//! allow you to do it. However dropping TlsStream WILL NOT close the underlying"},
{"lineNum":"   51","line":"//! sockets, you need to close them yourself."},
{"lineNum":"   52","line":"//!"},
{"lineNum":"   53","line":"//! Likewise it is up to the caller to make sure the socket is not closed"},
{"lineNum":"   54","line":"//! too early. This example fails to keep the original TcpStream in scope"},
{"lineNum":"   55","line":"//!"},
{"lineNum":"   56","line":"//! ```should_panic"},
{"lineNum":"   57","line":"//! #[cfg(unix)]"},
{"lineNum":"   58","line":"//! use std::os::unix::io::AsRawFd;"},
{"lineNum":"   59","line":"//! #[cfg(windows)]"},
{"lineNum":"   60","line":"//! use std::os::windows::io::AsRawSocket;"},
{"lineNum":"   61","line":"//! use std::net::TcpStream;"},
{"lineNum":"   62","line":"//! fn create_client() -> telos::TlsStream<()> {"},
{"lineNum":"   63","line":"//!     let tcp = TcpStream::connect(\"google.com:443\").unwrap();"},
{"lineNum":"   64","line":"//!     let mut client = telos::new_client()"},
{"lineNum":"   65","line":"//!         .connect_socket(&tcp, \"google.com\")"},
{"lineNum":"   66","line":"//!         .unwrap();"},
{"lineNum":"   67","line":"//!     client"},
{"lineNum":"   68","line":"//! }"},
{"lineNum":"   69","line":"//!"},
{"lineNum":"   70","line":"//! fn main() {"},
{"lineNum":"   71","line":"//!     let mut client = create_client();"},
{"lineNum":"   72","line":"//!     // The TcpStream was closed when create_client exited the following"},
{"lineNum":"   73","line":"//!     // will fail with \"handshake failed: Bad file descriptor\""},
{"lineNum":"   74","line":"//!     client.handshake().unwrap();"},
{"lineNum":"   75","line":"//! }"},
{"lineNum":"   76","line":"//! ```"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"extern crate chrono;"},
{"lineNum":"   79","line":"extern crate libc;"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"use std::error::Error;"},
{"lineNum":"   82","line":"use std::io;"},
{"lineNum":"   83","line":"use std::io::{Read, Write};"},
{"lineNum":"   84","line":"#[cfg(unix)]"},
{"lineNum":"   85","line":"use std::os::unix::io::AsRawFd;"},
{"lineNum":"   86","line":"#[cfg(windows)]"},
{"lineNum":"   87","line":"use std::os::windows::io::AsRawSocket;"},
{"lineNum":"   88","line":"use chrono::datetime::DateTime;"},
{"lineNum":"   89","line":"use chrono::offset::utc::UTC;"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"mod util;"},
{"lineNum":"   92","line":"pub mod raw;"},
{"lineNum":"   93","line":"use raw::{TlsConfig, TlsContext};"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"pub use raw::{TlsResult, TlsError};"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"pub struct ClientBuilder {"},
{"lineNum":"   98","line":"    cfg: Option<TlsConfig>,"},
{"lineNum":"   99","line":"    error: Option<TlsError>,"},
{"lineNum":"  100","line":"}"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"impl ClientBuilder {"},
{"lineNum":"  103","line":"    /// Load CA certificates from PEM file"},
{"lineNum":"  104","line":"    pub fn ca_file(mut self, path: &str) -> Self {"},
{"lineNum":"  105","line":"        if self.error.is_some() {"},
{"lineNum":"  106","line":"            return self;"},
{"lineNum":"  107","line":"        }"},
{"lineNum":"  108","line":"        if let Some(cfg) = self.cfg.as_mut() {"},
{"lineNum":"  109","line":"            self.error = cfg.set_ca_file(path).err();"},
{"lineNum":"  110","line":"        }"},
{"lineNum":"  111","line":"        self"},
{"lineNum":"  112","line":"    }"},
{"lineNum":"  113","line":"    /// Load CA certificates from folder"},
{"lineNum":"  114","line":"    pub fn ca_path(mut self, path: &str) -> Self {"},
{"lineNum":"  115","line":"        if self.error.is_some() {"},
{"lineNum":"  116","line":"            return self;"},
{"lineNum":"  117","line":"        }"},
{"lineNum":"  118","line":"        if let Some(cfg) = self.cfg.as_mut() {"},
{"lineNum":"  119","line":"            self.error = cfg.set_ca_path(path).err();"},
{"lineNum":"  120","line":"        }"},
{"lineNum":"  121","line":"        self"},
{"lineNum":"  122","line":"    }"},
{"lineNum":"  123","line":"    /// Use CA certificates from PEM string"},
{"lineNum":"  124","line":"    pub fn ca(mut self, ca: &str) -> Self {"},
{"lineNum":"  125","line":"        if self.error.is_some() {"},
{"lineNum":"  126","line":"            return self;"},
{"lineNum":"  127","line":"        }"},
{"lineNum":"  128","line":"        if let Some(cfg) = self.cfg.as_mut() {"},
{"lineNum":"  129","line":"            self.error = cfg.set_ca_mem(ca).err();"},
{"lineNum":"  130","line":"        }"},
{"lineNum":"  131","line":"        self"},
{"lineNum":"  132","line":"    }"},
{"lineNum":"  133","line":"    pub fn verify_depth(mut self, depth: i32) -> Self {"},
{"lineNum":"  134","line":"        if self.error.is_some() {"},
{"lineNum":"  135","line":"            return self;"},
{"lineNum":"  136","line":"        }"},
{"lineNum":"  137","line":"        if let Some(cfg) = self.cfg.as_mut() {"},
{"lineNum":"  138","line":"            cfg.set_verify_depth(depth);"},
{"lineNum":"  139","line":"        }"},
{"lineNum":"  140","line":"        self"},
{"lineNum":"  141","line":"    }"},
{"lineNum":"  142","line":"    pub fn protocols(mut self, protocols: &str) -> Self {"},
{"lineNum":"  143","line":"        if self.error.is_some() {"},
{"lineNum":"  144","line":"            return self;"},
{"lineNum":"  145","line":"        }"},
{"lineNum":"  146","line":"        if let Some(cfg) = self.cfg.as_mut() {"},
{"lineNum":"  147","line":"            self.error = cfg.set_protocols(protocols).err();"},
{"lineNum":"  148","line":"        }"},
{"lineNum":"  149","line":"        self"},
{"lineNum":"  150","line":"    }"},
{"lineNum":"  151","line":"    pub fn ciphers(mut self, ciphers: &str) -> Self {"},
{"lineNum":"  152","line":"        if self.error.is_some() {"},
{"lineNum":"  153","line":"            return self;"},
{"lineNum":"  154","line":"        }"},
{"lineNum":"  155","line":"        if let Some(cfg) = self.cfg.as_mut() {"},
{"lineNum":"  156","line":"            self.error = cfg.set_ciphers(ciphers).err();"},
{"lineNum":"  157","line":"        }"},
{"lineNum":"  158","line":"        self"},
{"lineNum":"  159","line":"    }"},
{"lineNum":"  160","line":"    /// Disable certificate verification"},
{"lineNum":"  161","line":"    pub fn insecure_noverifycert(mut self) -> Self {","class":"lineCov","hits":"1","order":"641","possible_hits":"1",},
{"lineNum":"  162","line":"        if self.error.is_some() {","class":"lineCov","hits":"1","order":"642","possible_hits":"1",},
{"lineNum":"  163","line":"            return self;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  164","line":"        }"},
{"lineNum":"  165","line":"        if let Some(cfg) = self.cfg.as_mut() {","class":"lineCov","hits":"1","order":"643","possible_hits":"1",},
{"lineNum":"  166","line":"            cfg.insecure_noverifycert();","class":"lineCov","hits":"1","order":"644","possible_hits":"1",},
{"lineNum":"  167","line":"        }"},
{"lineNum":"  168","line":"        self","class":"lineCov","hits":"1","order":"651","possible_hits":"1",},
{"lineNum":"  169","line":"    }","class":"linePartCov","hits":"2","order":"652","possible_hits":"4",},
{"lineNum":"  170","line":"    /// Disable hostname verification"},
{"lineNum":"  171","line":"    pub fn insecure_noverifyname(mut self) -> Self {","class":"lineCov","hits":"1","order":"629","possible_hits":"1",},
{"lineNum":"  172","line":"        if self.error.is_some() {","class":"lineCov","hits":"1","order":"630","possible_hits":"1",},
{"lineNum":"  173","line":"            return self;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  174","line":"        }"},
{"lineNum":"  175","line":"        if let Some(cfg) = self.cfg.as_mut() {","class":"lineCov","hits":"1","order":"631","possible_hits":"1",},
{"lineNum":"  176","line":"            cfg.insecure_noverifyname();","class":"lineCov","hits":"1","order":"632","possible_hits":"1",},
{"lineNum":"  177","line":"        }"},
{"lineNum":"  178","line":"        self","class":"lineCov","hits":"1","order":"639","possible_hits":"1",},
{"lineNum":"  179","line":"    }","class":"linePartCov","hits":"2","order":"640","possible_hits":"4",},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"    /// Create client context from settings"},
{"lineNum":"  182","line":"    fn new_ctx(self) -> TlsResult<TlsContext> {","class":"lineCov","hits":"1","order":"655","possible_hits":"1",},
{"lineNum":"  183","line":"        if let Some(err) = self.error {","class":"lineCov","hits":"1","order":"656","possible_hits":"1",},
{"lineNum":"  184","line":"            Err(err)"},
{"lineNum":"  185","line":"        } else {"},
{"lineNum":"  186","line":"            let mut cli = try!(TlsContext::new_client());","class":"linePartCov","hits":"2","order":"657","possible_hits":"4",},
{"lineNum":"  187","line":"            // This unwrap should be safe, we can\'t have a cfg without an error"},
{"lineNum":"  188","line":"            try!(cli.configure(self.cfg.unwrap()));","class":"lineCov","hits":"1","order":"668","possible_hits":"1",},
{"lineNum":"  189","line":"            Ok(cli)","class":"lineCov","hits":"1","order":"670","possible_hits":"1",},
{"lineNum":"  190","line":"        }","class":"linePartCov","hits":"1","order":"671","possible_hits":"3",},
{"lineNum":"  191","line":"    }","class":"linePartCov","hits":"2","order":"672","possible_hits":"4",},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"    #[cfg(unix)]"},
{"lineNum":"  194","line":"    /// Establish a TLS connection over an existing file descriptor"},
{"lineNum":"  195","line":"    pub fn connect_socket<R: AsRawFd>(self, r: &R, servername: &str) -> TlsResult<TlsStream<()>> {"},
{"lineNum":"  196","line":"        let mut ctx = try!(self.new_ctx());"},
{"lineNum":"  197","line":"        try!(ctx.connect_socket(r.as_raw_fd(), servername));"},
{"lineNum":"  198","line":"        Ok(TlsStream {"},
{"lineNum":"  199","line":"            ctx: ctx,"},
{"lineNum":"  200","line":"            inner_stream: None,"},
{"lineNum":"  201","line":"        })"},
{"lineNum":"  202","line":"    }"},
{"lineNum":"  203","line":"    /// Connects over an existing stream. See `TlsStream::inner`."},
{"lineNum":"  204","line":"    #[cfg(unix)]"},
{"lineNum":"  205","line":"    pub fn connect<F: AsRawFd>(self, inner_stream: F, servername: &str) -> TlsResult<TlsStream<F>> {","class":"linePartCov","hits":"3","order":"653","possible_hits":"6",},
{"lineNum":"  206","line":"        let mut ctx = try!(self.new_ctx());","class":"linePartCov","hits":"2","order":"654","possible_hits":"4",},
{"lineNum":"  207","line":"        try!(ctx.connect_socket(inner_stream.as_raw_fd(), servername));","class":"lineCov","hits":"1","order":"673","possible_hits":"1",},
{"lineNum":"  208","line":"        Ok(TlsStream {","class":"lineCov","hits":"1","order":"713","possible_hits":"1",},
{"lineNum":"  209","line":"            ctx: ctx,","class":"lineCov","hits":"1","order":"714","possible_hits":"1",},
{"lineNum":"  210","line":"            inner_stream: Some(inner_stream),"},
{"lineNum":"  211","line":"        })"},
{"lineNum":"  212","line":"    }"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"    #[cfg(windows)]"},
{"lineNum":"  215","line":"    /// Establish a TLS connection over an existing socket"},
{"lineNum":"  216","line":"    pub fn connect_socket<R: AsRawSocket>(self,"},
{"lineNum":"  217","line":"                                          r: &R,"},
{"lineNum":"  218","line":"                                          servername: &str)"},
{"lineNum":"  219","line":"                                          -> TlsResult<TlsStream<()>> {"},
{"lineNum":"  220","line":"        let mut ctx = try!(self.new_ctx());"},
{"lineNum":"  221","line":"        try!(ctx.connect_socket(r.as_raw_socket(), servername));"},
{"lineNum":"  222","line":"        Ok(TlsStream {"},
{"lineNum":"  223","line":"            ctx: ctx,"},
{"lineNum":"  224","line":"            inner_stream: None,"},
{"lineNum":"  225","line":"        })"},
{"lineNum":"  226","line":"    }"},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"    /// Consumes the socket holder, and keeps it"},
{"lineNum":"  229","line":"    /// until its no longer needed. See `TlsStream::inner`."},
{"lineNum":"  230","line":"    #[cfg(windows)]"},
{"lineNum":"  231","line":"    pub fn connect<F: AsRawSocket>(self,"},
{"lineNum":"  232","line":"                                   inner_stream: F,"},
{"lineNum":"  233","line":"                                   servername: &str)"},
{"lineNum":"  234","line":"                                   -> TlsResult<TlsStream<F>> {"},
{"lineNum":"  235","line":"        let mut ctx = try!(self.new_ctx());"},
{"lineNum":"  236","line":"        let sock = inner_stream.as_raw_socket();"},
{"lineNum":"  237","line":"        try!(ctx.connect_socket(sock, servername));"},
{"lineNum":"  238","line":"        Ok(TlsStream {"},
{"lineNum":"  239","line":"            ctx: ctx,"},
{"lineNum":"  240","line":"            inner_stream: Some(inner_stream),"},
{"lineNum":"  241","line":"        })"},
{"lineNum":"  242","line":"    }"},
{"lineNum":"  243","line":"}"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"/// Create a new TLS client"},
{"lineNum":"  246","line":"pub fn new_client() -> ClientBuilder {","class":"lineCov","hits":"1","order":"625","possible_hits":"1",},
{"lineNum":"  247","line":"    if !raw::init() {","class":"lineCov","hits":"1","order":"626","possible_hits":"1",},
{"lineNum":"  248","line":"        return ClientBuilder {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  249","line":"            cfg: None,"},
{"lineNum":"  250","line":"            error: Some(TlsError::new(\"Failed to initialize libtls\")),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  251","line":"        };"},
{"lineNum":"  252","line":"    }"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"    match TlsConfig::new() {","class":"lineCov","hits":"1","order":"627","possible_hits":"1",},
{"lineNum":"  255","line":"        Ok(cfg) => {"},
{"lineNum":"  256","line":"            ClientBuilder {"},
{"lineNum":"  257","line":"                cfg: Some(cfg),"},
{"lineNum":"  258","line":"                error: None,"},
{"lineNum":"  259","line":"            }"},
{"lineNum":"  260","line":"        }"},
{"lineNum":"  261","line":"        Err(err) => {"},
{"lineNum":"  262","line":"            ClientBuilder {"},
{"lineNum":"  263","line":"                cfg: None,"},
{"lineNum":"  264","line":"                error: Some(err),"},
{"lineNum":"  265","line":"            }"},
{"lineNum":"  266","line":"        }"},
{"lineNum":"  267","line":"    }"},
{"lineNum":"  268","line":"}","class":"lineCov","hits":"1","order":"628","possible_hits":"1",},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"pub struct TlsStream<T> {"},
{"lineNum":"  271","line":"    ctx: TlsContext,"},
{"lineNum":"  272","line":"    inner_stream: Option<T>,"},
{"lineNum":"  273","line":"}"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"impl<T> TlsStream<T> {"},
{"lineNum":"  276","line":"    /// Executes the TLS handshake. This function is automatically called when reading or writing,"},
{"lineNum":"  277","line":"    /// you usually don\'t need to call it unless you want to force the handshake to finish sooner."},
{"lineNum":"  278","line":"    ///"},
{"lineNum":"  279","line":"    /// Calling handshake multiple times, if the other end of the connection is not expecting it"},
{"lineNum":"  280","line":"    /// will usually result in an error."},
{"lineNum":"  281","line":"    pub fn handshake(&mut self) -> TlsResult<()> {","class":"linePartCov","hits":"2","order":"737","possible_hits":"3",},
{"lineNum":"  282","line":"        self.ctx.handshake()","class":"lineCov","hits":"1","order":"738","possible_hits":"1",},
{"lineNum":"  283","line":"    }"},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"    /// Close TLS connection. This will not close the underlying transport."},
{"lineNum":"  286","line":"    pub fn shutdown(&mut self) -> io::Result<()> {"},
{"lineNum":"  287","line":"        if let Err(err) = self.ctx.close() {"},
{"lineNum":"  288","line":"            if err.wants_more() {"},
{"lineNum":"  289","line":"                try!(self.ctx.close());"},
{"lineNum":"  290","line":"            } else {"},
{"lineNum":"  291","line":"                return Err(io::Error::from(err));"},
{"lineNum":"  292","line":"            }"},
{"lineNum":"  293","line":"        }"},
{"lineNum":"  294","line":"        Ok(())"},
{"lineNum":"  295","line":"    }"},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"    /// Calling this method before the handshake is complete causes this method"},
{"lineNum":"  298","line":"    /// to return an empty string. See [handshake()](#method.handshake)."},
{"lineNum":"  299","line":"    pub fn certificate_issuer(&self) -> String {"},
{"lineNum":"  300","line":"        self.ctx.peer_cert_issuer()"},
{"lineNum":"  301","line":"    }"},
{"lineNum":"  302","line":"    /// Calling this method before the handshake is complete causes this method"},
{"lineNum":"  303","line":"    /// to return an empty string. See [handshake()](#method.handshake)."},
{"lineNum":"  304","line":"    pub fn certificate_hash(&self) -> String {"},
{"lineNum":"  305","line":"        self.ctx.peer_cert_hash()"},
{"lineNum":"  306","line":"    }"},
{"lineNum":"  307","line":"    /// Calling this method before the handshake is complete causes this method"},
{"lineNum":"  308","line":"    /// to return an empty string. See [handshake()](#method.handshake)."},
{"lineNum":"  309","line":"    pub fn certificate_subject(&self) -> String {"},
{"lineNum":"  310","line":"        self.ctx.peer_cert_subject()"},
{"lineNum":"  311","line":"    }"},
{"lineNum":"  312","line":"    pub fn peer_cert_provided(&self) -> bool {"},
{"lineNum":"  313","line":"        self.ctx.peer_cert_provided()"},
{"lineNum":"  314","line":"    }"},
{"lineNum":"  315","line":"    pub fn peer_cert_notbefore(&self) -> TlsResult<DateTime<UTC>> {"},
{"lineNum":"  316","line":"        self.ctx.peer_cert_notbefore()"},
{"lineNum":"  317","line":"    }"},
{"lineNum":"  318","line":"    pub fn peer_cert_notafter(&self) -> TlsResult<DateTime<UTC>> {"},
{"lineNum":"  319","line":"        self.ctx.peer_cert_notafter()"},
{"lineNum":"  320","line":"    }"},
{"lineNum":"  321","line":"    pub fn peer_cert_contains_name(&self, name: &str) -> bool {"},
{"lineNum":"  322","line":"        self.ctx.peer_cert_contains_name(name)"},
{"lineNum":"  323","line":"    }"},
{"lineNum":"  324","line":"    /// Calling this method before the handshake is complete causes this method"},
{"lineNum":"  325","line":"    /// to return an empty string. See [handshake()](#method.handshake)."},
{"lineNum":"  326","line":"    pub fn version(&self) -> String {"},
{"lineNum":"  327","line":"        self.ctx.conn_version()"},
{"lineNum":"  328","line":"    }"},
{"lineNum":"  329","line":"    /// Calling this method before the handshake is complete causes this method"},
{"lineNum":"  330","line":"    /// to return an empty string. See [handshake()](#method.handshake)."},
{"lineNum":"  331","line":"    pub fn cipher(&self) -> String {"},
{"lineNum":"  332","line":"        self.ctx.conn_cipher()"},
{"lineNum":"  333","line":"    }"},
{"lineNum":"  334","line":""},
{"lineNum":"  335","line":"    /// If available returns a reference to the inner object holding the"},
{"lineNum":"  336","line":"    /// socket."},
{"lineNum":"  337","line":"    pub fn inner(&self) -> Option<&T> {"},
{"lineNum":"  338","line":"        self.inner_stream.as_ref()"},
{"lineNum":"  339","line":"    }"},
{"lineNum":"  340","line":"    /// If available returns a mutable reference to the inner object"},
{"lineNum":"  341","line":"    /// holding the socket."},
{"lineNum":"  342","line":"    pub fn inner_mut(&mut self) -> Option<&mut T> {"},
{"lineNum":"  343","line":"        self.inner_stream.as_mut()"},
{"lineNum":"  344","line":"    }"},
{"lineNum":"  345","line":"}"},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"impl<T> Read for TlsStream<T> {"},
{"lineNum":"  348","line":"    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {","class":"linePartCov","hits":"2","order":"715","possible_hits":"3",},
{"lineNum":"  349","line":"        self.ctx","class":"lineCov","hits":"2","order":"716","possible_hits":"2",},
{"lineNum":"  350","line":"            .read(buf)","class":"lineCov","hits":"1","order":"717","possible_hits":"1",},
{"lineNum":"  351","line":"            .map_err(|err| io::Error::from(err))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  352","line":"    }"},
{"lineNum":"  353","line":"}"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"impl<T> Write for TlsStream<T> {"},
{"lineNum":"  356","line":"    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {","class":"linePartCov","hits":"2","order":"596","possible_hits":"3",},
{"lineNum":"  357","line":"        self.ctx","class":"lineCov","hits":"2","order":"597","possible_hits":"2",},
{"lineNum":"  358","line":"            .write(buf)","class":"lineCov","hits":"1","order":"598","possible_hits":"1",},
{"lineNum":"  359","line":"            .map_err(|err| io::Error::from(err))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  360","line":"    }"},
{"lineNum":"  361","line":"    fn flush(&mut self) -> io::Result<()> {"},
{"lineNum":"  362","line":"        Ok(())"},
{"lineNum":"  363","line":"    }"},
{"lineNum":"  364","line":"}"},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"impl<T> Drop for TlsStream<T> {"},
{"lineNum":"  367","line":"    fn drop(&mut self) {","class":"linePartCov","hits":"2","order":"901","possible_hits":"3",},
{"lineNum":"  368","line":"        let _ = self.ctx.close();","class":"lineCov","hits":"1","order":"902","possible_hits":"1",},
{"lineNum":"  369","line":"    }"},
{"lineNum":"  370","line":"}"},
{"lineNum":"  371","line":""},
{"lineNum":"  372","line":"pub struct ServerBuilder {"},
{"lineNum":"  373","line":"    cfg: Option<TlsConfig>,"},
{"lineNum":"  374","line":"    error: Option<TlsError>,"},
{"lineNum":"  375","line":"}"},
{"lineNum":"  376","line":""},
{"lineNum":"  377","line":"impl ServerBuilder {"},
{"lineNum":"  378","line":"    pub fn key_file(mut self, path: &str) -> Self {","class":"lineCov","hits":"1","order":"151","possible_hits":"1",},
{"lineNum":"  379","line":"        if self.error.is_some() {","class":"lineCov","hits":"1","order":"152","possible_hits":"1",},
{"lineNum":"  380","line":"            return self;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  381","line":"        }"},
{"lineNum":"  382","line":"        if let Some(cfg) = self.cfg.as_mut() {","class":"lineCov","hits":"1","order":"156","possible_hits":"1",},
{"lineNum":"  383","line":"            self.error = cfg.set_key_file(path).err();","class":"lineCov","hits":"1","order":"160","possible_hits":"1",},
{"lineNum":"  384","line":"        }"},
{"lineNum":"  385","line":"        self","class":"lineCov","hits":"1","order":"327","possible_hits":"1",},
{"lineNum":"  386","line":"    }","class":"linePartCov","hits":"3","order":"328","possible_hits":"4",},
{"lineNum":"  387","line":"    pub fn cert_file(mut self, path: &str) -> Self {","class":"lineCov","hits":"1","order":"329","possible_hits":"1",},
{"lineNum":"  388","line":"        if self.error.is_some() {","class":"lineCov","hits":"1","order":"330","possible_hits":"1",},
{"lineNum":"  389","line":"            return self;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  390","line":"        }"},
{"lineNum":"  391","line":"        if let Some(cfg) = self.cfg.as_mut() {","class":"lineCov","hits":"1","order":"331","possible_hits":"1",},
{"lineNum":"  392","line":"            self.error = cfg.set_cert_file(path).err();","class":"lineCov","hits":"1","order":"332","possible_hits":"1",},
{"lineNum":"  393","line":"        }"},
{"lineNum":"  394","line":"        self","class":"lineCov","hits":"1","order":"342","possible_hits":"1",},
{"lineNum":"  395","line":"    }","class":"linePartCov","hits":"2","order":"343","possible_hits":"4",},
{"lineNum":"  396","line":""},
{"lineNum":"  397","line":"    /// Create server context from settings"},
{"lineNum":"  398","line":"    fn new_ctx(self) -> TlsResult<TlsContext> {","class":"lineCov","hits":"1","order":"346","possible_hits":"1",},
{"lineNum":"  399","line":"        if let Some(err) = self.error {","class":"lineCov","hits":"1","order":"347","possible_hits":"1",},
{"lineNum":"  400","line":"            Err(err)"},
{"lineNum":"  401","line":"        } else {"},
{"lineNum":"  402","line":"            let mut cli = try!(TlsContext::new_server());","class":"linePartCov","hits":"2","order":"348","possible_hits":"4",},
{"lineNum":"  403","line":"            // This unwrap should be safe, we can\'t have a cfg without an error"},
{"lineNum":"  404","line":"            try!(cli.configure(self.cfg.unwrap()));","class":"lineCov","hits":"1","order":"387","possible_hits":"1",},
{"lineNum":"  405","line":"            Ok(cli)","class":"lineCov","hits":"1","order":"454","possible_hits":"1",},
{"lineNum":"  406","line":"        }","class":"linePartCov","hits":"1","order":"455","possible_hits":"3",},
{"lineNum":"  407","line":"    }","class":"linePartCov","hits":"2","order":"456","possible_hits":"4",},
{"lineNum":"  408","line":"    pub fn bind(self) -> TlsResult<TlsServer> {","class":"lineCov","hits":"1","order":"344","possible_hits":"1",},
{"lineNum":"  409","line":"        let ctx = try!(self.new_ctx());","class":"linePartCov","hits":"2","order":"345","possible_hits":"4",},
{"lineNum":"  410","line":"        Ok(TlsServer { ctx: ctx })","class":"lineCov","hits":"1","order":"457","possible_hits":"1",},
{"lineNum":"  411","line":"    }","class":"linePartCov","hits":"2","order":"458","possible_hits":"3",},
{"lineNum":"  412","line":"}"},
{"lineNum":"  413","line":""},
{"lineNum":"  414","line":"/// Create a new TLS server"},
{"lineNum":"  415","line":"pub fn new_server() -> ServerBuilder {","class":"lineCov","hits":"1","order":"6","possible_hits":"1",},
{"lineNum":"  416","line":"    if !raw::init() {","class":"lineCov","hits":"1","order":"7","possible_hits":"1",},
{"lineNum":"  417","line":"        return ServerBuilder {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  418","line":"            cfg: None,"},
{"lineNum":"  419","line":"            error: Some(TlsError::new(\"Failed to initialize libtls\")),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  420","line":"        };"},
{"lineNum":"  421","line":"    }"},
{"lineNum":"  422","line":""},
{"lineNum":"  423","line":"    match TlsConfig::new() {","class":"lineCov","hits":"1","order":"144","possible_hits":"1",},
{"lineNum":"  424","line":"        Ok(cfg) => {"},
{"lineNum":"  425","line":"            ServerBuilder {"},
{"lineNum":"  426","line":"                cfg: Some(cfg),"},
{"lineNum":"  427","line":"                error: None,"},
{"lineNum":"  428","line":"            }"},
{"lineNum":"  429","line":"        }"},
{"lineNum":"  430","line":"        Err(err) => {"},
{"lineNum":"  431","line":"            ServerBuilder {"},
{"lineNum":"  432","line":"                cfg: None,"},
{"lineNum":"  433","line":"                error: Some(err),"},
{"lineNum":"  434","line":"            }"},
{"lineNum":"  435","line":"        }"},
{"lineNum":"  436","line":"    }"},
{"lineNum":"  437","line":"}","class":"lineCov","hits":"1","order":"150","possible_hits":"1",},
{"lineNum":"  438","line":""},
{"lineNum":"  439","line":"/// TLS Server, used to start TLS session over existing sockets."},
{"lineNum":"  440","line":"pub struct TlsServer {"},
{"lineNum":"  441","line":"    ctx: TlsContext,"},
{"lineNum":"  442","line":"}"},
{"lineNum":"  443","line":""},
{"lineNum":"  444","line":"impl TlsServer {"},
{"lineNum":"  445","line":"    #[cfg(unix)]"},
{"lineNum":"  446","line":"    /// Start a new TLS connection over an existing file descriptor (server-side)"},
{"lineNum":"  447","line":"    pub fn accept_socket<R: AsRawFd>(&mut self, r: &R) -> io::Result<TlsStream<()>> {"},
{"lineNum":"  448","line":"        let c = try!(self.ctx.accept_socket(r.as_raw_fd()));"},
{"lineNum":"  449","line":"        Ok(TlsStream {"},
{"lineNum":"  450","line":"            ctx: c,"},
{"lineNum":"  451","line":"            inner_stream: None,"},
{"lineNum":"  452","line":"        })"},
{"lineNum":"  453","line":"    }"},
{"lineNum":"  454","line":"    #[cfg(unix)]"},
{"lineNum":"  455","line":"    pub fn accept<F: AsRawFd>(&mut self, inner_stream: F) -> io::Result<TlsStream<F>> {","class":"linePartCov","hits":"3","order":"564","possible_hits":"4",},
{"lineNum":"  456","line":"        let fd = inner_stream.as_raw_fd();","class":"linePartCov","hits":"1","order":"565","possible_hits":"2",},
{"lineNum":"  457","line":"        let c = try!(self.ctx.accept_socket(fd));","class":"linePartCov","hits":"2","order":"566","possible_hits":"4",},
{"lineNum":"  458","line":"        Ok(TlsStream {","class":"lineCov","hits":"1","order":"594","possible_hits":"1",},
{"lineNum":"  459","line":"            ctx: c,","class":"lineCov","hits":"1","order":"595","possible_hits":"1",},
{"lineNum":"  460","line":"            inner_stream: Some(inner_stream),"},
{"lineNum":"  461","line":"        })"},
{"lineNum":"  462","line":"    }"},
{"lineNum":"  463","line":""},
{"lineNum":"  464","line":"    #[cfg(windows)]"},
{"lineNum":"  465","line":"    /// Start a new TLS connection over an existing socket (server-side)"},
{"lineNum":"  466","line":"    pub fn accept_socket<R: AsRawSocket>(&mut self, r: &R) -> TlsResult<TlsStream<()>> {"},
{"lineNum":"  467","line":"        let c = try!(self.ctx.accept_socket(r.as_raw_socket()));"},
{"lineNum":"  468","line":"        Ok(TlsStream {"},
{"lineNum":"  469","line":"            ctx: c,"},
{"lineNum":"  470","line":"            inner_stream: None,"},
{"lineNum":"  471","line":"        })"},
{"lineNum":"  472","line":"    }"},
{"lineNum":"  473","line":""},
{"lineNum":"  474","line":"    #[cfg(windows)]"},
{"lineNum":"  475","line":"    pub fn accept<F: AsRawSocket>(&mut self, inner_stream: F) -> TlsResult<TlsStream<F>> {"},
{"lineNum":"  476","line":"        let sock = inner_stream.as_raw_socket();"},
{"lineNum":"  477","line":"        let c = try!(self.ctx.accept_socket(sock));"},
{"lineNum":"  478","line":"        Ok(TlsStream {"},
{"lineNum":"  479","line":"            ctx: c,"},
{"lineNum":"  480","line":"            inner_stream: Some(inner_stream),"},
{"lineNum":"  481","line":"        })"},
{"lineNum":"  482","line":"    }"},
{"lineNum":"  483","line":"}"},
{"lineNum":"  484","line":""},
{"lineNum":"  485","line":"#[test]"},
{"lineNum":"  486","line":"fn test_protocols() {"},
{"lineNum":"  487","line":"    let mut cfg = TlsConfig::new().unwrap();"},
{"lineNum":"  488","line":""},
{"lineNum":"  489","line":"    // The following are all supported"},
{"lineNum":"  490","line":"    cfg.set_protocols(\"all\").unwrap();"},
{"lineNum":"  491","line":"    cfg.set_protocols(\"legacy\").unwrap();"},
{"lineNum":"  492","line":"    cfg.set_protocols(\"default\").unwrap();"},
{"lineNum":"  493","line":"    cfg.set_protocols(\"secure\").unwrap();"},
{"lineNum":"  494","line":"    cfg.set_protocols(\"tlsv1\").unwrap();"},
{"lineNum":"  495","line":"    cfg.set_protocols(\"tlsv1.0\").unwrap();"},
{"lineNum":"  496","line":"    cfg.set_protocols(\"tlsv1.1\").unwrap();"},
{"lineNum":"  497","line":"    cfg.set_protocols(\"tlsv1.2\").unwrap();"},
{"lineNum":"  498","line":""},
{"lineNum":"  499","line":"    // This is not valid"},
{"lineNum":"  500","line":"    assert!(cfg.set_protocols(\"unknown-proto\").is_err());"},
{"lineNum":"  501","line":"}"},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"#[test]"},
{"lineNum":"  504","line":"fn client_ctx_defs() {"},
{"lineNum":"  505","line":"    let c = TlsContext::new_client().unwrap();"},
{"lineNum":"  506","line":""},
{"lineNum":"  507","line":"    // These are the defaults before the connection is set"},
{"lineNum":"  508","line":"    assert_eq!(c.conn_version(), \"\");"},
{"lineNum":"  509","line":"    assert_eq!(c.conn_cipher(), \"\");"},
{"lineNum":"  510","line":"    assert!(c.peer_cert_notbefore().is_err());"},
{"lineNum":"  511","line":"    assert!(c.peer_cert_notafter().is_err());"},
{"lineNum":"  512","line":"    assert_eq!(c.peer_cert_issuer(), \"\");"},
{"lineNum":"  513","line":"    assert_eq!(c.peer_cert_subject(), \"\");"},
{"lineNum":"  514","line":"    assert_eq!(c.peer_cert_hash(), \"\");"},
{"lineNum":"  515","line":"    assert_eq!(c.peer_cert_contains_name(\"some.name\"), false);"},
{"lineNum":"  516","line":"    assert_eq!(c.peer_cert_provided(), false);"},
{"lineNum":"  517","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test_server-9ef2987148640087", "date" : "2016-02-13 23:42:14", "instrumented" : 81, "covered" : 70,};
var merged_data = [];
