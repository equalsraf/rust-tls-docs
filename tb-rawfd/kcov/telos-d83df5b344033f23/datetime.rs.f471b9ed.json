var data = {lines:[
{"lineNum":"    1","line":"// This is a part of rust-chrono."},
{"lineNum":"    2","line":"// Copyright (c) 2014-2015, Kang Seonghoon."},
{"lineNum":"    3","line":"// See README.md and LICENSE.txt for details."},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"/*!"},
{"lineNum":"    6","line":" * ISO 8601 date and time without timezone."},
{"lineNum":"    7","line":" */"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"use std::{str, fmt, hash};"},
{"lineNum":"   10","line":"use std::ops::{Add, Sub};"},
{"lineNum":"   11","line":"use num::traits::ToPrimitive;"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"use {Weekday, Timelike, Datelike};"},
{"lineNum":"   14","line":"use div::div_mod_floor;"},
{"lineNum":"   15","line":"use duration::Duration;"},
{"lineNum":"   16","line":"use naive::time::NaiveTime;"},
{"lineNum":"   17","line":"use naive::date::NaiveDate;"},
{"lineNum":"   18","line":"use format::{Item, Numeric, Pad, Fixed};"},
{"lineNum":"   19","line":"use format::{parse, Parsed, ParseError, ParseResult, DelayedFormat, StrftimeItems};"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"/// ISO 8601 combined date and time without timezone."},
{"lineNum":"   22","line":"#[derive(PartialEq, Eq, PartialOrd, Ord, Copy, Clone)]"},
{"lineNum":"   23","line":"#[cfg_attr(feature = \"rustc-serialize\", derive(RustcEncodable, RustcDecodable))]"},
{"lineNum":"   24","line":"pub struct NaiveDateTime {"},
{"lineNum":"   25","line":"    date: NaiveDate,"},
{"lineNum":"   26","line":"    time: NaiveTime,"},
{"lineNum":"   27","line":"}"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"impl NaiveDateTime {"},
{"lineNum":"   30","line":"    /// Makes a new `NaiveDateTime` from date and time components."},
{"lineNum":"   31","line":"    /// Equivalent to `date.and_time(time)` and many other helper constructors on `NaiveDate`."},
{"lineNum":"   32","line":"    #[inline]"},
{"lineNum":"   33","line":"    pub fn new(date: NaiveDate, time: NaiveTime) -> NaiveDateTime {"},
{"lineNum":"   34","line":"        NaiveDateTime { date: date, time: time }"},
{"lineNum":"   35","line":"    }"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"    /// Makes a new `NaiveDateTime` from the number of non-leap seconds"},
{"lineNum":"   38","line":"    /// since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")"},
{"lineNum":"   39","line":"    /// and the number of nanoseconds since the last whole non-leap second."},
{"lineNum":"   40","line":"    ///"},
{"lineNum":"   41","line":"    /// Panics on the out-of-range number of seconds and/or invalid nanosecond."},
{"lineNum":"   42","line":"    #[inline]"},
{"lineNum":"   43","line":"    pub fn from_timestamp(secs: i64, nsecs: u32) -> NaiveDateTime {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   44","line":"        let datetime = NaiveDateTime::from_timestamp_opt(secs, nsecs);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   45","line":"        datetime.expect(\"invalid or out-of-range datetime\")","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   46","line":"    }"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"    /// Makes a new `NaiveDateTime` from the number of non-leap seconds"},
{"lineNum":"   49","line":"    /// since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")"},
{"lineNum":"   50","line":"    /// and the number of nanoseconds since the last whole non-leap second."},
{"lineNum":"   51","line":"    ///"},
{"lineNum":"   52","line":"    /// Returns `None` on the out-of-range number of seconds and/or invalid nanosecond."},
{"lineNum":"   53","line":"    #[inline]"},
{"lineNum":"   54","line":"    pub fn from_timestamp_opt(secs: i64, nsecs: u32) -> Option<NaiveDateTime> {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   55","line":"        let (days, secs) = div_mod_floor(secs, 86400);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   56","line":"        let date = days.to_i32().and_then(|days| days.checked_add(719163))","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   57","line":"                                .and_then(|days_ce| NaiveDate::from_num_days_from_ce_opt(days_ce));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   58","line":"        let time = NaiveTime::from_num_seconds_from_midnight_opt(secs as u32, nsecs);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   59","line":"        match (date, time) {"},
{"lineNum":"   60","line":"            (Some(date), Some(time)) => Some(NaiveDateTime { date: date, time: time }),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   61","line":"            (_, _) => None,"},
{"lineNum":"   62","line":"        }"},
{"lineNum":"   63","line":"    }"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"    /// *Deprecated:* Same to `NaiveDateTime::from_timestamp`."},
{"lineNum":"   66","line":"    #[inline]"},
{"lineNum":"   67","line":"    pub fn from_num_seconds_from_unix_epoch(secs: i64, nsecs: u32) -> NaiveDateTime {"},
{"lineNum":"   68","line":"        NaiveDateTime::from_timestamp(secs, nsecs)"},
{"lineNum":"   69","line":"    }"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"    /// *Deprecated:* Same to `NaiveDateTime::from_timestamp_opt`."},
{"lineNum":"   72","line":"    #[inline]"},
{"lineNum":"   73","line":"    pub fn from_num_seconds_from_unix_epoch_opt(secs: i64, nsecs: u32) -> Option<NaiveDateTime> {"},
{"lineNum":"   74","line":"        NaiveDateTime::from_timestamp_opt(secs, nsecs)"},
{"lineNum":"   75","line":"    }"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"    /// Parses a string with the specified format string and returns a new `NaiveDateTime`."},
{"lineNum":"   78","line":"    /// See the [`format::strftime` module](../../format/strftime/index.html)"},
{"lineNum":"   79","line":"    /// on the supported escape sequences."},
{"lineNum":"   80","line":"    pub fn parse_from_str(s: &str, fmt: &str) -> ParseResult<NaiveDateTime> {"},
{"lineNum":"   81","line":"        let mut parsed = Parsed::new();"},
{"lineNum":"   82","line":"        try!(parse(&mut parsed, s, StrftimeItems::new(fmt)));"},
{"lineNum":"   83","line":"        parsed.to_naive_datetime_with_offset(0) // no offset adjustment"},
{"lineNum":"   84","line":"    }"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"    /// Retrieves a date component."},
{"lineNum":"   87","line":"    #[inline]"},
{"lineNum":"   88","line":"    pub fn date(&self) -> NaiveDate {"},
{"lineNum":"   89","line":"        self.date"},
{"lineNum":"   90","line":"    }"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"    /// Retrieves a time component."},
{"lineNum":"   93","line":"    #[inline]"},
{"lineNum":"   94","line":"    pub fn time(&self) -> NaiveTime {"},
{"lineNum":"   95","line":"        self.time"},
{"lineNum":"   96","line":"    }"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"    /// Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC"},
{"lineNum":"   99","line":"    /// (aka \"UNIX timestamp\")."},
{"lineNum":"  100","line":"    /// Note that this does *not* account for the timezone!"},
{"lineNum":"  101","line":"    #[inline]"},
{"lineNum":"  102","line":"    pub fn timestamp(&self) -> i64 {"},
{"lineNum":"  103","line":"        let ndays = self.date.num_days_from_ce() as i64;"},
{"lineNum":"  104","line":"        let nseconds = self.time.num_seconds_from_midnight() as i64;"},
{"lineNum":"  105","line":"        (ndays - 719163) * 86400 + nseconds"},
{"lineNum":"  106","line":"    }"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"    /// *Deprecated:* Same to `NaiveDateTime::timestamp`."},
{"lineNum":"  109","line":"    #[inline]"},
{"lineNum":"  110","line":"    pub fn num_seconds_from_unix_epoch(&self) -> i64 {"},
{"lineNum":"  111","line":"        self.timestamp()"},
{"lineNum":"  112","line":"    }"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"    /// Adds given `Duration` to the current date and time."},
{"lineNum":"  115","line":"    ///"},
{"lineNum":"  116","line":"    /// Returns `None` when it will result in overflow."},
{"lineNum":"  117","line":"    pub fn checked_add(self, rhs: Duration) -> Option<NaiveDateTime> {"},
{"lineNum":"  118","line":"        // Duration does not directly give its parts, so we need some additional calculations."},
{"lineNum":"  119","line":"        let days = rhs.num_days();"},
{"lineNum":"  120","line":"        let nanos = (rhs - Duration::days(days)).num_nanoseconds().unwrap();"},
{"lineNum":"  121","line":"        debug_assert!(Duration::days(days) + Duration::nanoseconds(nanos) == rhs);"},
{"lineNum":"  122","line":"        debug_assert!(-86400_000_000_000 < nanos && nanos < 86400_000_000_000);"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"        let mut date = try_opt!(self.date.checked_add(Duration::days(days)));"},
{"lineNum":"  125","line":"        let time = self.time + Duration::nanoseconds(nanos);"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"        // time always wraps around, but date needs to be adjusted for overflow."},
{"lineNum":"  128","line":"        if nanos < 0 && time > self.time {"},
{"lineNum":"  129","line":"            date = try_opt!(date.pred_opt());"},
{"lineNum":"  130","line":"        } else if nanos > 0 && time < self.time {"},
{"lineNum":"  131","line":"            date = try_opt!(date.succ_opt());"},
{"lineNum":"  132","line":"        }"},
{"lineNum":"  133","line":"        Some(NaiveDateTime { date: date, time: time })"},
{"lineNum":"  134","line":"    }"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"    /// Subtracts given `Duration` from the current date and time."},
{"lineNum":"  137","line":"    ///"},
{"lineNum":"  138","line":"    /// Returns `None` when it will result in overflow."},
{"lineNum":"  139","line":"    pub fn checked_sub(self, rhs: Duration) -> Option<NaiveDateTime> {"},
{"lineNum":"  140","line":"        // Duration does not directly give its parts, so we need some additional calculations."},
{"lineNum":"  141","line":"        let days = rhs.num_days();"},
{"lineNum":"  142","line":"        let nanos = (rhs - Duration::days(days)).num_nanoseconds().unwrap();"},
{"lineNum":"  143","line":"        debug_assert!(Duration::days(days) + Duration::nanoseconds(nanos) == rhs);"},
{"lineNum":"  144","line":"        debug_assert!(-86400_000_000_000 < nanos && nanos < 86400_000_000_000);"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"        let mut date = try_opt!(self.date.checked_sub(Duration::days(days)));"},
{"lineNum":"  147","line":"        let time = self.time - Duration::nanoseconds(nanos);"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"        // time always wraps around, but date needs to be adjusted for overflow."},
{"lineNum":"  150","line":"        if nanos > 0 && time > self.time {"},
{"lineNum":"  151","line":"            date = try_opt!(date.pred_opt());"},
{"lineNum":"  152","line":"        } else if nanos < 0 && time < self.time {"},
{"lineNum":"  153","line":"            date = try_opt!(date.succ_opt());"},
{"lineNum":"  154","line":"        }"},
{"lineNum":"  155","line":"        Some(NaiveDateTime { date: date, time: time })"},
{"lineNum":"  156","line":"    }"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"    /// Formats the combined date and time with the specified formatting items."},
{"lineNum":"  159","line":"    #[inline]"},
{"lineNum":"  160","line":"    pub fn format_with_items<\'a, I>(&self, items: I) -> DelayedFormat<I>"},
{"lineNum":"  161","line":"            where I: Iterator<Item=Item<\'a>> + Clone {"},
{"lineNum":"  162","line":"        DelayedFormat::new(Some(self.date.clone()), Some(self.time.clone()), items)"},
{"lineNum":"  163","line":"    }"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"    /// Formats the combined date and time with the specified format string."},
{"lineNum":"  166","line":"    /// See the [`format::strftime` module](../../format/strftime/index.html)"},
{"lineNum":"  167","line":"    /// on the supported escape sequences."},
{"lineNum":"  168","line":"    #[inline]"},
{"lineNum":"  169","line":"    pub fn format<\'a>(&self, fmt: &\'a str) -> DelayedFormat<StrftimeItems<\'a>> {"},
{"lineNum":"  170","line":"        self.format_with_items(StrftimeItems::new(fmt))"},
{"lineNum":"  171","line":"    }"},
{"lineNum":"  172","line":"}"},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"impl Datelike for NaiveDateTime {"},
{"lineNum":"  175","line":"    #[inline] fn year(&self) -> i32 { self.date.year() }"},
{"lineNum":"  176","line":"    #[inline] fn month(&self) -> u32 { self.date.month() }"},
{"lineNum":"  177","line":"    #[inline] fn month0(&self) -> u32 { self.date.month0() }"},
{"lineNum":"  178","line":"    #[inline] fn day(&self) -> u32 { self.date.day() }"},
{"lineNum":"  179","line":"    #[inline] fn day0(&self) -> u32 { self.date.day0() }"},
{"lineNum":"  180","line":"    #[inline] fn ordinal(&self) -> u32 { self.date.ordinal() }"},
{"lineNum":"  181","line":"    #[inline] fn ordinal0(&self) -> u32 { self.date.ordinal0() }"},
{"lineNum":"  182","line":"    #[inline] fn weekday(&self) -> Weekday { self.date.weekday() }"},
{"lineNum":"  183","line":"    #[inline] fn isoweekdate(&self) -> (i32, u32, Weekday) { self.date.isoweekdate() }"},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"    #[inline]"},
{"lineNum":"  186","line":"    fn with_year(&self, year: i32) -> Option<NaiveDateTime> {"},
{"lineNum":"  187","line":"        self.date.with_year(year).map(|d| NaiveDateTime { date: d, ..*self })"},
{"lineNum":"  188","line":"    }"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"    #[inline]"},
{"lineNum":"  191","line":"    fn with_month(&self, month: u32) -> Option<NaiveDateTime> {"},
{"lineNum":"  192","line":"        self.date.with_month(month).map(|d| NaiveDateTime { date: d, ..*self })"},
{"lineNum":"  193","line":"    }"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"    #[inline]"},
{"lineNum":"  196","line":"    fn with_month0(&self, month0: u32) -> Option<NaiveDateTime> {"},
{"lineNum":"  197","line":"        self.date.with_month0(month0).map(|d| NaiveDateTime { date: d, ..*self })"},
{"lineNum":"  198","line":"    }"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"    #[inline]"},
{"lineNum":"  201","line":"    fn with_day(&self, day: u32) -> Option<NaiveDateTime> {"},
{"lineNum":"  202","line":"        self.date.with_day(day).map(|d| NaiveDateTime { date: d, ..*self })"},
{"lineNum":"  203","line":"    }"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"    #[inline]"},
{"lineNum":"  206","line":"    fn with_day0(&self, day0: u32) -> Option<NaiveDateTime> {"},
{"lineNum":"  207","line":"        self.date.with_day0(day0).map(|d| NaiveDateTime { date: d, ..*self })"},
{"lineNum":"  208","line":"    }"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"    #[inline]"},
{"lineNum":"  211","line":"    fn with_ordinal(&self, ordinal: u32) -> Option<NaiveDateTime> {"},
{"lineNum":"  212","line":"        self.date.with_ordinal(ordinal).map(|d| NaiveDateTime { date: d, ..*self })"},
{"lineNum":"  213","line":"    }"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"    #[inline]"},
{"lineNum":"  216","line":"    fn with_ordinal0(&self, ordinal0: u32) -> Option<NaiveDateTime> {"},
{"lineNum":"  217","line":"        self.date.with_ordinal0(ordinal0).map(|d| NaiveDateTime { date: d, ..*self })"},
{"lineNum":"  218","line":"    }"},
{"lineNum":"  219","line":"}"},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"impl Timelike for NaiveDateTime {"},
{"lineNum":"  222","line":"    #[inline] fn hour(&self) -> u32 { self.time.hour() }"},
{"lineNum":"  223","line":"    #[inline] fn minute(&self) -> u32 { self.time.minute() }"},
{"lineNum":"  224","line":"    #[inline] fn second(&self) -> u32 { self.time.second() }"},
{"lineNum":"  225","line":"    #[inline] fn nanosecond(&self) -> u32 { self.time.nanosecond() }"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"    #[inline]"},
{"lineNum":"  228","line":"    fn with_hour(&self, hour: u32) -> Option<NaiveDateTime> {"},
{"lineNum":"  229","line":"        self.time.with_hour(hour).map(|t| NaiveDateTime { time: t, ..*self })"},
{"lineNum":"  230","line":"    }"},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"    #[inline]"},
{"lineNum":"  233","line":"    fn with_minute(&self, min: u32) -> Option<NaiveDateTime> {"},
{"lineNum":"  234","line":"        self.time.with_minute(min).map(|t| NaiveDateTime { time: t, ..*self })"},
{"lineNum":"  235","line":"    }"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"    #[inline]"},
{"lineNum":"  238","line":"    fn with_second(&self, sec: u32) -> Option<NaiveDateTime> {"},
{"lineNum":"  239","line":"        self.time.with_second(sec).map(|t| NaiveDateTime { time: t, ..*self })"},
{"lineNum":"  240","line":"    }"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"    #[inline]"},
{"lineNum":"  243","line":"    fn with_nanosecond(&self, nano: u32) -> Option<NaiveDateTime> {"},
{"lineNum":"  244","line":"        self.time.with_nanosecond(nano).map(|t| NaiveDateTime { time: t, ..*self })"},
{"lineNum":"  245","line":"    }"},
{"lineNum":"  246","line":"}"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"impl hash::Hash for NaiveDateTime {"},
{"lineNum":"  249","line":"    fn hash<H: hash::Hasher>(&self, state: &mut H) {"},
{"lineNum":"  250","line":"        self.date.hash(state);"},
{"lineNum":"  251","line":"        self.time.hash(state);"},
{"lineNum":"  252","line":"    }"},
{"lineNum":"  253","line":"}"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"impl Add<Duration> for NaiveDateTime {"},
{"lineNum":"  256","line":"    type Output = NaiveDateTime;"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"    #[inline]"},
{"lineNum":"  259","line":"    fn add(self, rhs: Duration) -> NaiveDateTime {"},
{"lineNum":"  260","line":"        self.checked_add(rhs).expect(\"`NaiveDateTime + Duration` overflowed\")"},
{"lineNum":"  261","line":"    }"},
{"lineNum":"  262","line":"}"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"impl Sub<NaiveDateTime> for NaiveDateTime {"},
{"lineNum":"  265","line":"    type Output = Duration;"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"    fn sub(self, rhs: NaiveDateTime) -> Duration {"},
{"lineNum":"  268","line":"        (self.date - rhs.date) + (self.time - rhs.time)"},
{"lineNum":"  269","line":"    }"},
{"lineNum":"  270","line":"}"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"impl Sub<Duration> for NaiveDateTime {"},
{"lineNum":"  273","line":"    type Output = NaiveDateTime;"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"    #[inline]"},
{"lineNum":"  276","line":"    fn sub(self, rhs: Duration) -> NaiveDateTime {"},
{"lineNum":"  277","line":"        self.checked_sub(rhs).expect(\"`NaiveDateTime - Duration` overflowed\")"},
{"lineNum":"  278","line":"    }"},
{"lineNum":"  279","line":"}"},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"impl fmt::Debug for NaiveDateTime {"},
{"lineNum":"  282","line":"    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"},
{"lineNum":"  283","line":"        write!(f, \"{:?}T{:?}\", self.date, self.time)"},
{"lineNum":"  284","line":"    }"},
{"lineNum":"  285","line":"}"},
{"lineNum":"  286","line":""},
{"lineNum":"  287","line":"impl fmt::Display for NaiveDateTime {"},
{"lineNum":"  288","line":"    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"},
{"lineNum":"  289","line":"        write!(f, \"{} {}\", self.date, self.time)"},
{"lineNum":"  290","line":"    }"},
{"lineNum":"  291","line":"}"},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"impl str::FromStr for NaiveDateTime {"},
{"lineNum":"  294","line":"    type Err = ParseError;"},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"    fn from_str(s: &str) -> ParseResult<NaiveDateTime> {"},
{"lineNum":"  297","line":"        const ITEMS: &\'static [Item<\'static>] = &["},
{"lineNum":"  298","line":"            Item::Space(\"\"), Item::Numeric(Numeric::Year, Pad::Zero),"},
{"lineNum":"  299","line":"            Item::Space(\"\"), Item::Literal(\"-\"),"},
{"lineNum":"  300","line":"            Item::Space(\"\"), Item::Numeric(Numeric::Month, Pad::Zero),"},
{"lineNum":"  301","line":"            Item::Space(\"\"), Item::Literal(\"-\"),"},
{"lineNum":"  302","line":"            Item::Space(\"\"), Item::Numeric(Numeric::Day, Pad::Zero),"},
{"lineNum":"  303","line":"            Item::Space(\"\"), Item::Literal(\"T\"), // XXX shouldn\'t this be case-insensitive?"},
{"lineNum":"  304","line":"            Item::Space(\"\"), Item::Numeric(Numeric::Hour, Pad::Zero),"},
{"lineNum":"  305","line":"            Item::Space(\"\"), Item::Literal(\":\"),"},
{"lineNum":"  306","line":"            Item::Space(\"\"), Item::Numeric(Numeric::Minute, Pad::Zero),"},
{"lineNum":"  307","line":"            Item::Space(\"\"), Item::Literal(\":\"),"},
{"lineNum":"  308","line":"            Item::Space(\"\"), Item::Numeric(Numeric::Second, Pad::Zero),"},
{"lineNum":"  309","line":"            Item::Fixed(Fixed::Nanosecond), Item::Space(\"\"),"},
{"lineNum":"  310","line":"        ];"},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"        let mut parsed = Parsed::new();"},
{"lineNum":"  313","line":"        try!(parse(&mut parsed, s, ITEMS.iter().cloned()));"},
{"lineNum":"  314","line":"        parsed.to_naive_datetime_with_offset(0)"},
{"lineNum":"  315","line":"    }"},
{"lineNum":"  316","line":"}"},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"#[cfg(feature = \"serde\")]"},
{"lineNum":"  319","line":"mod serde {"},
{"lineNum":"  320","line":"    use super::NaiveDateTime;"},
{"lineNum":"  321","line":"    use serde::{ser, de};"},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"    impl ser::Serialize for NaiveDateTime {"},
{"lineNum":"  324","line":"        fn serialize<S>(&self, serializer: &mut S) -> Result<(), S::Error>"},
{"lineNum":"  325","line":"            where S: ser::Serializer"},
{"lineNum":"  326","line":"        {"},
{"lineNum":"  327","line":"            serializer.visit_str(&format!(\"{:?}\", self))"},
{"lineNum":"  328","line":"        }"},
{"lineNum":"  329","line":"    }"},
{"lineNum":"  330","line":""},
{"lineNum":"  331","line":"    struct NaiveDateTimeVisitor;"},
{"lineNum":"  332","line":""},
{"lineNum":"  333","line":"    impl de::Visitor for NaiveDateTimeVisitor {"},
{"lineNum":"  334","line":"        type Value = NaiveDateTime;"},
{"lineNum":"  335","line":""},
{"lineNum":"  336","line":"        fn visit_str<E>(&mut self, value: &str) -> Result<NaiveDateTime, E>"},
{"lineNum":"  337","line":"            where E: de::Error"},
{"lineNum":"  338","line":"        {"},
{"lineNum":"  339","line":"            value.parse().map_err(|err| E::syntax(&format!(\"{}\", err)))"},
{"lineNum":"  340","line":"        }"},
{"lineNum":"  341","line":"    }"},
{"lineNum":"  342","line":""},
{"lineNum":"  343","line":"    impl de::Deserialize for NaiveDateTime {"},
{"lineNum":"  344","line":"        fn deserialize<D>(deserializer: &mut D) -> Result<Self, D::Error>"},
{"lineNum":"  345","line":"            where D: de::Deserializer"},
{"lineNum":"  346","line":"        {"},
{"lineNum":"  347","line":"            deserializer.visit(NaiveDateTimeVisitor)"},
{"lineNum":"  348","line":"        }"},
{"lineNum":"  349","line":"    }"},
{"lineNum":"  350","line":"}"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"#[cfg(test)]"},
{"lineNum":"  353","line":"mod tests {"},
{"lineNum":"  354","line":"    use super::NaiveDateTime;"},
{"lineNum":"  355","line":"    use Datelike;"},
{"lineNum":"  356","line":"    use duration::Duration;"},
{"lineNum":"  357","line":"    use naive::date as naive_date;"},
{"lineNum":"  358","line":"    use naive::date::NaiveDate;"},
{"lineNum":"  359","line":"    use std::i64;"},
{"lineNum":"  360","line":""},
{"lineNum":"  361","line":"    #[test]"},
{"lineNum":"  362","line":"    fn test_datetime_from_timestamp() {"},
{"lineNum":"  363","line":"        let from_timestamp = |secs| NaiveDateTime::from_timestamp_opt(secs, 0);"},
{"lineNum":"  364","line":"        let ymdhms = |y,m,d,h,n,s| NaiveDate::from_ymd(y,m,d).and_hms(h,n,s);"},
{"lineNum":"  365","line":"        assert_eq!(from_timestamp(-1), Some(ymdhms(1969, 12, 31, 23, 59, 59)));"},
{"lineNum":"  366","line":"        assert_eq!(from_timestamp(0), Some(ymdhms(1970, 1, 1, 0, 0, 0)));"},
{"lineNum":"  367","line":"        assert_eq!(from_timestamp(1), Some(ymdhms(1970, 1, 1, 0, 0, 1)));"},
{"lineNum":"  368","line":"        assert_eq!(from_timestamp(1_000_000_000), Some(ymdhms(2001, 9, 9, 1, 46, 40)));"},
{"lineNum":"  369","line":"        assert_eq!(from_timestamp(0x7fffffff), Some(ymdhms(2038, 1, 19, 3, 14, 7)));"},
{"lineNum":"  370","line":"        assert_eq!(from_timestamp(i64::MIN), None);"},
{"lineNum":"  371","line":"        assert_eq!(from_timestamp(i64::MAX), None);"},
{"lineNum":"  372","line":"    }"},
{"lineNum":"  373","line":""},
{"lineNum":"  374","line":"    #[test]"},
{"lineNum":"  375","line":"    fn test_datetime_add() {"},
{"lineNum":"  376","line":"        fn check((y,m,d,h,n,s): (i32,u32,u32,u32,u32,u32), rhs: Duration,"},
{"lineNum":"  377","line":"                 result: Option<(i32,u32,u32,u32,u32,u32)>) {"},
{"lineNum":"  378","line":"            let lhs = NaiveDate::from_ymd(y, m, d).and_hms(h, n, s);"},
{"lineNum":"  379","line":"            let sum = result.map(|(y,m,d,h,n,s)| NaiveDate::from_ymd(y, m, d).and_hms(h, n, s));"},
{"lineNum":"  380","line":"            assert_eq!(lhs.checked_add(rhs), sum);"},
{"lineNum":"  381","line":"            assert_eq!(lhs.checked_sub(-rhs), sum);"},
{"lineNum":"  382","line":"        };"},
{"lineNum":"  383","line":""},
{"lineNum":"  384","line":"        check((2014,5,6, 7,8,9), Duration::seconds(3600 + 60 + 1), Some((2014,5,6, 8,9,10)));"},
{"lineNum":"  385","line":"        check((2014,5,6, 7,8,9), Duration::seconds(-(3600 + 60 + 1)), Some((2014,5,6, 6,7,8)));"},
{"lineNum":"  386","line":"        check((2014,5,6, 7,8,9), Duration::seconds(86399), Some((2014,5,7, 7,8,8)));"},
{"lineNum":"  387","line":"        check((2014,5,6, 7,8,9), Duration::seconds(86400 * 10), Some((2014,5,16, 7,8,9)));"},
{"lineNum":"  388","line":"        check((2014,5,6, 7,8,9), Duration::seconds(-86400 * 10), Some((2014,4,26, 7,8,9)));"},
{"lineNum":"  389","line":"        check((2014,5,6, 7,8,9), Duration::seconds(86400 * 10), Some((2014,5,16, 7,8,9)));"},
{"lineNum":"  390","line":""},
{"lineNum":"  391","line":"        // overflow check"},
{"lineNum":"  392","line":"        // assumes that we have correct values for MAX/MIN_DAYS_FROM_YEAR_0 from `naive::date`."},
{"lineNum":"  393","line":"        // (they are private constants, but the equivalence is tested in that module.)"},
{"lineNum":"  394","line":"        let max_days_from_year_0 = naive_date::MAX - NaiveDate::from_ymd(0,1,1);"},
{"lineNum":"  395","line":"        check((0,1,1, 0,0,0), max_days_from_year_0, Some((naive_date::MAX.year(),12,31, 0,0,0)));"},
{"lineNum":"  396","line":"        check((0,1,1, 0,0,0), max_days_from_year_0 + Duration::seconds(86399),"},
{"lineNum":"  397","line":"              Some((naive_date::MAX.year(),12,31, 23,59,59)));"},
{"lineNum":"  398","line":"        check((0,1,1, 0,0,0), max_days_from_year_0 + Duration::seconds(86400), None);"},
{"lineNum":"  399","line":"        check((0,1,1, 0,0,0), Duration::max_value(), None);"},
{"lineNum":"  400","line":""},
{"lineNum":"  401","line":"        let min_days_from_year_0 = naive_date::MIN - NaiveDate::from_ymd(0,1,1);"},
{"lineNum":"  402","line":"        check((0,1,1, 0,0,0), min_days_from_year_0, Some((naive_date::MIN.year(),1,1, 0,0,0)));"},
{"lineNum":"  403","line":"        check((0,1,1, 0,0,0), min_days_from_year_0 - Duration::seconds(1), None);"},
{"lineNum":"  404","line":"        check((0,1,1, 0,0,0), Duration::min_value(), None);"},
{"lineNum":"  405","line":"    }"},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":"    #[test]"},
{"lineNum":"  408","line":"    fn test_datetime_sub() {"},
{"lineNum":"  409","line":"        let ymdhms = |y,m,d,h,n,s| NaiveDate::from_ymd(y,m,d).and_hms(h,n,s);"},
{"lineNum":"  410","line":"        assert_eq!(ymdhms(2014, 5, 6, 7, 8, 9) - ymdhms(2014, 5, 6, 7, 8, 9), Duration::zero());"},
{"lineNum":"  411","line":"        assert_eq!(ymdhms(2014, 5, 6, 7, 8, 10) - ymdhms(2014, 5, 6, 7, 8, 9),"},
{"lineNum":"  412","line":"                   Duration::seconds(1));"},
{"lineNum":"  413","line":"        assert_eq!(ymdhms(2014, 5, 6, 7, 8, 9) - ymdhms(2014, 5, 6, 7, 8, 10),"},
{"lineNum":"  414","line":"                   Duration::seconds(-1));"},
{"lineNum":"  415","line":"        assert_eq!(ymdhms(2014, 5, 7, 7, 8, 9) - ymdhms(2014, 5, 6, 7, 8, 10),"},
{"lineNum":"  416","line":"                   Duration::seconds(86399));"},
{"lineNum":"  417","line":"        assert_eq!(ymdhms(2001, 9, 9, 1, 46, 39) - ymdhms(1970, 1, 1, 0, 0, 0),"},
{"lineNum":"  418","line":"                   Duration::seconds(999_999_999));"},
{"lineNum":"  419","line":"    }"},
{"lineNum":"  420","line":""},
{"lineNum":"  421","line":"    #[test]"},
{"lineNum":"  422","line":"    fn test_datetime_timestamp() {"},
{"lineNum":"  423","line":"        let to_timestamp = |y,m,d,h,n,s| NaiveDate::from_ymd(y,m,d).and_hms(h,n,s).timestamp();"},
{"lineNum":"  424","line":"        assert_eq!(to_timestamp(1969, 12, 31, 23, 59, 59), -1);"},
{"lineNum":"  425","line":"        assert_eq!(to_timestamp(1970, 1, 1, 0, 0, 0), 0);"},
{"lineNum":"  426","line":"        assert_eq!(to_timestamp(1970, 1, 1, 0, 0, 1), 1);"},
{"lineNum":"  427","line":"        assert_eq!(to_timestamp(2001, 9, 9, 1, 46, 40), 1_000_000_000);"},
{"lineNum":"  428","line":"        assert_eq!(to_timestamp(2038, 1, 19, 3, 14, 7), 0x7fffffff);"},
{"lineNum":"  429","line":"    }"},
{"lineNum":"  430","line":""},
{"lineNum":"  431","line":"    #[test]"},
{"lineNum":"  432","line":"    fn test_datetime_from_str() {"},
{"lineNum":"  433","line":"        // valid cases"},
{"lineNum":"  434","line":"        let valid = ["},
{"lineNum":"  435","line":"            \"2015-2-18T23:16:9.15\","},
{"lineNum":"  436","line":"            \"-77-02-18T23:16:09\","},
{"lineNum":"  437","line":"            \"  +82701  -  05  -  6  T  15  :  9  : 60.898989898989   \","},
{"lineNum":"  438","line":"        ];"},
{"lineNum":"  439","line":"        for &s in &valid {"},
{"lineNum":"  440","line":"            let d = match s.parse::<NaiveDateTime>() {"},
{"lineNum":"  441","line":"                Ok(d) => d,"},
{"lineNum":"  442","line":"                Err(e) => panic!(\"parsing `{}` has failed: {}\", s, e)"},
{"lineNum":"  443","line":"            };"},
{"lineNum":"  444","line":"            let s_ = format!(\"{:?}\", d);"},
{"lineNum":"  445","line":"            // `s` and `s_` may differ, but `s.parse()` and `s_.parse()` must be same"},
{"lineNum":"  446","line":"            let d_ = match s_.parse::<NaiveDateTime>() {"},
{"lineNum":"  447","line":"                Ok(d) => d,"},
{"lineNum":"  448","line":"                Err(e) => panic!(\"`{}` is parsed into `{:?}`, but reparsing that has failed: {}\","},
{"lineNum":"  449","line":"                                 s, d, e)"},
{"lineNum":"  450","line":"            };"},
{"lineNum":"  451","line":"            assert!(d == d_, \"`{}` is parsed into `{:?}`, but reparsed result \\"},
{"lineNum":"  452","line":"                              `{:?}` does not match\", s, d, d_);"},
{"lineNum":"  453","line":"        }"},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"        // some invalid cases"},
{"lineNum":"  456","line":"        // since `ParseErrorKind` is private, all we can do is to check if there was an error"},
{"lineNum":"  457","line":"        assert!(\"\".parse::<NaiveDateTime>().is_err());"},
{"lineNum":"  458","line":"        assert!(\"x\".parse::<NaiveDateTime>().is_err());"},
{"lineNum":"  459","line":"        assert!(\"15\".parse::<NaiveDateTime>().is_err());"},
{"lineNum":"  460","line":"        assert!(\"15:8:9\".parse::<NaiveDateTime>().is_err());"},
{"lineNum":"  461","line":"        assert!(\"15-8-9\".parse::<NaiveDateTime>().is_err());"},
{"lineNum":"  462","line":"        assert!(\"2015-15-15T15:15:15\".parse::<NaiveDateTime>().is_err());"},
{"lineNum":"  463","line":"        assert!(\"2012-12-12T12:12:12x\".parse::<NaiveDateTime>().is_err());"},
{"lineNum":"  464","line":"        assert!(\"2012-123-12T12:12:12\".parse::<NaiveDateTime>().is_err());"},
{"lineNum":"  465","line":"        assert!(\"+ 82701-123-12T12:12:12\".parse::<NaiveDateTime>().is_err());"},
{"lineNum":"  466","line":"        assert!(\"+802701-123-12T12:12:12\".parse::<NaiveDateTime>().is_err()); // out-of-bound"},
{"lineNum":"  467","line":"    }"},
{"lineNum":"  468","line":""},
{"lineNum":"  469","line":"    #[test]"},
{"lineNum":"  470","line":"    fn test_datetime_parse_from_str() {"},
{"lineNum":"  471","line":"        let ymdhms = |y,m,d,h,n,s| NaiveDate::from_ymd(y,m,d).and_hms(h,n,s);"},
{"lineNum":"  472","line":"        assert_eq!(NaiveDateTime::parse_from_str(\"2014-5-7T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),"},
{"lineNum":"  473","line":"                   Ok(ymdhms(2014, 5, 7, 12, 34, 56))); // ignore offset"},
{"lineNum":"  474","line":"        assert_eq!(NaiveDateTime::parse_from_str(\"2015-W06-1 000000\", \"%G-W%V-%u%H%M%S\"),"},
{"lineNum":"  475","line":"                   Ok(ymdhms(2015, 2, 2, 0, 0, 0)));"},
{"lineNum":"  476","line":"        assert_eq!(NaiveDateTime::parse_from_str(\"Fri, 09 Aug 2013 23:54:35 GMT\","},
{"lineNum":"  477","line":"                                                 \"%a, %d %b %Y %H:%M:%S GMT\"),"},
{"lineNum":"  478","line":"                   Ok(ymdhms(2013, 8, 9, 23, 54, 35)));"},
{"lineNum":"  479","line":"        assert!(NaiveDateTime::parse_from_str(\"Sat, 09 Aug 2013 23:54:35 GMT\","},
{"lineNum":"  480","line":"                                              \"%a, %d %b %Y %H:%M:%S GMT\").is_err());"},
{"lineNum":"  481","line":"        assert!(NaiveDateTime::parse_from_str(\"2014-5-7 12:3456\", \"%Y-%m-%d %H:%M:%S\").is_err());"},
{"lineNum":"  482","line":"        assert!(NaiveDateTime::parse_from_str(\"12:34:56\", \"%H:%M:%S\").is_err()); // insufficient"},
{"lineNum":"  483","line":"    }"},
{"lineNum":"  484","line":""},
{"lineNum":"  485","line":"    #[test]"},
{"lineNum":"  486","line":"    fn test_datetime_format() {"},
{"lineNum":"  487","line":"        let dt = NaiveDate::from_ymd(2010, 9, 8).and_hms_milli(7, 6, 54, 321);"},
{"lineNum":"  488","line":"        assert_eq!(dt.format(\"%c\").to_string(), \"Wed Sep  8 07:06:54 2010\");"},
{"lineNum":"  489","line":"        assert_eq!(dt.format(\"%s\").to_string(), \"1283929614\");"},
{"lineNum":"  490","line":"        assert_eq!(dt.format(\"%t%n%%%n%t\").to_string(), \"\\t\\n%\\n\\t\");"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"        // a horror of leap second: coming near to you."},
{"lineNum":"  493","line":"        let dt = NaiveDate::from_ymd(2012, 6, 30).and_hms_milli(23, 59, 59, 1_000);"},
{"lineNum":"  494","line":"        assert_eq!(dt.format(\"%c\").to_string(), \"Sat Jun 30 23:59:60 2012\");"},
{"lineNum":"  495","line":"        assert_eq!(dt.format(\"%s\").to_string(), \"1341100799\"); // not 1341100800, it\'s intentional."},
{"lineNum":"  496","line":"    }"},
{"lineNum":"  497","line":""},
{"lineNum":"  498","line":"    #[test]"},
{"lineNum":"  499","line":"    fn test_datetime_add_sub_invariant() { // issue #37"},
{"lineNum":"  500","line":"        let base = NaiveDate::from_ymd(2000, 1, 1).and_hms(0, 0, 0);"},
{"lineNum":"  501","line":"        let t = -946684799990000;"},
{"lineNum":"  502","line":"        let time = base + Duration::microseconds(t);"},
{"lineNum":"  503","line":"        assert_eq!(t, (time - base).num_microseconds().unwrap());"},
{"lineNum":"  504","line":"    }"},
{"lineNum":"  505","line":""},
{"lineNum":"  506","line":"    #[cfg(feature = \"serde\")]"},
{"lineNum":"  507","line":"    extern crate serde_json;"},
{"lineNum":"  508","line":""},
{"lineNum":"  509","line":"    #[cfg(feature = \"serde\")]"},
{"lineNum":"  510","line":"    #[test]"},
{"lineNum":"  511","line":"    fn test_serde_serialize() {"},
{"lineNum":"  512","line":"        use self::serde_json::to_string;"},
{"lineNum":"  513","line":""},
{"lineNum":"  514","line":"        let date = NaiveDate::from_ymd(2014, 7, 24).and_hms(12, 34, 6);"},
{"lineNum":"  515","line":"        let serialized = to_string(&date).unwrap();"},
{"lineNum":"  516","line":""},
{"lineNum":"  517","line":"        assert_eq!(serialized, \"\\\"2014-07-24T12:34:06\\\"\");"},
{"lineNum":"  518","line":"    }"},
{"lineNum":"  519","line":""},
{"lineNum":"  520","line":"    #[cfg(feature = \"serde\")]"},
{"lineNum":"  521","line":"    #[test]"},
{"lineNum":"  522","line":"    fn test_serde_deserialize() {"},
{"lineNum":"  523","line":"        use self::serde_json::from_str;"},
{"lineNum":"  524","line":""},
{"lineNum":"  525","line":"        let date = NaiveDate::from_ymd(2014, 7, 24).and_hms(12, 34, 6);"},
{"lineNum":"  526","line":"        let deserialized: NaiveDateTime = from_str(\"\\\"2014-07-24T12:34:06\\\"\").unwrap();"},
{"lineNum":"  527","line":""},
{"lineNum":"  528","line":"        assert_eq!(deserialized, date);"},
{"lineNum":"  529","line":"    }"},
{"lineNum":"  530","line":"}"},
{"lineNum":"  531","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "telos-d83df5b344033f23", "date" : "2016-02-13 22:08:34", "instrumented" : 9, "covered" : 0,};
var merged_data = [];
